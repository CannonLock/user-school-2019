{
    "docs": [
        {
            "location": "/",
            "text": "(Image copyright Ann Althouse, licensed under Creative Commons, \nhttp://www.flickr.com/photos/althouse/141467660/\n)\n\n\nOSG User School 2019\n\u00b6\n\n\nCould you transform your research with vast amounts of computing?\n\n\n\nCome spend a week at the beautiful University of Wisconsin\u2013Madison and learn how.\n\n\nDuring the school, July 15\u201319, you will learn to use high-throughput computing (HTC) systems\u00a0\u2014 at your\nown campus or using the national Open Science Grid (OSG)\u00a0\u2014 to run large-scale computing applications that are\nat the heart of today\u2019s cutting-edge science.  Through lectures, discussions, and \nlots of hands-on activities\n\nwith experienced OSG staff, you will learn how HTC systems work, how to run and manage lots of jobs and huge datasets to\nimplement a scientific computing workflow, and where to turn for more information and help.  Take a look at\n\nthe high-level curriculum and syllabus\n for more details.\n\n\nThe school is ideal for graduate students in any science or research domain where large-scale computing is a vital part\nof the research process, plus we will consider applications from advanced undergraduates, post-doctoral students,\nfaculty, and staff.  Students accepted to this program will receive financial support for basic travel and local costs\nassociated with the School.\n\n\nApplications\n\u00b6\n\n\nApplications are now closed and all applicants have been notified of their status.  We received a large number of\napplications this year, so thanks to everyone for your enthusiastic interest!\n\n\nInformation for Participants\n\u00b6\n\n\n\n\nCurriculum\n\n\nHigh-level curriculum\n\n\n\n\n\n\nLogistics\n\n\nGeneral information and travel schedule\n\n\nVisa requirements for non-resident aliens\n\n\nTravel planning to and from Madison\n\n\nHotel information\n\n\nLocal transportation within Madison\n\n\nSchool location\n\n\n\n\n\n\n\n\nContact Us\n\u00b6\n\n\nThe OSG User School is part of the \nOSG Outreach Area\n\u00a0\u2014 please visit\nthat site to learn about other OSG Outreach activities.\n\n\nIf you have any questions about the School, the application process, or anything else, feel free to email us:\n\n\nuser-school@opensciencegrid.org\n\n\n \u00a0 \n \u00a0 OSGUserSchool",
            "title": "User School 2019"
        },
        {
            "location": "/#osg-user-school-2019",
            "text": "Could you transform your research with vast amounts of computing?  Come spend a week at the beautiful University of Wisconsin\u2013Madison and learn how.  During the school, July 15\u201319, you will learn to use high-throughput computing (HTC) systems\u00a0\u2014 at your\nown campus or using the national Open Science Grid (OSG)\u00a0\u2014 to run large-scale computing applications that are\nat the heart of today\u2019s cutting-edge science.  Through lectures, discussions, and  lots of hands-on activities \nwith experienced OSG staff, you will learn how HTC systems work, how to run and manage lots of jobs and huge datasets to\nimplement a scientific computing workflow, and where to turn for more information and help.  Take a look at the high-level curriculum and syllabus  for more details.  The school is ideal for graduate students in any science or research domain where large-scale computing is a vital part\nof the research process, plus we will consider applications from advanced undergraduates, post-doctoral students,\nfaculty, and staff.  Students accepted to this program will receive financial support for basic travel and local costs\nassociated with the School.",
            "title": "OSG User School 2019"
        },
        {
            "location": "/#applications",
            "text": "Applications are now closed and all applicants have been notified of their status.  We received a large number of\napplications this year, so thanks to everyone for your enthusiastic interest!",
            "title": "Applications"
        },
        {
            "location": "/#information-for-participants",
            "text": "Curriculum  High-level curriculum    Logistics  General information and travel schedule  Visa requirements for non-resident aliens  Travel planning to and from Madison  Hotel information  Local transportation within Madison  School location",
            "title": "Information for Participants"
        },
        {
            "location": "/#contact-us",
            "text": "The OSG User School is part of the  OSG Outreach Area \u00a0\u2014 please visit\nthat site to learn about other OSG Outreach activities.  If you have any questions about the School, the application process, or anything else, feel free to email us:  user-school@opensciencegrid.org   \u00a0   \u00a0 OSGUserSchool",
            "title": "Contact Us"
        },
        {
            "location": "/curriculum/overview/",
            "text": "Curriculum and Syllabus\n\u00b6\n\n\nCurriculum Goals\n\u00b6\n\n\nAt a high level, the goal of the School is to help students learn to:\n\n\n\n\nDescribe the basic elements and architecture of a distributed computing system\n\n\nUse basic distributed computing tools to run jobs and manage data\n\n\nSelect reasonable tools and methods to solve scientific computing problems using distributed computing\n\n\nOutline the role of distributed computing, its history, current state and issues, and hopes for the future\n\n\nIdentify resources for support, further study, and development opportunities in distributed computing\n\n\n\n\nSyllabus\n\u00b6\n\n\nThe high-level syllabus for 2019 is below; a more detailed schedule will be published later as we get closer to the\nschool.\n\n\n\n\n\n\n\n\n\n\nMorning\n\n\nAfternoon\n\n\n\n\n\n\n\n\n\n\nMonday\n\n\nWelcome\nIntroduction to high-throughput computing\nRunning jobs locally with Condor\n\n\nIntroduction to high-throughput workflows\nRunning workflows locally with Condor\n\n\n\n\n\n\nTuesday\n\n\nIntroduction to grid computing and overlays\nBasic troubleshooting\n\n\nIntroduction to OSG\nRunning jobs using OSG glideins\nRunning on real resources\nOSG architecture\n\n\n\n\n\n\nWednesday\n\n\nDealing with real software\n(Especially R and MATLAB, but others as well)\n\n\nFree choice:\n\u2022\u00a0More details about how overlays systems work\n\u2022\u00a0Get one-on-one help with your computing work\n\u2022\u00a0Take a break and visit Madison\n\n\n\n\n\n\nThursday\n\n\nIntroduction to distributed storage\nUsing remote storage systems\n\n\nManaging large, distributed data\nIntroduction to grid security for end users\n\n\n\n\n\n\nFriday\n\n\nTurning scientific computing needs into HTC jobs\nEstimating resource needs, decomposing and running large jobs\nStrategies and technologies for handling large workflows\n\n\nPrinciples of high-throughput computing\nScientific computing showcase\nWhere to go and what to do next \u2014 resources, funding, etc.",
            "title": "High-level overview"
        },
        {
            "location": "/curriculum/overview/#curriculum-and-syllabus",
            "text": "",
            "title": "Curriculum and Syllabus"
        },
        {
            "location": "/curriculum/overview/#curriculum-goals",
            "text": "At a high level, the goal of the School is to help students learn to:   Describe the basic elements and architecture of a distributed computing system  Use basic distributed computing tools to run jobs and manage data  Select reasonable tools and methods to solve scientific computing problems using distributed computing  Outline the role of distributed computing, its history, current state and issues, and hopes for the future  Identify resources for support, further study, and development opportunities in distributed computing",
            "title": "Curriculum Goals"
        },
        {
            "location": "/curriculum/overview/#syllabus",
            "text": "The high-level syllabus for 2019 is below; a more detailed schedule will be published later as we get closer to the\nschool.      Morning  Afternoon      Monday  Welcome Introduction to high-throughput computing Running jobs locally with Condor  Introduction to high-throughput workflows Running workflows locally with Condor    Tuesday  Introduction to grid computing and overlays Basic troubleshooting  Introduction to OSG Running jobs using OSG glideins Running on real resources OSG architecture    Wednesday  Dealing with real software (Especially R and MATLAB, but others as well)  Free choice: \u2022\u00a0More details about how overlays systems work \u2022\u00a0Get one-on-one help with your computing work \u2022\u00a0Take a break and visit Madison    Thursday  Introduction to distributed storage Using remote storage systems  Managing large, distributed data Introduction to grid security for end users    Friday  Turning scientific computing needs into HTC jobs Estimating resource needs, decomposing and running large jobs Strategies and technologies for handling large workflows  Principles of high-throughput computing Scientific computing showcase Where to go and what to do next \u2014 resources, funding, etc.",
            "title": "Syllabus"
        },
        {
            "location": "/logistics/",
            "text": "OSG User School 2019 Logistics\n\u00b6\n\n\nThe following pages describe some of the important information about your visit to Madison for the OSG User School.\nPlease read them carefully.  There will be other pages with local details soon.\n\n\n\n\nVisa requirements for non-resident aliens\n\n\nTravel planning to and from Madison\n\n\nHotel information\n\n\nLocal transportation within Madison\n\n\nSchool location\n\n\n\n\nAs always: If you have questions, email us at \nuser-school@opensciencegrid.org\n.  Use that email address for all emails\nabout the organization of the OSG School.\n\n\nGeneral Information About the School Schedule\n\u00b6\n\n\nTravel Schedule\n\u00b6\n\n\nFor planning your trip:\n\n\n\n\nArrive on Sunday, July 14, 2019,\n prior to 6 p.m. (if possible).  Classes begin on Monday morning, but there is a\n  welcome dinner on Sunday evening for all participants (including instructors).  This is a nice way to get to know each\n  other and to start the week.\n\n\n\n\n\n\n\n\n\nDepart on Saturday, July 20, 2019,\n any time.  The School ends with another dinner on Friday evening, so it is best\n  to stay that night.\n\n\n\n\nIf we offered to pay for your hotel room, we will pay for the six nights of this schedule.\n\n\nSchool Hours\n\u00b6\n\n\nThe School is Monday through Friday, 9:00 a.m. to about 5:00 p.m.; the lecture hall doors open at about 8:00 a.m. for\nbreakfast, and there will be optional work sessions on Monday, Tuesday, and Thursday evenings.  A detailed schedule will\nbe available before the School begins.\n\n\nContact Information\n\u00b6\n\n\nIf you have questions, do not wait to contact us!\n\n\nuser-school@opensciencegrid.org",
            "title": "General information"
        },
        {
            "location": "/logistics/#osg-user-school-2019-logistics",
            "text": "The following pages describe some of the important information about your visit to Madison for the OSG User School.\nPlease read them carefully.  There will be other pages with local details soon.   Visa requirements for non-resident aliens  Travel planning to and from Madison  Hotel information  Local transportation within Madison  School location   As always: If you have questions, email us at  user-school@opensciencegrid.org .  Use that email address for all emails\nabout the organization of the OSG School.",
            "title": "OSG User School 2019 Logistics"
        },
        {
            "location": "/logistics/#general-information-about-the-school-schedule",
            "text": "",
            "title": "General Information About the School Schedule"
        },
        {
            "location": "/logistics/#travel-schedule",
            "text": "For planning your trip:   Arrive on Sunday, July 14, 2019,  prior to 6 p.m. (if possible).  Classes begin on Monday morning, but there is a\n  welcome dinner on Sunday evening for all participants (including instructors).  This is a nice way to get to know each\n  other and to start the week.     Depart on Saturday, July 20, 2019,  any time.  The School ends with another dinner on Friday evening, so it is best\n  to stay that night.   If we offered to pay for your hotel room, we will pay for the six nights of this schedule.",
            "title": "Travel Schedule"
        },
        {
            "location": "/logistics/#school-hours",
            "text": "The School is Monday through Friday, 9:00 a.m. to about 5:00 p.m.; the lecture hall doors open at about 8:00 a.m. for\nbreakfast, and there will be optional work sessions on Monday, Tuesday, and Thursday evenings.  A detailed schedule will\nbe available before the School begins.",
            "title": "School Hours"
        },
        {
            "location": "/logistics/#contact-information",
            "text": "If you have questions, do not wait to contact us!  user-school@opensciencegrid.org",
            "title": "Contact Information"
        },
        {
            "location": "/logistics/personal-info/",
            "text": "Documentation Requirements for Non-Resident Aliens\n\u00b6\n\n\nThis page is for Non-Resident Aliens only.\n  If you are a United States citizen or\npermanent resident, this page does not apply to you.\n\n\nFor the University of Wisconsin to pay for your travel, hotel, or meal expenses, we must have certain personal\ninformation from you.  We collect as little information as possible and do not share it except with University\nadministrative staff who need it.  Most of what we need comes from the online form you completed after accepting our\ninvitation to attend.\n\n\nWhen you come to the School in Madison, we will need to look at and verify your travel documents.  Please bring all\ntravel documents to the School!\n\n\nNote: If you are not being reimbursed for any meals and/or travel for the school or if you are from UW-Madison or the\nMadison area, these documents are not required.\n\n\nTasks To Do Now\n\u00b6\n\n\nPlease check your passport and visa for travel in the United States now.  Make sure that all documents are valid from\nnow and until after the School ends.  If any documents are expired or will expire before the end of the School:\n\n\n\n\nTell us immediately, so that we can help you\n\n\nBegin the process for updating your documents immediately\n\n\nDo whatever you can to expedite the update process\n\n\n\n\nThe University of Wisconsin cannot pay for or reimburse you for costs without valid travel documents.  We have no\ncontrol over this policy and there are no exceptions.\n\n\nIf you are in the United States on a J-1 Scholar visa,\n there\nare extra steps needed to make the University and Federal government happy.  If you have a J-1 visa and have not heard\nfrom us about it already, please email us immediately so that we can help.\n\n\nDocuments to Bring to the School\n\u00b6\n\n\nWhen you come to Madison, you must bring:\n\n\n\n\nPassport\n\n\nU.S. visa\n\n\nU.S. Customs and Border Protection \nform I-94\n\n\nIf you entered the U.S. before 30 April 2013, the I-94 should be stapled into your passport \u2014 do not remove it!\n\n\nIf you entered the U.S. after 30 April 2013, the I-94 is stored electronically;\n  \nyou can request a copy to print from CBP\n\n\nIf you are Canadian, you may use a second form of picture ID instead of the I-94 if you did not obtain an I-94.\n\n\n\n\n\n\nAdditional forms specified in the table below:\n\n\n\n\n\n\n\n\n\n\nIf you have this visa\n\n\nWe will also need\n\n\n\n\n\n\n\n\n\n\nF-1 (Student)\n\n\nForm I-20 (original document, not a copy)\n\n\n\n\n\n\nJ-1 (Visitor)\n\n\nForm DS-2019 (original document, not a copy)\n\n\n\n\n\n\nVisa Waiver Program\n\n\nPaper copy of ESTA Authorization\n\n\n\n\n\n\n\n\nPlease bring all required information and documents to the School, especially on Tuesday, July 16.  School staff will\nmake copies of the documents and return them to you as quickly as possible.  We will announce further details in class.",
            "title": "Visa requirements"
        },
        {
            "location": "/logistics/personal-info/#documentation-requirements-for-non-resident-aliens",
            "text": "This page is for Non-Resident Aliens only.   If you are a United States citizen or\npermanent resident, this page does not apply to you.  For the University of Wisconsin to pay for your travel, hotel, or meal expenses, we must have certain personal\ninformation from you.  We collect as little information as possible and do not share it except with University\nadministrative staff who need it.  Most of what we need comes from the online form you completed after accepting our\ninvitation to attend.  When you come to the School in Madison, we will need to look at and verify your travel documents.  Please bring all\ntravel documents to the School!  Note: If you are not being reimbursed for any meals and/or travel for the school or if you are from UW-Madison or the\nMadison area, these documents are not required.",
            "title": "Documentation Requirements for Non-Resident Aliens"
        },
        {
            "location": "/logistics/personal-info/#tasks-to-do-now",
            "text": "Please check your passport and visa for travel in the United States now.  Make sure that all documents are valid from\nnow and until after the School ends.  If any documents are expired or will expire before the end of the School:   Tell us immediately, so that we can help you  Begin the process for updating your documents immediately  Do whatever you can to expedite the update process   The University of Wisconsin cannot pay for or reimburse you for costs without valid travel documents.  We have no\ncontrol over this policy and there are no exceptions.  If you are in the United States on a J-1 Scholar visa,  there\nare extra steps needed to make the University and Federal government happy.  If you have a J-1 visa and have not heard\nfrom us about it already, please email us immediately so that we can help.",
            "title": "Tasks To Do Now"
        },
        {
            "location": "/logistics/personal-info/#documents-to-bring-to-the-school",
            "text": "When you come to Madison, you must bring:   Passport  U.S. visa  U.S. Customs and Border Protection  form I-94  If you entered the U.S. before 30 April 2013, the I-94 should be stapled into your passport \u2014 do not remove it!  If you entered the U.S. after 30 April 2013, the I-94 is stored electronically;\n   you can request a copy to print from CBP  If you are Canadian, you may use a second form of picture ID instead of the I-94 if you did not obtain an I-94.    Additional forms specified in the table below:      If you have this visa  We will also need      F-1 (Student)  Form I-20 (original document, not a copy)    J-1 (Visitor)  Form DS-2019 (original document, not a copy)    Visa Waiver Program  Paper copy of ESTA Authorization     Please bring all required information and documents to the School, especially on Tuesday, July 16.  School staff will\nmake copies of the documents and return them to you as quickly as possible.  We will announce further details in class.",
            "title": "Documents to Bring to the School"
        },
        {
            "location": "/logistics/travel/",
            "text": "Travel To and From Madison\n\u00b6\n\n\nWhether we offered to pay your travel costs or not, please make sure that we get a copy of your travel plans so that we\nknow when to expect you here and can plan accurately.  (If we offered to pay for your hotel room, we will make a room\nreservation and pay for the six nights of the schedule.)\n\n\nFind the numbered section below that applies to you:\n\n\n1. We Offered to Pay for Your Travel\n\u00b6\n\n\nOur goal is to find reasonable and comfortable travel options for you to come to Madison and return home.  At the same\ntime, we must stay within our budget and follow all University of Wisconsin rules about arranging and paying for your\ntravel costs.  So let\u2019s work together to find something that makes sense for everyone.\n\n\nHere are a few ideas that have worked in the past to help some School travelers:\n\n\n\n\n\n\nIf you are less than 300 miles from Madison, consider driving; we can reimburse mileage and tolls up to a point.  Or\n  look into bus routes, especially from larger cities like Chicago.\n\n\n\n\n\n\nIf you fly, it may be much cheaper to fly to Milwaukee (1\u00bd hours away) or Chicago (2\u00bd hours away), then\n  take a direct bus to Madison.  The buses are very comfortable, have wi-fi, and run frequently.  See below.\n\n\n\n\n\n\nAlso if you fly, be flexible about departure times \u2014 early and late flights are often the least expensive.  Now we do\n  not like very early or very late flights any more than you do, so we will work hard to find reasonable flight times.\n\n\n\n\n\n\nNote:\n Please try to complete your travel plans by mid-June, before rates go up significantly.\n\n\nTravel by Airplane\n\u00b6\n\n\nDo NOT buy your own airline tickets\n.  University rules require that our travel\nagency, Fox World Travel (FWT), purchases your tickets.\n\n\nUse the following information to get air travel tickets:\n\n\n\n\n\n\nGather your travel information: full legal name (as it is written on government IDs), date of birth, phone number;\n  travel dates and starting/ending location(s); and any travel preferences.  Then, contact Fox World Travel directly:\n\n\n\n\nBy email:\n send to \nuwgroups@foxworldtravel.com\n and include your name (e.g., \u201cT. Cartwright\u201d) and\n  \nGroup Code 09UW3749\n in the subject line.\n\n\nBy phone:\n From the U.S., call 866-230-8787 toll free, or internationally, call +1\u00a0920-230-6467.  Select\n  option 4, and tell them you are using \nGroup Code 09UW3749\n\n\n\n\n\n\n\n\nWe must review and approve \nmost\n trips.  FWT is authorized to purchase tickets directly only in the easiest cases.\n  But if the FWT agent says that your trip must be reviewed, do not worry!  It just means that we need to check our\n  budget, make sure that we have considered all reasonable options, and are following all University rules.  Hopefully\n  we can approve your first choice, otherwise we will work with you and FWT to find one or more reasonable options.\n  Some common reasons for a trip needing review are: total trip cost over $475, travel starting and ending at different\n  locations, and travel on dates other than July 14 and 20.\n\n\n\n\n\n\nApproval takes time, so it may take up to a day to get final confirmation.  Airplane tickets cannot be held without\n  purchase over a weekend, so it is best to avoid contacting FWT late on Fridays.  Also note that FWT and\n  UW\u2013Madison are closed on Monday, May 27, for Memorial Day.\n\n\n\n\n\n\nPlease be considerate of the FWT agent(s) you work with.  They work hard to find good options for you, but they must\n  also follow our rules.  If you feel that they are not providing the options that you want, you should email us.  We\n  will try to understand the options that you want and that FWT is providing, and help resolve any issues.  Do not argue\n  with the FWT agents, especially about options you find online\u00a0\u2014 there are many reasons why that option\n  might not be available to us.\n\n\n\n\n\n\nTravel by Bus\n\u00b6\n\n\nFor some nearby locations, or in addition to air travel to Chicago or Milwaukee, it may be helpful to take a bus to\nMadison.  Bus companies that School travelers have used a great deal in the past are:\n\n\n\n\nVan Galder Bus\n, especially from Chicago\n\n\nBadger Bus\n, especially from Milwaukee\n\n\n\n\nYou may purchase bus tickets through Fox World Travel (FWT):\n\n\n\n\nBy email:\n send to \nuwgroups@foxworldtravel.com\n and include your name (e.g., \u201cT. Cartwright\u201d) and\n  \nGroup Code 09UW3749\n in the subject line.\n\n\nBy phone:\n From the U.S., call 866-230-8787 toll free, or internationally, call +1\u00a0920-230-6467.  Select\n  option 4, and tell them you are using \nGroup Code 09UW3749\n\n\n\n\nOr for maximum flexibility, you may purchase bus tickets yourself \nbefore or on\n the day of travel.  If you purchase\nyour own tickets, you must get our approval for the estimated cost first, then request reimbursement from us after the\nSchool.\n\n\nIf you purchase your own tickets, save the original receipt (even if by email).  It is best to have a detailed receipt\n(including your name, itinerary, date of purchase, and total amount paid), but a regular ticket stub (e.g., without your\nname or date) should work fine.  Just get what you can!\n\n\nBe sure to email us with your bus plans, including:\n\n\n\n\nTransportation provider(s) (e.g., Van Galder bus)\n\n\nArrival date and approximate time\n\n\nDeparture date and approximate time\n\n\nArrival and departure location within Madison\n\n\nActual or estimated cost (indicate which)\n\n\n\n\nTravel by Personal Car\n\u00b6\n\n\nIf you are driving to Madison, you will be reimbursed the mileage rate of $0.58 per mile for the shortest round-trip\ndistance (as calculated by Google Maps), plus tolls.  Also, we will pay for parking costs for the week at the hotel in\nMadison (but not elsewhere).  We recommend keeping your receipts for tolls.\n\n\nNote: Due to the high mileage reimbursement rate, driving can be an expensive option!  We reserve the right to limit\nyour total driving reimbursement, so work with us on the details.\n\n\nTo travel by personal car, please check with us first.  We may search for comparable flight options, to make sure that\ndriving is indeed the least expensive method.\n\n\nBe sure to email us with your travel plans as soon as possible.  Try to include:\n\n\n\n\nDeparture date from home, location (for mileage calculation), and approximate time of arrival in Madison\n\n\nDeparture date and approximate time from Madison, and return location (for mileage calculation) if different than above\n\n\n\n\n2. You Are Paying for Your Travel\n\u00b6\n\n\nIf you are paying for your own travel or if someone else is paying for it, go ahead and make your travel arrangements\nnow!  Just remember to arrive on Sunday, July 14, before 6pm and depart on Saturday, July 20 (or else check with us\nfirst).\n\n\nBe sure to email us with your travel plans as soon as possible.  Try to include:\n\n\n\n\nTransportation provider(s) (e.g., airline)\n\n\nArrival date and approximate time\n\n\nDeparture date and approximate time\n\n\nArrival and departure location within Madison (e.g., airport, bus station, etc.)",
            "title": "Travel planning"
        },
        {
            "location": "/logistics/travel/#travel-to-and-from-madison",
            "text": "Whether we offered to pay your travel costs or not, please make sure that we get a copy of your travel plans so that we\nknow when to expect you here and can plan accurately.  (If we offered to pay for your hotel room, we will make a room\nreservation and pay for the six nights of the schedule.)  Find the numbered section below that applies to you:",
            "title": "Travel To and From Madison"
        },
        {
            "location": "/logistics/travel/#1-we-offered-to-pay-for-your-travel",
            "text": "Our goal is to find reasonable and comfortable travel options for you to come to Madison and return home.  At the same\ntime, we must stay within our budget and follow all University of Wisconsin rules about arranging and paying for your\ntravel costs.  So let\u2019s work together to find something that makes sense for everyone.  Here are a few ideas that have worked in the past to help some School travelers:    If you are less than 300 miles from Madison, consider driving; we can reimburse mileage and tolls up to a point.  Or\n  look into bus routes, especially from larger cities like Chicago.    If you fly, it may be much cheaper to fly to Milwaukee (1\u00bd hours away) or Chicago (2\u00bd hours away), then\n  take a direct bus to Madison.  The buses are very comfortable, have wi-fi, and run frequently.  See below.    Also if you fly, be flexible about departure times \u2014 early and late flights are often the least expensive.  Now we do\n  not like very early or very late flights any more than you do, so we will work hard to find reasonable flight times.    Note:  Please try to complete your travel plans by mid-June, before rates go up significantly.",
            "title": "1. We Offered to Pay for Your Travel"
        },
        {
            "location": "/logistics/travel/#travel-by-airplane",
            "text": "Do NOT buy your own airline tickets .  University rules require that our travel\nagency, Fox World Travel (FWT), purchases your tickets.  Use the following information to get air travel tickets:    Gather your travel information: full legal name (as it is written on government IDs), date of birth, phone number;\n  travel dates and starting/ending location(s); and any travel preferences.  Then, contact Fox World Travel directly:   By email:  send to  uwgroups@foxworldtravel.com  and include your name (e.g., \u201cT. Cartwright\u201d) and\n   Group Code 09UW3749  in the subject line.  By phone:  From the U.S., call 866-230-8787 toll free, or internationally, call +1\u00a0920-230-6467.  Select\n  option 4, and tell them you are using  Group Code 09UW3749     We must review and approve  most  trips.  FWT is authorized to purchase tickets directly only in the easiest cases.\n  But if the FWT agent says that your trip must be reviewed, do not worry!  It just means that we need to check our\n  budget, make sure that we have considered all reasonable options, and are following all University rules.  Hopefully\n  we can approve your first choice, otherwise we will work with you and FWT to find one or more reasonable options.\n  Some common reasons for a trip needing review are: total trip cost over $475, travel starting and ending at different\n  locations, and travel on dates other than July 14 and 20.    Approval takes time, so it may take up to a day to get final confirmation.  Airplane tickets cannot be held without\n  purchase over a weekend, so it is best to avoid contacting FWT late on Fridays.  Also note that FWT and\n  UW\u2013Madison are closed on Monday, May 27, for Memorial Day.    Please be considerate of the FWT agent(s) you work with.  They work hard to find good options for you, but they must\n  also follow our rules.  If you feel that they are not providing the options that you want, you should email us.  We\n  will try to understand the options that you want and that FWT is providing, and help resolve any issues.  Do not argue\n  with the FWT agents, especially about options you find online\u00a0\u2014 there are many reasons why that option\n  might not be available to us.",
            "title": "Travel by Airplane"
        },
        {
            "location": "/logistics/travel/#travel-by-bus",
            "text": "For some nearby locations, or in addition to air travel to Chicago or Milwaukee, it may be helpful to take a bus to\nMadison.  Bus companies that School travelers have used a great deal in the past are:   Van Galder Bus , especially from Chicago  Badger Bus , especially from Milwaukee   You may purchase bus tickets through Fox World Travel (FWT):   By email:  send to  uwgroups@foxworldtravel.com  and include your name (e.g., \u201cT. Cartwright\u201d) and\n   Group Code 09UW3749  in the subject line.  By phone:  From the U.S., call 866-230-8787 toll free, or internationally, call +1\u00a0920-230-6467.  Select\n  option 4, and tell them you are using  Group Code 09UW3749   Or for maximum flexibility, you may purchase bus tickets yourself  before or on  the day of travel.  If you purchase\nyour own tickets, you must get our approval for the estimated cost first, then request reimbursement from us after the\nSchool.  If you purchase your own tickets, save the original receipt (even if by email).  It is best to have a detailed receipt\n(including your name, itinerary, date of purchase, and total amount paid), but a regular ticket stub (e.g., without your\nname or date) should work fine.  Just get what you can!  Be sure to email us with your bus plans, including:   Transportation provider(s) (e.g., Van Galder bus)  Arrival date and approximate time  Departure date and approximate time  Arrival and departure location within Madison  Actual or estimated cost (indicate which)",
            "title": "Travel by Bus"
        },
        {
            "location": "/logistics/travel/#travel-by-personal-car",
            "text": "If you are driving to Madison, you will be reimbursed the mileage rate of $0.58 per mile for the shortest round-trip\ndistance (as calculated by Google Maps), plus tolls.  Also, we will pay for parking costs for the week at the hotel in\nMadison (but not elsewhere).  We recommend keeping your receipts for tolls.  Note: Due to the high mileage reimbursement rate, driving can be an expensive option!  We reserve the right to limit\nyour total driving reimbursement, so work with us on the details.  To travel by personal car, please check with us first.  We may search for comparable flight options, to make sure that\ndriving is indeed the least expensive method.  Be sure to email us with your travel plans as soon as possible.  Try to include:   Departure date from home, location (for mileage calculation), and approximate time of arrival in Madison  Departure date and approximate time from Madison, and return location (for mileage calculation) if different than above",
            "title": "Travel by Personal Car"
        },
        {
            "location": "/logistics/travel/#2-you-are-paying-for-your-travel",
            "text": "If you are paying for your own travel or if someone else is paying for it, go ahead and make your travel arrangements\nnow!  Just remember to arrive on Sunday, July 14, before 6pm and depart on Saturday, July 20 (or else check with us\nfirst).  Be sure to email us with your travel plans as soon as possible.  Try to include:   Transportation provider(s) (e.g., airline)  Arrival date and approximate time  Departure date and approximate time  Arrival and departure location within Madison (e.g., airport, bus station, etc.)",
            "title": "2. You Are Paying for Your Travel"
        },
        {
            "location": "/logistics/hotel/",
            "text": ".hi { font-weight: bold; color: #F60; }\n\n\n\n\nHotel Information\n\u00b6\n\n\nWe reserved a block of rooms at an area hotel for participants from outside\nMadison.\n\n\n\n\nBest Western Premier Park Hotel\n22 South\n  Carroll Street, Madison, WI\n+1\u00a0(608)\u00a0285\u20118000\n\n\n\n\nPlease note:\n We will reserve your room for you, so do\nnot contact the hotel yourself to reserve a room.  Exceptions to this rule are\nrare and clearly communicated.\n\n\nOther important hotel information:\n\n\n\n\nThis hotel has a free shuttle service; see the\n  \nlocal transportation page\n for more\n  information\n\n\nBefore the School, we will send you an email with your hotel confirmation\n  number\n\n\nWe pay only for basic room costs\u00a0\u2014 you must provide a credit card\n  to cover extra costs\n\n\nThere is one School participant per room; to have friends or family stay with\n  you, \nplease ask us now",
            "title": "Hotel information"
        },
        {
            "location": "/logistics/hotel/#hotel-information",
            "text": "We reserved a block of rooms at an area hotel for participants from outside\nMadison.   Best Western Premier Park Hotel 22 South\n  Carroll Street, Madison, WI +1\u00a0(608)\u00a0285\u20118000   Please note:  We will reserve your room for you, so do\nnot contact the hotel yourself to reserve a room.  Exceptions to this rule are\nrare and clearly communicated.  Other important hotel information:   This hotel has a free shuttle service; see the\n   local transportation page  for more\n  information  Before the School, we will send you an email with your hotel confirmation\n  number  We pay only for basic room costs\u00a0\u2014 you must provide a credit card\n  to cover extra costs  There is one School participant per room; to have friends or family stay with\n  you,  please ask us now",
            "title": "Hotel Information"
        },
        {
            "location": "/logistics/local-transportation/",
            "text": ".hi { font-weight: bold; color: rgb(255, 102, 00); }\n\n\n\n\nTravel in Madison\n\u00b6\n\n\nYou are responsible for your own transportation within Madison, but we will help\ncoordinate and can reimburse costs between the airport and your hotel.\n\n\nTravel Between the Madison Airport and Your Hotel\n\u00b6\n\n\nThe School hotel (Best Western) provides free shuttle service from and back to\nthe Madison airport, when available.  \nWe will help organize\ngroups\n to take shuttles and taxis, based on arrival and departure times.\nShuttle/taxi groups will be formed and emailed shortly before the School itself.\n\n\nGenerally, the hotel shuttle is free and direct, so it is the best option\nbetween airport and hotel.  If a shuttle is not available, you may take a taxi\nor ride-sharing service and be reimbursed after the School.  There are several\ngood taxi companies in Madison, including\n\nGreen Cab\n,\n\nBadger Cab\n, and\n\nUnion Cab\n, and both \nLyft\n\nand \nUber\n are active in Madison.  Taxis are readily\navailable at the Madison airport, but nearly everywhere else (e.g., from your\nhotel back to the airport), you should contact the company and request a ride or\nmake a reservation in advance.  Note that we can reimburse you only for taxi or\nride-sharing rides between the airport and hotel/campus area.\n\n\nTravel On and Near Campus\n\u00b6\n\n\nThe Best Western hotel is about 1\u00bc miles (2.1 km) from the classroom\nbuilding.  There are many good options for getting between your hotel and the\nSchool, plus other sights, restaurants, and other activities in Madison.\n\n\nWalking\n\u00b6\n\n\nIt is easy to walk in and around the University of Wisconsin\u2013Madison\ncampus.  Use a mapping app or ask us or your hotel for a map.  In particular,\nState Street\u00a0\u2014 which connects the Capitol Square with the UW\ncampus\u00a0\u2014 is full of great shops and restaurants and is worth\nstrolling along while you are here.\n\n\nHotel Shuttle\n\u00b6\n\n\nSee above; the hotel has a free shuttle that can be used to transport students\nbetween the hotel and the School\u2026 and other places.  Ask the hotel for\nmore information and availability.\n\n\nCity of Madison Metro Bus Service\n\u00b6\n\n\nMany \nMadison Metro\n buses stop near the\nhotels and pass through the University of Wisconsin\u2013Madison campus.  Bus\nfare is $2.00, and transfers from one route to another are free.  If you plan to\nuse buses to travel to and from the School every day, contact us, and we may be\nable to buy a bus pass for you or explain how to do so.\n\n\nThe official\n\nMadison Metro Bus page\n\nprovides route maps and times for all Madison buses.  Google Maps and the\nWisconsin phone app also do a good job.\n\n\nTaxis and Ride-Sharing Services\n\u00b6\n\n\nAs listed above in the airport-hotel section, there are several taxi companies\nand ride sharing services in Madison.  \nNote:\n We can reimburse you only for\ntransportation for School purposes, not personal reasons, and even then, only\nfor trips between the airport and either the hotel or the classroom building.\n\n\nMadison BCycle\n\u00b6\n\n\nMadison is a great city to bike in, and there is even a short-term bike rental\nsystem called \nBCycle\n here.  For instance, it is\npossible to pick up a bike at Union South, next to the classroom building, and\nthen drop it off at one of many locations around the central part of Madison.\nSee the website for more details.  While not terribly expensive, this is not a\ncost that we can reimburse.",
            "title": "Local transportation"
        },
        {
            "location": "/logistics/local-transportation/#travel-in-madison",
            "text": "You are responsible for your own transportation within Madison, but we will help\ncoordinate and can reimburse costs between the airport and your hotel.",
            "title": "Travel in Madison"
        },
        {
            "location": "/logistics/local-transportation/#travel-between-the-madison-airport-and-your-hotel",
            "text": "The School hotel (Best Western) provides free shuttle service from and back to\nthe Madison airport, when available.   We will help organize\ngroups  to take shuttles and taxis, based on arrival and departure times.\nShuttle/taxi groups will be formed and emailed shortly before the School itself.  Generally, the hotel shuttle is free and direct, so it is the best option\nbetween airport and hotel.  If a shuttle is not available, you may take a taxi\nor ride-sharing service and be reimbursed after the School.  There are several\ngood taxi companies in Madison, including Green Cab , Badger Cab , and Union Cab , and both  Lyft \nand  Uber  are active in Madison.  Taxis are readily\navailable at the Madison airport, but nearly everywhere else (e.g., from your\nhotel back to the airport), you should contact the company and request a ride or\nmake a reservation in advance.  Note that we can reimburse you only for taxi or\nride-sharing rides between the airport and hotel/campus area.",
            "title": "Travel Between the Madison Airport and Your Hotel"
        },
        {
            "location": "/logistics/local-transportation/#travel-on-and-near-campus",
            "text": "The Best Western hotel is about 1\u00bc miles (2.1 km) from the classroom\nbuilding.  There are many good options for getting between your hotel and the\nSchool, plus other sights, restaurants, and other activities in Madison.",
            "title": "Travel On and Near Campus"
        },
        {
            "location": "/logistics/local-transportation/#walking",
            "text": "It is easy to walk in and around the University of Wisconsin\u2013Madison\ncampus.  Use a mapping app or ask us or your hotel for a map.  In particular,\nState Street\u00a0\u2014 which connects the Capitol Square with the UW\ncampus\u00a0\u2014 is full of great shops and restaurants and is worth\nstrolling along while you are here.",
            "title": "Walking"
        },
        {
            "location": "/logistics/local-transportation/#hotel-shuttle",
            "text": "See above; the hotel has a free shuttle that can be used to transport students\nbetween the hotel and the School\u2026 and other places.  Ask the hotel for\nmore information and availability.",
            "title": "Hotel Shuttle"
        },
        {
            "location": "/logistics/local-transportation/#city-of-madison-metro-bus-service",
            "text": "Many  Madison Metro  buses stop near the\nhotels and pass through the University of Wisconsin\u2013Madison campus.  Bus\nfare is $2.00, and transfers from one route to another are free.  If you plan to\nuse buses to travel to and from the School every day, contact us, and we may be\nable to buy a bus pass for you or explain how to do so.  The official Madison Metro Bus page \nprovides route maps and times for all Madison buses.  Google Maps and the\nWisconsin phone app also do a good job.",
            "title": "City of Madison Metro Bus Service"
        },
        {
            "location": "/logistics/local-transportation/#taxis-and-ride-sharing-services",
            "text": "As listed above in the airport-hotel section, there are several taxi companies\nand ride sharing services in Madison.   Note:  We can reimburse you only for\ntransportation for School purposes, not personal reasons, and even then, only\nfor trips between the airport and either the hotel or the classroom building.",
            "title": "Taxis and Ride-Sharing Services"
        },
        {
            "location": "/logistics/local-transportation/#madison-bcycle",
            "text": "Madison is a great city to bike in, and there is even a short-term bike rental\nsystem called  BCycle  here.  For instance, it is\npossible to pick up a bike at Union South, next to the classroom building, and\nthen drop it off at one of many locations around the central part of Madison.\nSee the website for more details.  While not terribly expensive, this is not a\ncost that we can reimburse.",
            "title": "Madison BCycle"
        },
        {
            "location": "/logistics/location/",
            "text": "School Location\n\u00b6\n\n\nThe school will be held at the\n\nUniversity of Wisconsin\u2013Madison\n in the\n\nComputer Sciences Department\n, located at\n\n1210 West Dayton Street, Madison, WI, 53706\n.\nThe main classroom is Room 1240.\n\n\nSee the \nlocal transportation\n page for\nsuggestions about getting around Madison.\n\n\nComputer Sciences Building, Room 1240\n\u00b6\n\n\nSchool sessions, breakfasts, and lunches are held in \nRoom 1240\n:\n\n\n\n\nEnter the Computer Sciences building through the glass doors on Dayton Street\n\n\nTurn left and go through two sets of double doors\n\n\nWalk down the hallway just a bit\n\n\nRoom 1240 is on the right, up the ramp or a few stairs\n\n\n\n\nThe Computer Sciences building is a bit confusing, especially if you use other\nentrances.  However, there are signs that guide you to room 1240.  You can\nalways ask people for directions if you get lost.",
            "title": "School location"
        },
        {
            "location": "/logistics/location/#school-location",
            "text": "The school will be held at the University of Wisconsin\u2013Madison  in the Computer Sciences Department , located at 1210 West Dayton Street, Madison, WI, 53706 .\nThe main classroom is Room 1240.  See the  local transportation  page for\nsuggestions about getting around Madison.",
            "title": "School Location"
        },
        {
            "location": "/logistics/location/#computer-sciences-building-room-1240",
            "text": "School sessions, breakfasts, and lunches are held in  Room 1240 :   Enter the Computer Sciences building through the glass doors on Dayton Street  Turn left and go through two sets of double doors  Walk down the hallway just a bit  Room 1240 is on the right, up the ramp or a few stairs   The Computer Sciences building is a bit confusing, especially if you use other\nentrances.  However, there are signs that guide you to room 1240.  You can\nalways ask people for directions if you get lost.",
            "title": "Computer Sciences Building, Room 1240"
        },
        {
            "location": "/materials/",
            "text": "2018 OSG User School Materials\n\u00b6\n\n\nMonday\n\u00b6\n\n\nMonday Morning: Introduction to HTC and HTCondor\n\u00b6\n\n\n\n\nLecture: Introduction to HTC (\nPDF\n;\nPPT\n)\n\n\nExercise 1.1: Log in to the local submit machine and look around\n\n\nExercise 1.2: Experiment with basic HTCondor commands\n\n\nExercise 1.3: Run jobs!\n\n\nExercise 1.4: Read and interpret log files\n\n\nExercise 1.5: Determining Resource Needs\n\n\nExercise 1.6: Remove jobs from the queue\n\n\nBonus Exercise 1.7: Compile and run some C code\n\n\n\n\nMonday Morning: Running Many HTC Jobs\n\u00b6\n\n\n\n\nLecture: More HTCondor (\nPDF\n;\nPPT\n)\n\n\nExercise 2.1: Work with input and output files\n\n\nExercise 2.2: Use \nqueue N\n, \n$(Cluster)\n, and \n$(Process)\n\n\nExercise 2.3: Use \nqueue matching\n with a custom variable\n\n\nExercise 2.4: Use \nqueue from\n with custom variables\n\n\n\n\nMonday Afternoon: Job Attributes and Handling\n\u00b6\n\n\n\n\nLecture: Intermediate HTCondor: Workflows (\nPDF\n;\nPPT\n)\n\n\nExercise 3.1: Explore \ncondor_q\n\n\nExercise 3.2: Explore \ncondor_status\n\n\nExercise 3.3: A job that needs retries\n\n\n\n\nMonday Afternoon: Introduction to Distributed HTC\n\u00b6\n\n\n\n\nLecture: Introduction to DHTC (\nPDF\n;\n  \nPPT\n)\n\n\nExercise 4.1: Refresher - Submitting multiple jobs\n\n\nExercise 4.2: Log in to the OSG submit machine\n\n\nExercise 4.3: Running jobs in the OSG\n\n\nExercise 4.4: Hardware differences in the OSG\n\n\nExercise 4.5: Software differences in the OSG",
            "title": "Overview"
        },
        {
            "location": "/materials/#2018-osg-user-school-materials",
            "text": "",
            "title": "2018 OSG User School Materials"
        },
        {
            "location": "/materials/#monday",
            "text": "",
            "title": "Monday"
        },
        {
            "location": "/materials/#monday-morning-introduction-to-htc-and-htcondor",
            "text": "Lecture: Introduction to HTC ( PDF ; PPT )  Exercise 1.1: Log in to the local submit machine and look around  Exercise 1.2: Experiment with basic HTCondor commands  Exercise 1.3: Run jobs!  Exercise 1.4: Read and interpret log files  Exercise 1.5: Determining Resource Needs  Exercise 1.6: Remove jobs from the queue  Bonus Exercise 1.7: Compile and run some C code",
            "title": "Monday Morning: Introduction to HTC and HTCondor"
        },
        {
            "location": "/materials/#monday-morning-running-many-htc-jobs",
            "text": "Lecture: More HTCondor ( PDF ; PPT )  Exercise 2.1: Work with input and output files  Exercise 2.2: Use  queue N ,  $(Cluster) , and  $(Process)  Exercise 2.3: Use  queue matching  with a custom variable  Exercise 2.4: Use  queue from  with custom variables",
            "title": "Monday Morning: Running Many HTC Jobs"
        },
        {
            "location": "/materials/#monday-afternoon-job-attributes-and-handling",
            "text": "Lecture: Intermediate HTCondor: Workflows ( PDF ; PPT )  Exercise 3.1: Explore  condor_q  Exercise 3.2: Explore  condor_status  Exercise 3.3: A job that needs retries",
            "title": "Monday Afternoon: Job Attributes and Handling"
        },
        {
            "location": "/materials/#monday-afternoon-introduction-to-distributed-htc",
            "text": "Lecture: Introduction to DHTC ( PDF ;\n   PPT )  Exercise 4.1: Refresher - Submitting multiple jobs  Exercise 4.2: Log in to the OSG submit machine  Exercise 4.3: Running jobs in the OSG  Exercise 4.4: Hardware differences in the OSG  Exercise 4.5: Software differences in the OSG",
            "title": "Monday Afternoon: Introduction to Distributed HTC"
        },
        {
            "location": "/materials/day1/part1-ex1-login/",
            "text": "pre em { font-style: normal; background-color: yellow; } pre strong { font-style: normal; font-weight: bold; color: \\#008; } \n\n\n\nMonday Exercise 1.1: Log In and Look Around\n\u00b6\n\n\nThe goal of this first exercise is simply to log in to the local submit server and look around a little bit, which will take only a few minutes. \n\n\nIf you have trouble getting SSH access to the submit server, ask the instructors right away! Gaining access is critical for all remaining exercises.\n\n\nLogging In\n\u00b6\n\n\nToday, you will use a submit server named \nlearn.chtc.wisc.edu\n, which will allow you to submit jobs to our local HTCondor pool in CHTC.\n\n\nTo log in, use a \nSecure Shell\n (SSH) client.\n\n\n\n\nFrom a Mac or Linux computer, run the Terminal app and use the \nssh\n command, like so:\n\n\n\n\nusername@learn $\n ssh \n<USERNAME>\n@learn.chtc.wisc.edu\n\n\n\n\n\n\n\nOn Windows, we recommend a free client called \nPuTTY\n, but any SSH client should be fine.\n\n\n\n\nIf you need help finding or using an SSH client, ask the instructors for help right away\n!\n\n\nAbout Your Password\n\u00b6\n\n\n\n\nYour username and initial password are located on the Accounts sheet of paper that you received this morning\n\n\nWhile the \npasswd\n command will work (and will change your password temporarily), your initial password will be automatically reset for you on an hourly basis. (So you probably don't want to change your password, in the first place, and definitely want to keep your sheet of paper or memorize the password).\n\n\n\n\nRunning Commands\n\u00b6\n\n\nIn the exercises, we will show commands that you are supposed to type or copy into the command line, like this:\n\n\nusername@learn $\n hostname\n\nlearn.chtc.wisc.edu\n\n\n\n\n\n\n\n\nNote\n\n\nIn the first line of the example above, the \nusername@learn $\n part is meant to show the Linux command-line prompt.\nYou do not type this part! Further, your actual prompt probably is a bit different, and that is expected.\nSo in the example above, the command that you type at your own prompt is just the eight characters \nhostname\n.\nThe second line of the example, without the prompt, shows the output of the command; you do not type this part,\neither.\n\n\n\n\nHere are a few other commands that you can try (the examples below do not show the output from each command):\n\n\nusername@learn $\n whoami\n\nusername@learn $\n date\n\nusername@learn $\n uname -a\n\n\n\n\n\nA suggestion for the day: Try typing into the command line as many of the commands as you can. Copy-and-paste is fine, of course, but \nyou WILL learn more if you take the time to type each command, yourself.\n\n\nOrganizing Your Workspace\n\u00b6\n\n\nYou will be doing many different exercises over the next few days, many of them on this submit server. Each exercise may use many files, once finished. To avoid confusion, it may be useful to create a separate directory for each exercise.\n\n\nFor instance, for the rest of this exercise, you may wish to create and use a directory named \nmonday-1.1-login\n, or something like that.\n\n\nusername@learn $\n mkdir Mon\n\nusername@learn $\n mkdir Mon/1.1\n\nusername@learn $\n \ncd\n Mon/1.1\n\n\n\n\n\nShowing the Version of HTCondor\n\u00b6\n\n\nHTCondor is installed on this server. But what version? You can ask HTCondor itself:\n\n\nusername@learn $\n condor_version\n\n$\nCondorVersion: \n8\n.7.2 Jun \n02\n \n2017\n BuildID: \n407060\n $\n\n$\nCondorPlatform: x86_64_RedHat6 $\n\n\n\n\n\nAs you can see from the output, we are using HTCondor 8.7.2.\n\n\nBackground information about HTCondor version numbers\n\u00b6\n\n\nHTCondor always has two types of releases at one time: stable and development. HTCondor 8.4.x and 8.6.x are considered stable releases, indicated by even-numbered second digits (e.g., 4 or 6 in these cases). Within one stable series, all versions have the same features (for example 8.4.0 and 8.4.8 have the same set of features) and differ only in bug and security fixes.\n\n\nHTCondor 8.7.2 is an older development release series of HTCondor; the newest development release is 8.7.9. You know that these are a development release because the second digit (i.e., 7) is an odd number. \n\n\nReference Materials\n\u00b6\n\n\nHere are a few links to reference materials that might be interesting after the school (or perhaps during).\n\n\n\n\nHTCondor home page\n\n\nHTCondor manuals\n; it is probably best to read the manual corresponding to the version of HTCondor that you use (8.7.2 for today)\n\n\nCenter for High Throughput Computing\n, our campus research computing center, and home to HTCondor and other development of distributed computing tools",
            "title": "Exercise 1.1"
        },
        {
            "location": "/materials/day1/part1-ex1-login/#monday-exercise-11-log-in-and-look-around",
            "text": "The goal of this first exercise is simply to log in to the local submit server and look around a little bit, which will take only a few minutes.   If you have trouble getting SSH access to the submit server, ask the instructors right away! Gaining access is critical for all remaining exercises.",
            "title": "Monday Exercise 1.1: Log In and Look Around"
        },
        {
            "location": "/materials/day1/part1-ex1-login/#logging-in",
            "text": "Today, you will use a submit server named  learn.chtc.wisc.edu , which will allow you to submit jobs to our local HTCondor pool in CHTC.  To log in, use a  Secure Shell  (SSH) client.   From a Mac or Linux computer, run the Terminal app and use the  ssh  command, like so:   username@learn $  ssh  <USERNAME> @learn.chtc.wisc.edu   On Windows, we recommend a free client called  PuTTY , but any SSH client should be fine.   If you need help finding or using an SSH client, ask the instructors for help right away !",
            "title": "Logging In"
        },
        {
            "location": "/materials/day1/part1-ex1-login/#about-your-password",
            "text": "Your username and initial password are located on the Accounts sheet of paper that you received this morning  While the  passwd  command will work (and will change your password temporarily), your initial password will be automatically reset for you on an hourly basis. (So you probably don't want to change your password, in the first place, and definitely want to keep your sheet of paper or memorize the password).",
            "title": "About Your Password"
        },
        {
            "location": "/materials/day1/part1-ex1-login/#running-commands",
            "text": "In the exercises, we will show commands that you are supposed to type or copy into the command line, like this:  username@learn $  hostname learn.chtc.wisc.edu    Note  In the first line of the example above, the  username@learn $  part is meant to show the Linux command-line prompt.\nYou do not type this part! Further, your actual prompt probably is a bit different, and that is expected.\nSo in the example above, the command that you type at your own prompt is just the eight characters  hostname .\nThe second line of the example, without the prompt, shows the output of the command; you do not type this part,\neither.   Here are a few other commands that you can try (the examples below do not show the output from each command):  username@learn $  whoami username@learn $  date username@learn $  uname -a  A suggestion for the day: Try typing into the command line as many of the commands as you can. Copy-and-paste is fine, of course, but  you WILL learn more if you take the time to type each command, yourself.",
            "title": "Running Commands"
        },
        {
            "location": "/materials/day1/part1-ex1-login/#organizing-your-workspace",
            "text": "You will be doing many different exercises over the next few days, many of them on this submit server. Each exercise may use many files, once finished. To avoid confusion, it may be useful to create a separate directory for each exercise.  For instance, for the rest of this exercise, you may wish to create and use a directory named  monday-1.1-login , or something like that.  username@learn $  mkdir Mon username@learn $  mkdir Mon/1.1 username@learn $   cd  Mon/1.1",
            "title": "Organizing Your Workspace"
        },
        {
            "location": "/materials/day1/part1-ex1-login/#showing-the-version-of-htcondor",
            "text": "HTCondor is installed on this server. But what version? You can ask HTCondor itself:  username@learn $  condor_version $ CondorVersion:  8 .7.2 Jun  02   2017  BuildID:  407060  $ $ CondorPlatform: x86_64_RedHat6 $  As you can see from the output, we are using HTCondor 8.7.2.",
            "title": "Showing the Version of HTCondor"
        },
        {
            "location": "/materials/day1/part1-ex1-login/#background-information-about-htcondor-version-numbers",
            "text": "HTCondor always has two types of releases at one time: stable and development. HTCondor 8.4.x and 8.6.x are considered stable releases, indicated by even-numbered second digits (e.g., 4 or 6 in these cases). Within one stable series, all versions have the same features (for example 8.4.0 and 8.4.8 have the same set of features) and differ only in bug and security fixes.  HTCondor 8.7.2 is an older development release series of HTCondor; the newest development release is 8.7.9. You know that these are a development release because the second digit (i.e., 7) is an odd number.",
            "title": "Background information about HTCondor version numbers"
        },
        {
            "location": "/materials/day1/part1-ex1-login/#reference-materials",
            "text": "Here are a few links to reference materials that might be interesting after the school (or perhaps during).   HTCondor home page  HTCondor manuals ; it is probably best to read the manual corresponding to the version of HTCondor that you use (8.7.2 for today)  Center for High Throughput Computing , our campus research computing center, and home to HTCondor and other development of distributed computing tools",
            "title": "Reference Materials"
        },
        {
            "location": "/materials/day1/part1-ex2-commands/",
            "text": "pre em { font-style: normal; background-color: yellow; } pre strong { font-style: normal; font-weight: bold; color: \\#008; } \n\n\n\nMonday Exercise 1.2: Experiment With Basic HTCondor Commands\n\u00b6\n\n\nThe goal of this exercise is to use the basic informational HTCondor commands, \ncondor_q\n and \ncondor_status\n. They will be useful for monitoring your jobs and available slots (respectively) throughout the week.\n\n\nThis exercise should take only a few minutes.\n\n\nViewing Slots\n\u00b6\n\n\nAs discussed in the lecture, the \ncondor_status\n command is used to view the current state of slots in an HTCondor pool.\n\n\nAt its most basic, the command is very simple:\n\n\nusername@learn $\n condor_status\n\n\n\n\n\nThis command, running on our (CHTC) pool, will produce a lot of output; there is one line per slot, and we typically have over 10,000 slots. \nTIP: You can widen your terminal window, which may help you to see all details of the output better.\n\n\nHere is some example output (what you see will be longer):\n\n\nslot1_31@e437.chtc.wisc.edu        LINUX      X86_64 Unclaimed Idle      0.000 8053  0+01:14:34\n\n\nslot1_32@e437.chtc.wisc.edu        LINUX      X86_64 Unclaimed Idle      0.000 8053  0+03:57:00\n\n\nslot1_33@e437.chtc.wisc.edu        LINUX      X86_64 Unclaimed Idle      0.000 8053  1+00:05:17\n\n\nslot1@e438.chtc.wisc.edu           LINUX      X86_64 Owner     Idle      0.300  250  7+03:22:21\n\n\nslot1_1@e438.chtc.wisc.edu         LINUX      X86_64 Claimed   Busy      0.930 1024  0+02:42:08\n\n\nslot1_2@e438.chtc.wisc.edu         LINUX      X86_64 Claimed   Busy      3.530 1024  0+02:40:24\n\n\n\n\n\n\nThis output consists of 8 columns:\n\n\n\n\n\n\n\n\nCol\n\n\nExample\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\nName\n\n\nslot1_1@e438.chtc.wisc.edu\n\n\nFull slot name (including the hostname)\n\n\n\n\n\n\nOpSys\n\n\nLINUX\n\n\nOperating system\n\n\n\n\n\n\nArch\n\n\nX86_64\n\n\nSlot architecture (e.g., Intel 64 bit)\n\n\n\n\n\n\nState\n\n\nClaimed\n\n\nState of the slot (\nUnclaimed\n is available, \nOwner\n is being used by the machine owner, \nClaimed\n is matched to a job)\n\n\n\n\n\n\nActivity\n\n\nBusy\n\n\nIs there activity on the slot?\n\n\n\n\n\n\nLoadAv\n\n\n0.930\n\n\nLoad average, a measure of CPU activity on the slot\n\n\n\n\n\n\nMem\n\n\n1024\n\n\nMemory available to the slot, in MB\n\n\n\n\n\n\nActvtyTime\n\n\n0+02:42:08\n\n\nAmount of time spent in current activity (days + hours:minutes:seconds)\n\n\n\n\n\n\n\n\nAt the end of the slot listing, there is a summary. Here is an example:\n\n\n                     Machines Owner Claimed Unclaimed Matched Preempting  Drain\n\n\n\n        X86_64/LINUX    10831     0   10194       631       0          0      6\n\n\n      X86_64/WINDOWS        2     2       0         0       0          0      0\n\n\n\n               Total    10833     2   10194       631       0          0      6\n\n\n\n\n\n\nThere is one row of summary for each machine (i.e. \"slot\") architecture/operating system combination with columns for the number of slots in each state. The final row gives a summary of slot states for the whole pool.\n\n\nQuestions:\n\u00b6\n\n\n\n\nWhen you run \ncondor_status\n, how many 64-bit Linux slots are available? (Hint: Unclaimed = available.)\n\n\nWhat percent of the total slots are currently claimed by a job? (Note: there is a rapid turnover of slots, which is what allows users with new submission to have jobs start quickly.)\n\n\nHow have these numbers changed (if at all) when you run the command again?\n\n\n\n\nViewing Whole Machines, Only\n\u00b6\n\n\nAlso try out the \n-compact\n for a slightly different view of whole machines (i.e. server hostnames), without the individual slots shown.\n\n\nusername@learn $\n condor_status -compact\n\n\n\n\n\nHow has the column information changed?\n\n\nViewing Jobs\n\u00b6\n\n\nThe \ncondor_q\n command lists jobs that are on this submit machine and that are running or waiting to run. The \n_q\n part of the name is meant to suggest the word \u201cqueue\u201d, or list of job sets \nwaiting\n to finish.\n\n\nViewing Your Own Jobs\n\u00b6\n\n\nThe simplest form of the command lists only your jobs:\n\n\nusername@learn $\n condor_q\n\n\n\n\n\nThe main part of the output (which will be empty, because you haven't submitted jobs yet) shows one set (\"batch\") of submitted jobs per line. If you had a single job in the queue, it would look something like the below:\n\n\n-- Schedd: learn.chtc.wisc.edu : <128.104.100.43:9618?... @ 07/16/17 09:02:31\n\n\nOWNER  BATCH_NAME            SUBMITTED   DONE   RUN    IDLE  TOTAL JOB_IDS\n\n\naapohl CMD: run_ffmpeg.sh   7/17 09:58      _      _      1      1 18801.0               \n\n\n\n\n\n\nThis output consists of 8 (or 9) columns:\n\n\n\n\n\n\n\n\nCol\n\n\nExample\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\nOWNER\n\n\naapohl\n\n\nThe user ID of the user who submitted the job\n\n\n\n\n\n\nBATCH_NAME\n\n\nrun_ffmpeg.sh\n\n\nThe executable or \"jobbatchname\" specified within the submit file(s)\n\n\n\n\n\n\nSUBMITTED\n\n\n7/17 09:58\n\n\nThe date and time when the job was submitted\n\n\n\n\n\n\nDONE\n\n\n_\n\n\nNumber of jobs in this batch that have completed\n\n\n\n\n\n\nRUN\n\n\n_\n\n\nNumber of jobs in this batch that are currently running\n\n\n\n\n\n\nIDLE\n\n\n1\n\n\nNumber of jobs in this batch that are idle, waiting for a match\n\n\n\n\n\n\nHOLD\n\n\n_\n\n\nColumn will show up if there are jobs on \"hold\" because something about the submission/setup needs to be corrected by the user\n\n\n\n\n\n\nTOTAL\n\n\n1\n\n\nTotal number of jobs in this batch\n\n\n\n\n\n\nJOB_IDS\n\n\n18801.0\n\n\nJob ID or range of Job IDs in this batch\n\n\n\n\n\n\n\n\nAt the end of the job listing, there is a summary. Here is a sample:\n\n\n1 jobs; 0 completed, 0 removed, 1 idle, 0 running, 0 held, 0 suspended\n\n\n\n\n\n\nIt shows total counts of jobs in the different possible states.\n\n\nQuestions:\n\n\n\n\nFor the sample above, when was the job submitted?\n\n\nFor the sample above, was the job running or not yet? How can you tell?\n\n\n\n\nViewing Everyone\u2019s Jobs\n\u00b6\n\n\nBy default, the \ncondor_q\n command shows \nyour\n jobs only. To see everyone\u2019s jobs that are queued on the machine, add the \n-all\n option:\n\n\nusername@learn $\n condor_q -all\n\n\n\n\n\n\n\nHow many jobs are queued in total (i.e., running or waiting to run)?\n\n\nHow many jobs from this submit machine are running right now?\n\n\n\n\nViewing Jobs without the Default \"batch\" Mode\n\u00b6\n\n\nThe \ncondor_q\n output, by default, groups \"batches\" of jobs together (if they were submitted with the same submit file or \"jobbatchname\"). To see more information for EVERY job on a separate line of output, use the \n-nobatch\n option to \ncondor_q\n:\n\n\nusername@learn $\n condor_q -all -nobatch\n\n\n\n\n\nHow has the column information changed?\n (Below is an example of the top of the output.)\n\n\n-- Schedd: learn.chtc.wisc.edu : <128.104.100.43:9618?... @ 07/17/17 09:58:44\n\n\n ID       OWNER            SUBMITTED     RUN_TIME ST PRI SIZE   CMD\n\n\n18203.0   s16_alirezakho  7/27 09:51   0+00:00:00 I  0      0.7 pascal\n\n\n18204.0   s16_alirezakho  7/27 09:51   0+00:00:00 I  0      0.7 pascal\n\n\n18801.0   aapohl          7/28 16:58   0+00:00:00 I  0      0.0 run_ffmpeg.sh\n\n\n18997.0   s16_martincum   7/29 10:59   0+00:00:32 I  0    733.0 runR.pl 1_0 run_perm.R 1 0 10\n\n\n19027.5   s16_martincum   7/29 11:06   0+00:09:20 I  0   2198.0 runR.pl 1_5 run_perm.R 1 5 1000\n\n\n\n\n\n\nThe \n-nobatch\n output shows a line for every job and consists of 8 columns:\n\n\n\n\n\n\n\n\nCol\n\n\nExample\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\nID\n\n\n18801.0\n\n\nJob ID, which is the \ncluster\n, a dot character (\n.\n), and the \nprocess\n\n\n\n\n\n\nOWNER\n\n\naapohl\n\n\nThe user ID of the user who submitted the job\n\n\n\n\n\n\nSUBMITTED\n\n\n7/17 09:58\n\n\nThe date and time when the job was submitted\n\n\n\n\n\n\nRUN_TIME\n\n\n0+00:00:00\n\n\nTotal time spent running so far (days + hours:minutes:seconds)\n\n\n\n\n\n\nST\n\n\nI\n\n\nStatus of job: \nI\n is Idle (waiting to run), \nR\n is Running, \nH\n is Held, etc.\n\n\n\n\n\n\nPRI\n\n\n0\n\n\nJob priority (see next lecture)\n\n\n\n\n\n\nSIZE\n\n\n0.0\n\n\nCurrent run-time memory usage, in MB\n\n\n\n\n\n\nCMD\n\n\nrun_ffmpeg.sh\n\n\nThe executable command (with arguments) to be run\n\n\n\n\n\n\n\n\nIn future exercises, you'll want to switch between \ncondor_q\n and \ncondor_q -nobatch\n to see different types of information about YOUR jobs.\n\n\nExtra Information\n\u00b6\n\n\nBoth \ncondor_status\n and \ncondor_q\n have many command-line options, some of which significantly change their output. You will explore a few of the most useful options today and tomorrow, but if you want to experiment now, go ahead! There are a few ways to learn more about the commands:\n\n\n\n\nUse the (brief) built-in help for the commands, e.g.: \ncondor_q -h\n\n\nRead the installed man(ual) pages for the commands, e.g.: \nman condor_q\n\n\nFind the command in \nthe online manual\n; \nnote:\n the text online is the same as the \nman\n text, only formatted for the web",
            "title": "Exercise 1.2"
        },
        {
            "location": "/materials/day1/part1-ex2-commands/#monday-exercise-12-experiment-with-basic-htcondor-commands",
            "text": "The goal of this exercise is to use the basic informational HTCondor commands,  condor_q  and  condor_status . They will be useful for monitoring your jobs and available slots (respectively) throughout the week.  This exercise should take only a few minutes.",
            "title": "Monday Exercise 1.2: Experiment With Basic HTCondor Commands"
        },
        {
            "location": "/materials/day1/part1-ex2-commands/#viewing-slots",
            "text": "As discussed in the lecture, the  condor_status  command is used to view the current state of slots in an HTCondor pool.  At its most basic, the command is very simple:  username@learn $  condor_status  This command, running on our (CHTC) pool, will produce a lot of output; there is one line per slot, and we typically have over 10,000 slots.  TIP: You can widen your terminal window, which may help you to see all details of the output better.  Here is some example output (what you see will be longer):  slot1_31@e437.chtc.wisc.edu        LINUX      X86_64 Unclaimed Idle      0.000 8053  0+01:14:34  slot1_32@e437.chtc.wisc.edu        LINUX      X86_64 Unclaimed Idle      0.000 8053  0+03:57:00  slot1_33@e437.chtc.wisc.edu        LINUX      X86_64 Unclaimed Idle      0.000 8053  1+00:05:17  slot1@e438.chtc.wisc.edu           LINUX      X86_64 Owner     Idle      0.300  250  7+03:22:21  slot1_1@e438.chtc.wisc.edu         LINUX      X86_64 Claimed   Busy      0.930 1024  0+02:42:08  slot1_2@e438.chtc.wisc.edu         LINUX      X86_64 Claimed   Busy      3.530 1024  0+02:40:24   This output consists of 8 columns:     Col  Example  Meaning      Name  slot1_1@e438.chtc.wisc.edu  Full slot name (including the hostname)    OpSys  LINUX  Operating system    Arch  X86_64  Slot architecture (e.g., Intel 64 bit)    State  Claimed  State of the slot ( Unclaimed  is available,  Owner  is being used by the machine owner,  Claimed  is matched to a job)    Activity  Busy  Is there activity on the slot?    LoadAv  0.930  Load average, a measure of CPU activity on the slot    Mem  1024  Memory available to the slot, in MB    ActvtyTime  0+02:42:08  Amount of time spent in current activity (days + hours:minutes:seconds)     At the end of the slot listing, there is a summary. Here is an example:                       Machines Owner Claimed Unclaimed Matched Preempting  Drain          X86_64/LINUX    10831     0   10194       631       0          0      6        X86_64/WINDOWS        2     2       0         0       0          0      0                 Total    10833     2   10194       631       0          0      6   There is one row of summary for each machine (i.e. \"slot\") architecture/operating system combination with columns for the number of slots in each state. The final row gives a summary of slot states for the whole pool.",
            "title": "Viewing Slots"
        },
        {
            "location": "/materials/day1/part1-ex2-commands/#questions",
            "text": "When you run  condor_status , how many 64-bit Linux slots are available? (Hint: Unclaimed = available.)  What percent of the total slots are currently claimed by a job? (Note: there is a rapid turnover of slots, which is what allows users with new submission to have jobs start quickly.)  How have these numbers changed (if at all) when you run the command again?",
            "title": "Questions:"
        },
        {
            "location": "/materials/day1/part1-ex2-commands/#viewing-whole-machines-only",
            "text": "Also try out the  -compact  for a slightly different view of whole machines (i.e. server hostnames), without the individual slots shown.  username@learn $  condor_status -compact  How has the column information changed?",
            "title": "Viewing Whole Machines, Only"
        },
        {
            "location": "/materials/day1/part1-ex2-commands/#viewing-jobs",
            "text": "The  condor_q  command lists jobs that are on this submit machine and that are running or waiting to run. The  _q  part of the name is meant to suggest the word \u201cqueue\u201d, or list of job sets  waiting  to finish.",
            "title": "Viewing Jobs"
        },
        {
            "location": "/materials/day1/part1-ex2-commands/#viewing-your-own-jobs",
            "text": "The simplest form of the command lists only your jobs:  username@learn $  condor_q  The main part of the output (which will be empty, because you haven't submitted jobs yet) shows one set (\"batch\") of submitted jobs per line. If you had a single job in the queue, it would look something like the below:  -- Schedd: learn.chtc.wisc.edu : <128.104.100.43:9618?... @ 07/16/17 09:02:31  OWNER  BATCH_NAME            SUBMITTED   DONE   RUN    IDLE  TOTAL JOB_IDS  aapohl CMD: run_ffmpeg.sh   7/17 09:58      _      _      1      1 18801.0                  This output consists of 8 (or 9) columns:     Col  Example  Meaning      OWNER  aapohl  The user ID of the user who submitted the job    BATCH_NAME  run_ffmpeg.sh  The executable or \"jobbatchname\" specified within the submit file(s)    SUBMITTED  7/17 09:58  The date and time when the job was submitted    DONE  _  Number of jobs in this batch that have completed    RUN  _  Number of jobs in this batch that are currently running    IDLE  1  Number of jobs in this batch that are idle, waiting for a match    HOLD  _  Column will show up if there are jobs on \"hold\" because something about the submission/setup needs to be corrected by the user    TOTAL  1  Total number of jobs in this batch    JOB_IDS  18801.0  Job ID or range of Job IDs in this batch     At the end of the job listing, there is a summary. Here is a sample:  1 jobs; 0 completed, 0 removed, 1 idle, 0 running, 0 held, 0 suspended   It shows total counts of jobs in the different possible states.  Questions:   For the sample above, when was the job submitted?  For the sample above, was the job running or not yet? How can you tell?",
            "title": "Viewing Your Own Jobs"
        },
        {
            "location": "/materials/day1/part1-ex2-commands/#viewing-everyones-jobs",
            "text": "By default, the  condor_q  command shows  your  jobs only. To see everyone\u2019s jobs that are queued on the machine, add the  -all  option:  username@learn $  condor_q -all   How many jobs are queued in total (i.e., running or waiting to run)?  How many jobs from this submit machine are running right now?",
            "title": "Viewing Everyone\u2019s Jobs"
        },
        {
            "location": "/materials/day1/part1-ex2-commands/#viewing-jobs-without-the-default-batch-mode",
            "text": "The  condor_q  output, by default, groups \"batches\" of jobs together (if they were submitted with the same submit file or \"jobbatchname\"). To see more information for EVERY job on a separate line of output, use the  -nobatch  option to  condor_q :  username@learn $  condor_q -all -nobatch  How has the column information changed?  (Below is an example of the top of the output.)  -- Schedd: learn.chtc.wisc.edu : <128.104.100.43:9618?... @ 07/17/17 09:58:44   ID       OWNER            SUBMITTED     RUN_TIME ST PRI SIZE   CMD  18203.0   s16_alirezakho  7/27 09:51   0+00:00:00 I  0      0.7 pascal  18204.0   s16_alirezakho  7/27 09:51   0+00:00:00 I  0      0.7 pascal  18801.0   aapohl          7/28 16:58   0+00:00:00 I  0      0.0 run_ffmpeg.sh  18997.0   s16_martincum   7/29 10:59   0+00:00:32 I  0    733.0 runR.pl 1_0 run_perm.R 1 0 10  19027.5   s16_martincum   7/29 11:06   0+00:09:20 I  0   2198.0 runR.pl 1_5 run_perm.R 1 5 1000   The  -nobatch  output shows a line for every job and consists of 8 columns:     Col  Example  Meaning      ID  18801.0  Job ID, which is the  cluster , a dot character ( . ), and the  process    OWNER  aapohl  The user ID of the user who submitted the job    SUBMITTED  7/17 09:58  The date and time when the job was submitted    RUN_TIME  0+00:00:00  Total time spent running so far (days + hours:minutes:seconds)    ST  I  Status of job:  I  is Idle (waiting to run),  R  is Running,  H  is Held, etc.    PRI  0  Job priority (see next lecture)    SIZE  0.0  Current run-time memory usage, in MB    CMD  run_ffmpeg.sh  The executable command (with arguments) to be run     In future exercises, you'll want to switch between  condor_q  and  condor_q -nobatch  to see different types of information about YOUR jobs.",
            "title": "Viewing Jobs without the Default \"batch\" Mode"
        },
        {
            "location": "/materials/day1/part1-ex2-commands/#extra-information",
            "text": "Both  condor_status  and  condor_q  have many command-line options, some of which significantly change their output. You will explore a few of the most useful options today and tomorrow, but if you want to experiment now, go ahead! There are a few ways to learn more about the commands:   Use the (brief) built-in help for the commands, e.g.:  condor_q -h  Read the installed man(ual) pages for the commands, e.g.:  man condor_q  Find the command in  the online manual ;  note:  the text online is the same as the  man  text, only formatted for the web",
            "title": "Extra Information"
        },
        {
            "location": "/materials/day1/part1-ex3-jobs/",
            "text": "pre em { font-style: normal; background-color: yellow; } pre strong { font-style: normal; font-weight: bold; color: \\#008; } \n\n\n\nMonday Exercise 1.3: Run Jobs!\n\u00b6\n\n\nThe goal of this exercise is to submit jobs to HTCondor and have them run on the local pool (CHTC). This is a huge step in learning to use an HTC system!\n\n\nThis exercise will take longer than the first two, short ones. It is the essential part of this exercise time. If you are having any problems getting the jobs to run, please ask the instructors! It is very important that you know how to run simple jobs.\n\n\nRunning a Simple Job\n\u00b6\n\n\nNearly all of the time, when you want to run an HTCondor job, you first write an HTCondor submit file for it. In this section, you will run the same \nhostname\n command as in the last exercise, but where this command will run within a job on one of the 'execute' servers in CHTC's local HTCondor pool.\n\n\nHere is a simple submit file for the \nhostname\n command:\n\n\nexecutable\n \n=\n \n/\nbin\n/\nhostname\n\n\n\noutput\n \n=\n \nsimple\n.\nout\n\n\nerror\n \n=\n \nsimple\n.\nerr\n\n\nlog\n \n=\n \nsimple\n.\nlog\n\n\n\nrequest_cpus\n \n=\n \n1\n\n\nrequest_memory\n \n=\n \n1\nMB\n\n\nrequest_disk\n \n=\n \n1\nMB\n\n\n\nqueue\n\n\n\n\n\n\nWrite those lines of text in a file named \nsimple.sub\n.\n\n\n\n\nNote\n\n\nThere is nothing magic about the name of an HTCondor submit file.\nIt can be any filename you want.\nIt's a good practice to always include the \n.sub\n extension, but it is not required.\nUltimately, a submit file is a text file\n\n\n\n\nThe lines of the submit file have the following meanings:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexecutable\n\n\nThe name of the program to run (relative to the directory from which you submit).\n\n\n\n\n\n\noutput\n\n\nThe filename where HTCondor will write the standard output from your job.\n\n\n\n\n\n\nerror\n\n\nThe filename where HTCondor will write the standard error from your job. This particular job is not likely to have any, but it is best to include this line for every job.\n\n\n\n\n\n\nlog\n\n\nThe filename where HTCondor will write information about your job run. Technically not required, it is a \nreally\n good idea to have a log file for every job.\n\n\n\n\n\n\nrequest_*\n\n\nTells HTCondor how many \ncpus\n and how much \nmemory\n and \ndisk\n we want, which is not much, because the 'hostname' executable is pretty simple\n\n\n\n\n\n\nqueue\n\n\nTells HTCondor to run your job with the settings above.\n\n\n\n\n\n\n\n\nNote that we are not using the \narguments\n lines or \ntransfer_input_files\n because the \nhostname\n program is all that needs to be transferred from the submit server, and we want to run it without any additional options.\n\n\nDouble-check your submit file, so that it matches the text above. Then, tell HTCondor to run your job:\n\n\nusername@learn $\n condor_submit simple.sub\n\nSubmitting job(s).\n\n\n1 job(s) submitted to cluster NNNN.\n\n\n\n\n\n\nThe actual cluster number will be shown instead of \nNNNN\n. \nIf, instead of the text above, there are error messages, read them carefully and then try to correct your submit file or ask for help.\n\n\nNotice that \ncondor_submit\n returns back to the shell prompt right away. It does \nnot\n wait for your job to run. Instead, as soon as it has finished submitting your job into the queue, the submit command finishes.\n\n\nView your job in the queue\n\u00b6\n\n\nNow, use \ncondor_q\n and \ncondor_q -nobatch\n to watch for your job in the queue! \n\n\nYou may not even catch the job in the \nR\n running state, because the \nhostname\n command runs very quickly. When the job itself is finished, it will 'leave' the queue and no longer be listed in the \ncondor_q\n output.\n\n\nAfter the job finishes, check for the \nhostname\n output in \nsimple.out\n, which is where job information printed to the terminal screen will be printed for the job.\n\n\nusername@learn $\n cat simple.out\n\ne171.chtc.wisc.edu\n\n\n\n\n\n\nThe \nsimple.err\n file should be empty, unless there were issues running the \nhostname\n executable after it was transferred to the slot. The \nsimple.log\n is more complex and will be the focus of a later exercise.\n\n\nRunning a Job With Arguments\n\u00b6\n\n\nVery often, when you run a command on the command line, it includes arguments (i.e. options) after the program name, as in the below examples:\n\n\nusername@learn $\n cat simple.out\n\nusername@learn $\n sleep \n60\n\n\nusername@learn $\n dc -e \n'6 7 * p'\n\n\n\n\n\n\nIn an HTCondor submit file, the program (or 'executable') name goes in the \nexecutable\n statement and \nall remaining arguments\n go into an \narguments\n statement. For example, if the full command is:\n\n\nusername@learn $\n sleep \n60\n\n\n\n\n\n\nThen in the submit file, we would put the location of the \"sleep\" program (you can find it with \nwhich sleep\n) as the job \nexecutable\n, and \n60\n as the job \narguments\n:\n\n\nexecutable\n \n=\n \n/\nbin\n/\nsleep\n\n\narguments\n \n=\n \n60\n\n\n\n\n\n\nFor the command-line command:\n\n\nusername@learn $\n dc -e \n'6 7 * p'\n\n\n\n\n\n\nWe would put the following into the submit file, putting the \narguments\n statement in quotes, since it contains single quotes:\n\n\nexecutable\n \n=\n \n/\nusr\n/\nbin\n/\ndc\n\n\narguments\n \n=\n \n\"-e '6 7 * p'\"\n\n\n\n\n\n\nLet\u2019s try a job submission with arguments. We will use the \nsleep\n command shown above, which simply does nothing for the specified number of seconds, then exits normally. It is convenient for simulating a job that takes a while to run.\n\n\nCreate a new submit file (you name it this time) and save the following text in it.\n\n\nexecutable\n \n=\n \n/\nbin\n/\nsleep\n\n\narguments\n \n=\n \n60\n\n\n\noutput\n \n=\n \nsleep\n.\nout\n\n\nerror\n \n=\n \nsleep\n.\nerr\n\n\nlog\n \n=\n \nsleep\n.\nlog\n\n\n\nrequest_cpus\n \n=\n \n1\n\n\nrequest_memory\n \n=\n \n1\nMB\n\n\nrequest_disk\n \n=\n \n1\nMB\n\n\n\nqueue\n\n\n\n\n\n\nExcept for changing a few filenames, this submit file is nearly identical to the last one. But, see the extra \narguments\n line?\n\n\nSubmit this new job. Again, watch for it to run using \ncondor_q\n and \ncondor_q -nobatch\n; \ncheck once every 15 seconds or so. \nOnce the job starts running, it will take about 1 minute to run (because of the \nsleep\n command, right?), \nso you should be able to see it running for a bit. \nWhen the job finishes, it will disappear from the queue, but there will be no output in the output or error files, because \nsleep\n does not produce any output.\n\n\nRunning a Script Job From the Submit Directory\n\u00b6\n\n\nSo far, we have been running programs (executables) that come with the standard Linux system. \nMore frequently, you will want to run a program that exists within your directory \nor perhaps a simple shell script of commands that you'd like to run within a job. In this example, you will write a shell script and a submit file that runs the shell script within a job:\n\n\n\n\n\n\nPut the following contents into a file named \ntest-script.sh\n:\n\n\n#!/bin/sh\n\n\necho\n \n'Date: '\n \n`\ndate\n`\n \n\necho\n \n'Host: '\n \n`\nhostname\n`\n \n\necho\n \n'System: '\n \n`\nuname -spo\n`\n \n\necho\n \n\"Program: \n$0\n\"\n \n\necho\n \n\"Args: \n$*\n\"\n\n\necho\n \n'ls: '\n \n`\nls\n`\n\n\n# END\n\n\n\n\n\n\n\n\n\n\nAdd executable permissions to the file (so that it can be run as a program):\n\n\nusername@learn $\n chmod +x test-script.sh\n\n\n\n\n\n\n\n\n\nTest your script from the command line:\n\n\nusername@learn $\n ./test-script.sh hello \n42\n \n\nDate: Mon Jul 17 10:02:20 CDT 2017 \n\n\nHost: learn.chtc.wisc.edu \n\n\nSystem: Linux x86_64 GNU/Linux \n\n\nProgram: ./test-script.sh\n\n\nArgs: hello 42\n\n\nls: hostname.sub montage simple.err simple.log simple.out test-script.sh\n\n\n\n\n\n\nThis step is \nreally\n important! If you cannot run your executable from the command-line, HTCondor probably cannot run it on another machine, either. And debugging simple problems like this one is surprisingly difficult. So, if possible, test your \nexecutable\n and \narguments\n as a command at the command-line first.\n\n\n\n\n\n\nWrite the submit file (this should be getting easier by now):\n\n\nexecutable\n \n=\n \n%\nRED\n%\ntest\n-\nscript\n.\nsh\n%\nENDCOLOR\n%\n\n\narguments\n \n=\n \nfoo\n \nbar\n \nbaz\n\n\n\noutput\n \n=\n \nscript\n.\nout\n\n\nerror\n \n=\n \nscript\n.\nerr\n\n\nlog\n \n=\n \nscript\n.\nlog\n\n\n\nrequest_cpus\n \n=\n \n1\n\n\nrequest_memory\n \n=\n \n1\n\n\nrequest_disk\n \n=\n \n1\n\n\n\nqueue\n\n\n\n\n\n\nIn this example, the \nexecutable\n that was named in the submit file did \nnot\n start with a \n/\n, \n    so the location of the file is relative to the submit directory itself. \n    In other words, in this format the executable must be in the same directory as the submit file.\n\n\n\n\nNote\n\n\nAs this example shows, blank lines and spaces around the = sign do not matter to HTCondor.\nUse whitespace to make things clear to \nyou\n. What format do you prefer to read?\n\n\n\n\n\n\n\n\nSubmit the job, wait for it to finish, and check the output (and error, which should be empty).\n\n\nWhat do you notice about the lines returned for \"Program\" and \"ls\"? Remember that only files pertaining\nto \nthis\n job will be in the job working directory on the execute server. You're also seeing the effects\nof HTCondor's need to standardize some filenames when running your job, though they are named as you expect \nin the submission directory (per the submit file contents).\n\n\n\n\n\n\nExtra Challenge\n\u00b6\n\n\n\n\nNote\n\n\nThere are Extra Challenges throughout the school curriculum. You may be better off coming back to these after you've completed all other exercises for your current working session.\n\n\n\n\nBelow is a simple Python script that does something similar to the shell script above. Run this Python script using HTCondor.\n\n\n#!/usr/bin/env python\n\n\n\n\"\"\"Extra Challenge for OSG User School\n\n\nWritten by Tim Cartwright\n\n\nSubmitted to CHTC by #YOUR_NAME#\n\n\n\"\"\"\n\n\n\nimport\n \ngetpass\n\n\nimport\n \nos\n\n\nimport\n \nplatform\n\n\nimport\n \nsocket\n\n\nimport\n \nsys\n\n\nimport\n \ntime\n\n\n\narguments\n \n=\n \nNone\n\n\nif\n \nlen\n(\nsys\n.\nargv\n)\n \n>\n \n1\n:\n\n    \narguments\n \n=\n \n'\"'\n \n+\n \n' '\n.\njoin\n(\nsys\n.\nargv\n[\n1\n:])\n \n+\n \n'\"'\n\n\n\nprint\n \n>>\n \nsys\n.\nstderr\n,\n \n__doc__\n\n\nprint\n \n'Time    :'\n,\n \ntime\n.\nstrftime\n(\n'%Y-%m-\n%d\n (%a) %H:%M:%S %Z'\n)\n\n\nprint\n \n'Host    :'\n,\n \ngetpass\n.\ngetuser\n(),\n \n'@'\n,\n \nsocket\n.\ngethostname\n()\n\n\nuname\n \n=\n \nplatform\n.\nuname\n()\n\n\nprint\n \n\"System  :\"\n,\n \nuname\n[\n0\n],\n \nuname\n[\n2\n],\n \nuname\n[\n4\n]\n\n\nprint\n \n\"Version :\"\n,\n \nplatform\n.\npython_version\n()\n\n\nprint\n \n\"Program :\"\n,\n \nsys\n.\nexecutable\n\n\nprint\n \n'Script  :'\n,\n \nos\n.\npath\n.\nabspath\n(\n__file__\n)\n\n\nprint\n \n'Args    :'\n,\n \narguments\n\n\n\n\n\n\n\n\nNote\n\n\nFor the Python script, above, you'll want to increase the memory request to at least 64MB.\nWe will talk about tuning resource requests, later.",
            "title": "Exercise 1.3"
        },
        {
            "location": "/materials/day1/part1-ex3-jobs/#monday-exercise-13-run-jobs",
            "text": "The goal of this exercise is to submit jobs to HTCondor and have them run on the local pool (CHTC). This is a huge step in learning to use an HTC system!  This exercise will take longer than the first two, short ones. It is the essential part of this exercise time. If you are having any problems getting the jobs to run, please ask the instructors! It is very important that you know how to run simple jobs.",
            "title": "Monday Exercise 1.3: Run Jobs!"
        },
        {
            "location": "/materials/day1/part1-ex3-jobs/#running-a-simple-job",
            "text": "Nearly all of the time, when you want to run an HTCondor job, you first write an HTCondor submit file for it. In this section, you will run the same  hostname  command as in the last exercise, but where this command will run within a job on one of the 'execute' servers in CHTC's local HTCondor pool.  Here is a simple submit file for the  hostname  command:  executable   =   / bin / hostname  output   =   simple . out  error   =   simple . err  log   =   simple . log  request_cpus   =   1  request_memory   =   1 MB  request_disk   =   1 MB  queue   Write those lines of text in a file named  simple.sub .   Note  There is nothing magic about the name of an HTCondor submit file.\nIt can be any filename you want.\nIt's a good practice to always include the  .sub  extension, but it is not required.\nUltimately, a submit file is a text file   The lines of the submit file have the following meanings:           executable  The name of the program to run (relative to the directory from which you submit).    output  The filename where HTCondor will write the standard output from your job.    error  The filename where HTCondor will write the standard error from your job. This particular job is not likely to have any, but it is best to include this line for every job.    log  The filename where HTCondor will write information about your job run. Technically not required, it is a  really  good idea to have a log file for every job.    request_*  Tells HTCondor how many  cpus  and how much  memory  and  disk  we want, which is not much, because the 'hostname' executable is pretty simple    queue  Tells HTCondor to run your job with the settings above.     Note that we are not using the  arguments  lines or  transfer_input_files  because the  hostname  program is all that needs to be transferred from the submit server, and we want to run it without any additional options.  Double-check your submit file, so that it matches the text above. Then, tell HTCondor to run your job:  username@learn $  condor_submit simple.sub Submitting job(s).  1 job(s) submitted to cluster NNNN.   The actual cluster number will be shown instead of  NNNN .  If, instead of the text above, there are error messages, read them carefully and then try to correct your submit file or ask for help.  Notice that  condor_submit  returns back to the shell prompt right away. It does  not  wait for your job to run. Instead, as soon as it has finished submitting your job into the queue, the submit command finishes.",
            "title": "Running a Simple Job"
        },
        {
            "location": "/materials/day1/part1-ex3-jobs/#view-your-job-in-the-queue",
            "text": "Now, use  condor_q  and  condor_q -nobatch  to watch for your job in the queue!   You may not even catch the job in the  R  running state, because the  hostname  command runs very quickly. When the job itself is finished, it will 'leave' the queue and no longer be listed in the  condor_q  output.  After the job finishes, check for the  hostname  output in  simple.out , which is where job information printed to the terminal screen will be printed for the job.  username@learn $  cat simple.out e171.chtc.wisc.edu   The  simple.err  file should be empty, unless there were issues running the  hostname  executable after it was transferred to the slot. The  simple.log  is more complex and will be the focus of a later exercise.",
            "title": "View your job in the queue"
        },
        {
            "location": "/materials/day1/part1-ex3-jobs/#running-a-job-with-arguments",
            "text": "Very often, when you run a command on the command line, it includes arguments (i.e. options) after the program name, as in the below examples:  username@learn $  cat simple.out username@learn $  sleep  60  username@learn $  dc -e  '6 7 * p'   In an HTCondor submit file, the program (or 'executable') name goes in the  executable  statement and  all remaining arguments  go into an  arguments  statement. For example, if the full command is:  username@learn $  sleep  60   Then in the submit file, we would put the location of the \"sleep\" program (you can find it with  which sleep ) as the job  executable , and  60  as the job  arguments :  executable   =   / bin / sleep  arguments   =   60   For the command-line command:  username@learn $  dc -e  '6 7 * p'   We would put the following into the submit file, putting the  arguments  statement in quotes, since it contains single quotes:  executable   =   / usr / bin / dc  arguments   =   \"-e '6 7 * p'\"   Let\u2019s try a job submission with arguments. We will use the  sleep  command shown above, which simply does nothing for the specified number of seconds, then exits normally. It is convenient for simulating a job that takes a while to run.  Create a new submit file (you name it this time) and save the following text in it.  executable   =   / bin / sleep  arguments   =   60  output   =   sleep . out  error   =   sleep . err  log   =   sleep . log  request_cpus   =   1  request_memory   =   1 MB  request_disk   =   1 MB  queue   Except for changing a few filenames, this submit file is nearly identical to the last one. But, see the extra  arguments  line?  Submit this new job. Again, watch for it to run using  condor_q  and  condor_q -nobatch ; \ncheck once every 15 seconds or so. \nOnce the job starts running, it will take about 1 minute to run (because of the  sleep  command, right?), \nso you should be able to see it running for a bit. \nWhen the job finishes, it will disappear from the queue, but there will be no output in the output or error files, because  sleep  does not produce any output.",
            "title": "Running a Job With Arguments"
        },
        {
            "location": "/materials/day1/part1-ex3-jobs/#running-a-script-job-from-the-submit-directory",
            "text": "So far, we have been running programs (executables) that come with the standard Linux system. \nMore frequently, you will want to run a program that exists within your directory \nor perhaps a simple shell script of commands that you'd like to run within a job. In this example, you will write a shell script and a submit file that runs the shell script within a job:    Put the following contents into a file named  test-script.sh :  #!/bin/sh  echo   'Date: '   ` date `   echo   'Host: '   ` hostname `   echo   'System: '   ` uname -spo `   echo   \"Program:  $0 \"   echo   \"Args:  $* \"  echo   'ls: '   ` ls `  # END     Add executable permissions to the file (so that it can be run as a program):  username@learn $  chmod +x test-script.sh    Test your script from the command line:  username@learn $  ./test-script.sh hello  42   Date: Mon Jul 17 10:02:20 CDT 2017   Host: learn.chtc.wisc.edu   System: Linux x86_64 GNU/Linux   Program: ./test-script.sh  Args: hello 42  ls: hostname.sub montage simple.err simple.log simple.out test-script.sh   This step is  really  important! If you cannot run your executable from the command-line, HTCondor probably cannot run it on another machine, either. And debugging simple problems like this one is surprisingly difficult. So, if possible, test your  executable  and  arguments  as a command at the command-line first.    Write the submit file (this should be getting easier by now):  executable   =   % RED % test - script . sh % ENDCOLOR %  arguments   =   foo   bar   baz  output   =   script . out  error   =   script . err  log   =   script . log  request_cpus   =   1  request_memory   =   1  request_disk   =   1  queue   In this example, the  executable  that was named in the submit file did  not  start with a  / , \n    so the location of the file is relative to the submit directory itself. \n    In other words, in this format the executable must be in the same directory as the submit file.   Note  As this example shows, blank lines and spaces around the = sign do not matter to HTCondor.\nUse whitespace to make things clear to  you . What format do you prefer to read?     Submit the job, wait for it to finish, and check the output (and error, which should be empty).  What do you notice about the lines returned for \"Program\" and \"ls\"? Remember that only files pertaining\nto  this  job will be in the job working directory on the execute server. You're also seeing the effects\nof HTCondor's need to standardize some filenames when running your job, though they are named as you expect \nin the submission directory (per the submit file contents).",
            "title": "Running a Script Job From the Submit Directory"
        },
        {
            "location": "/materials/day1/part1-ex3-jobs/#extra-challenge",
            "text": "Note  There are Extra Challenges throughout the school curriculum. You may be better off coming back to these after you've completed all other exercises for your current working session.   Below is a simple Python script that does something similar to the shell script above. Run this Python script using HTCondor.  #!/usr/bin/env python  \"\"\"Extra Challenge for OSG User School  Written by Tim Cartwright  Submitted to CHTC by #YOUR_NAME#  \"\"\"  import   getpass  import   os  import   platform  import   socket  import   sys  import   time  arguments   =   None  if   len ( sys . argv )   >   1 : \n     arguments   =   '\"'   +   ' ' . join ( sys . argv [ 1 :])   +   '\"'  print   >>   sys . stderr ,   __doc__  print   'Time    :' ,   time . strftime ( '%Y-%m- %d  (%a) %H:%M:%S %Z' )  print   'Host    :' ,   getpass . getuser (),   '@' ,   socket . gethostname ()  uname   =   platform . uname ()  print   \"System  :\" ,   uname [ 0 ],   uname [ 2 ],   uname [ 4 ]  print   \"Version :\" ,   platform . python_version ()  print   \"Program :\" ,   sys . executable  print   'Script  :' ,   os . path . abspath ( __file__ )  print   'Args    :' ,   arguments    Note  For the Python script, above, you'll want to increase the memory request to at least 64MB.\nWe will talk about tuning resource requests, later.",
            "title": "Extra Challenge"
        },
        {
            "location": "/materials/day1/part1-ex4-logs/",
            "text": "pre em { font-style: normal; background-color: yellow; } pre strong { font-style: normal; font-weight: bold; color: \\#008; } \n\n\n\nMonday Exercise 1.4: Read and Interpret Log Files\n\u00b6\n\n\nThe goal of this exercise is quite simple: \nLearn to understand the contents of a job log file, which is where HTCondor describes the steps \ntaken to run your job.\nWhen things go wrong with your job, the log is the best place to look for first pointers (in addition to the .err file).\n\n\nThis exercise is short, but you'll want to at least read over it before moving on (and come back later, if you can't run through it now).\n\n\nReading a Log File\n\u00b6\n\n\nFor this exercise, we can examine a log file for any previous job that you have run. The example output below is based on the \nsleep 60\n job.\n\n\nA job log file is updated throughout the life of a job, usually at key events. Each event starts with a heading that indicates what happened and when. Here are \nall\n of the event headings from the \nsleep\n job log (detailed output in between headings has been omitted here):\n\n\n000\n \n(\n5739\n.\n000\n.\n000\n)\n \n07\n/\n25\n \n10\n:\n44\n:\n20\n \nJob\n \nsubmitted\n \nfrom\n \nhost\n:\n \n<\n128\n.\n104\n.\n100\n.\n43\n:\n9618\n?\naddrs\n=\n...\n>\n\n\n001\n \n(\n5739\n.\n000\n.\n000\n)\n \n07\n/\n25\n \n10\n:\n45\n:\n11\n \nJob\n \nexecuting\n \non\n \nhost\n:\n \n<\n128\n.\n104\n.\n55\n.\n42\n:\n9618\n?\naddrs\n=\n...\n>\n\n\n006\n \n(\n5739\n.\n000\n.\n000\n)\n \n07\n/\n25\n \n10\n:\n45\n:\n20\n \nImage\n \nsize\n \nof\n \njob\n \nupdated\n:\n \n72\n\n\n006\n \n(\n5739\n.\n000\n.\n000\n)\n \n07\n/\n25\n \n10\n:\n46\n:\n11\n \nImage\n \nsize\n \nof\n \njob\n \nupdated\n:\n \n4072\n\n\n005\n \n(\n5739\n.\n000\n.\n000\n)\n \n07\n/\n25\n \n10\n:\n46\n:\n11\n \nJob\n \nterminated\n.\n\n\n\n\n\n\nThere is a lot of extra information in those lines, but you can see:\n\n\n\n\nThe job ID: cluster 5739, process 0 (written \n000\n)\n\n\nThe date and local time of each event\n\n\nA brief description of the event: submission, execution, some information updates, and termination\n\n\n\n\nSome events provide no information in addition to the heading. For example:\n\n\n000\n \n(\n5739\n.\n000\n.\n000\n)\n \n07\n/\n25\n \n10\n:\n44\n:\n20\n \nJob\n \nsubmitted\n \nfrom\n \nhost\n:\n \n<\n128\n.\n104\n.\n100\n.\n43\n:\n9618\n?\naddrs\n=\n...\n>\n\n\n...\n\n\n\n\n\n\nand\n\n\n001\n \n(\n5739\n.\n000\n.\n000\n)\n \n07\n/\n25\n \n10\n:\n45\n:\n11\n \nJob\n \nexecuting\n \non\n \nhost\n:\n \n<\n128\n.\n104\n.\n55\n.\n42\n:\n9618\n?\naddrs\n=\n...\n>\n\n\n...\n\n\n\n\n\n\n\n\nNote\n\n\nEach event ends with a line that contains only 3 dots: \n...\n\n\n\n\nBut the periodic information update event contains some additional information:\n\n\n006\n \n(\n5739\n.\n000\n.\n000\n)\n \n07\n/\n25\n \n10\n:\n45\n:\n20\n \nImage\n \nsize\n \nof\n \njob\n \nupdated\n:\n \n72\n\n    \n1\n  \n-\n  \nMemoryUsage\n \nof\n \njob\n \n(\nMB\n)\n\n    \n72\n  \n-\n  \nResidentSetSize\n \nof\n \njob\n \n(\nKB\n)\n\n\n...\n\n\n\n\n\n\nThese updates record the amount of memory that the job is using on the execute machine. This can be helpful information, so that in future runs of the job, you can tell HTCondor how much memory you will need.\n\n\nThe job termination event includes a great deal of additional information:\n\n\n005\n \n(\n5739\n.\n000\n.\n000\n)\n \n07\n/\n25\n \n10\n:\n46\n:\n11\n \nJob\n \nterminated\n.\n    \n(\n1\n)\n \nNormal\n \ntermination\n \n(\nreturn\n \nvalue\n \n0\n)\n\n        \nUsr\n \n0\n \n00\n:\n00\n:\n00\n, \nSys\n \n0\n \n00\n:\n00\n:\n00\n  \n-\n  \nRun\n \nRemote\n \nUsage\n\n        \nUsr\n \n0\n \n00\n:\n00\n:\n00\n, \nSys\n \n0\n \n00\n:\n00\n:\n00\n  \n-\n  \nRun\n \nLocal\n \nUsage\n\n        \nUsr\n \n0\n \n00\n:\n00\n:\n00\n, \nSys\n \n0\n \n00\n:\n00\n:\n00\n  \n-\n  \nTotal\n \nRemote\n \nUsage\n\n        \nUsr\n \n0\n \n00\n:\n00\n:\n00\n, \nSys\n \n0\n \n00\n:\n00\n:\n00\n  \n-\n  \nTotal\n \nLocal\n \nUsage\n\n    \n0\n  \n-\n  \nRun\n \nBytes\n \nSent\n \nBy\n \nJob\n\n    \n27848\n  \n-\n  \nRun\n \nBytes\n \nReceived\n \nBy\n \nJob\n\n    \n0\n  \n-\n  \nTotal\n \nBytes\n \nSent\n \nBy\n \nJob\n\n    \n27848\n  \n-\n  \nTotal\n \nBytes\n \nReceived\n \nBy\n \nJob\n\n    \nPartitionable\n \nResources\n :    \nUsage\n  \nRequest\n \nAllocated\n\n       \nCpus\n                 :                 \n1\n         \n1\n\n       \nDisk\n \n(\nKB\n)\n            :       \n40\n       \n30\n   \n4203309\n\n       \nMemory\n \n(\nMB\n)\n          :        \n1\n        \n1\n         \n1\n\n...\n\n\n\n\n\nProbably the most interesting information is:\n\n\n\n\nThe \nreturn value\n (\n0\n here, means the executable completed and didn't indicate any internal errors; non-zero usually means failure)\n\n\nThe total number of bytes transferred each way, which could be useful if your network is slow\n\n\nThe \nPartitionable Resources\n table, especially disk and memory usage, which will inform larger submissions.\n\n\n\n\nThere are many other kinds of events, but the ones above will occur in almost every job log.\n\n\nUnderstanding When Job Log Events Are Written\n\u00b6\n\n\nWhen are events written to the job log file? Let\u2019s find out. Read through the entire procedure below before starting, because some parts of the process are time sensitive.\n\n\n\n\nChange the \nsleep\n job submit file, so that the job sleeps for 2 minutes (= 120 seconds)\n\n\nSubmit the updated sleep job\n\n\nAs soon as the \ncondor_submit\n command finishes, hit the return key a few times, to create some blank lines\n\n\n\n\nRight away, run a command to show the log file and \nkeep showing\n updates as they occur:\n\n\nusername@learn $\n tail -f sleep.log\n\n\n\n\n\n\n\n\n\nWatch the output carefully. When do events appear in the log file?\n\n\n\n\nAfter the termination event appears, press Control-C to end the \ntail\n command and return to the shell prompt.\n\n\n\n\nUnderstanding How HTCondor Writes Files\n\u00b6\n\n\nWhen HTCondor writes the output, error, and log files, does it erase the previous contents of the file or does it add new lines onto the end? Let\u2019s find out!\n\n\nFor this exercise, we can use the \nhostname\n job from earlier.\n\n\n\n\nEdit the \nhostname\n submit file so that it uses new and unique filenames for output, error, and log files.\n\nAlternatively, delete any existing output, error, and log files from previous runs of the \nhostname\n job.\n\n\nSubmit the job three separate times in a row (there are better ways to do this, which we will cover in the next lecture)\n\n\nWait for all three jobs to finish\n\n\nExamine the output file: How many hostnames are there? Did HTCondor erase the previous contents for each job, or add new lines?\n\n\nExamine the log file\u2026 carefully: What happened there? Pay close attention to the times and job IDs of the events.\n\n\n\n\nIf you have questions about how HTCondor handles these files, you could try finding relevant sections of the manual (this is hard and not as useful as one would hope), discuss it with neighbors or instructors, or ask questions at the end of this session.",
            "title": "Exercise 1.4"
        },
        {
            "location": "/materials/day1/part1-ex4-logs/#monday-exercise-14-read-and-interpret-log-files",
            "text": "The goal of this exercise is quite simple: \nLearn to understand the contents of a job log file, which is where HTCondor describes the steps \ntaken to run your job.\nWhen things go wrong with your job, the log is the best place to look for first pointers (in addition to the .err file).  This exercise is short, but you'll want to at least read over it before moving on (and come back later, if you can't run through it now).",
            "title": "Monday Exercise 1.4: Read and Interpret Log Files"
        },
        {
            "location": "/materials/day1/part1-ex4-logs/#reading-a-log-file",
            "text": "For this exercise, we can examine a log file for any previous job that you have run. The example output below is based on the  sleep 60  job.  A job log file is updated throughout the life of a job, usually at key events. Each event starts with a heading that indicates what happened and when. Here are  all  of the event headings from the  sleep  job log (detailed output in between headings has been omitted here):  000   ( 5739 . 000 . 000 )   07 / 25   10 : 44 : 20   Job   submitted   from   host :   < 128 . 104 . 100 . 43 : 9618 ? addrs = ... >  001   ( 5739 . 000 . 000 )   07 / 25   10 : 45 : 11   Job   executing   on   host :   < 128 . 104 . 55 . 42 : 9618 ? addrs = ... >  006   ( 5739 . 000 . 000 )   07 / 25   10 : 45 : 20   Image   size   of   job   updated :   72  006   ( 5739 . 000 . 000 )   07 / 25   10 : 46 : 11   Image   size   of   job   updated :   4072  005   ( 5739 . 000 . 000 )   07 / 25   10 : 46 : 11   Job   terminated .   There is a lot of extra information in those lines, but you can see:   The job ID: cluster 5739, process 0 (written  000 )  The date and local time of each event  A brief description of the event: submission, execution, some information updates, and termination   Some events provide no information in addition to the heading. For example:  000   ( 5739 . 000 . 000 )   07 / 25   10 : 44 : 20   Job   submitted   from   host :   < 128 . 104 . 100 . 43 : 9618 ? addrs = ... >  ...   and  001   ( 5739 . 000 . 000 )   07 / 25   10 : 45 : 11   Job   executing   on   host :   < 128 . 104 . 55 . 42 : 9618 ? addrs = ... >  ...    Note  Each event ends with a line that contains only 3 dots:  ...   But the periodic information update event contains some additional information:  006   ( 5739 . 000 . 000 )   07 / 25   10 : 45 : 20   Image   size   of   job   updated :   72 \n     1    -    MemoryUsage   of   job   ( MB ) \n     72    -    ResidentSetSize   of   job   ( KB )  ...   These updates record the amount of memory that the job is using on the execute machine. This can be helpful information, so that in future runs of the job, you can tell HTCondor how much memory you will need.  The job termination event includes a great deal of additional information:  005   ( 5739 . 000 . 000 )   07 / 25   10 : 46 : 11   Job   terminated .\n     ( 1 )   Normal   termination   ( return   value   0 ) \n         Usr   0   00 : 00 : 00 ,  Sys   0   00 : 00 : 00    -    Run   Remote   Usage \n         Usr   0   00 : 00 : 00 ,  Sys   0   00 : 00 : 00    -    Run   Local   Usage \n         Usr   0   00 : 00 : 00 ,  Sys   0   00 : 00 : 00    -    Total   Remote   Usage \n         Usr   0   00 : 00 : 00 ,  Sys   0   00 : 00 : 00    -    Total   Local   Usage \n     0    -    Run   Bytes   Sent   By   Job \n     27848    -    Run   Bytes   Received   By   Job \n     0    -    Total   Bytes   Sent   By   Job \n     27848    -    Total   Bytes   Received   By   Job \n     Partitionable   Resources  :     Usage    Request   Allocated \n        Cpus                  :                  1           1 \n        Disk   ( KB )             :        40         30     4203309 \n        Memory   ( MB )           :         1          1           1 \n...  Probably the most interesting information is:   The  return value  ( 0  here, means the executable completed and didn't indicate any internal errors; non-zero usually means failure)  The total number of bytes transferred each way, which could be useful if your network is slow  The  Partitionable Resources  table, especially disk and memory usage, which will inform larger submissions.   There are many other kinds of events, but the ones above will occur in almost every job log.",
            "title": "Reading a Log File"
        },
        {
            "location": "/materials/day1/part1-ex4-logs/#understanding-when-job-log-events-are-written",
            "text": "When are events written to the job log file? Let\u2019s find out. Read through the entire procedure below before starting, because some parts of the process are time sensitive.   Change the  sleep  job submit file, so that the job sleeps for 2 minutes (= 120 seconds)  Submit the updated sleep job  As soon as the  condor_submit  command finishes, hit the return key a few times, to create some blank lines   Right away, run a command to show the log file and  keep showing  updates as they occur:  username@learn $  tail -f sleep.log    Watch the output carefully. When do events appear in the log file?   After the termination event appears, press Control-C to end the  tail  command and return to the shell prompt.",
            "title": "Understanding When Job Log Events Are Written"
        },
        {
            "location": "/materials/day1/part1-ex4-logs/#understanding-how-htcondor-writes-files",
            "text": "When HTCondor writes the output, error, and log files, does it erase the previous contents of the file or does it add new lines onto the end? Let\u2019s find out!  For this exercise, we can use the  hostname  job from earlier.   Edit the  hostname  submit file so that it uses new and unique filenames for output, error, and log files. \nAlternatively, delete any existing output, error, and log files from previous runs of the  hostname  job.  Submit the job three separate times in a row (there are better ways to do this, which we will cover in the next lecture)  Wait for all three jobs to finish  Examine the output file: How many hostnames are there? Did HTCondor erase the previous contents for each job, or add new lines?  Examine the log file\u2026 carefully: What happened there? Pay close attention to the times and job IDs of the events.   If you have questions about how HTCondor handles these files, you could try finding relevant sections of the manual (this is hard and not as useful as one would hope), discuss it with neighbors or instructors, or ask questions at the end of this session.",
            "title": "Understanding How HTCondor Writes Files"
        },
        {
            "location": "/materials/day1/part1-ex5-request/",
            "text": "pre em { font-style: normal; background-color: yellow; } pre strong { font-style: normal; font-weight: bold; color: \\#008; } \n\n\n\nMonday Exercise 1.5: Declare Resource Needs\n\u00b6\n\n\nThe goal of this exercise is to demonstrate how to test and tune the \nrequest_X\n statements in a submit file for when you don't know what resources your job needs.\n\n\nThere are three special resource request statements that you can use (optionally) in an HTCondor submit file:\n\n\n\n\nrequest_cpus\n for the number of CPUs your job will use (most softwares will take an argument to control this number, and it's usually otherwise \"1\")\n\n\nrequest_memory\n for the maximum amount of run-time memory your job may use\n\n\nrequest_disk\n for the maximum amount of disk space your job may use (including the executable and all other data that may show up during the job)\n\n\n\n\nHTCondor defaults to certain reasonable values for these request settings, so you do not need to use them to get \nsmall\n jobs to run. \nHowever, it is in \nYOUR\n best interest to always estimate resource requests before submitting any job, but to definitely tune your requests before submitting multiple jobs. In many HTCondor pools:\n\n\n\n\nIf your job goes over the request values, it may be removed from the execute machine and held (status 'H' in the \ncondor_q\n output, awaiting action on your part) without saving any partial job output files. So it is a disadvantage to not declare your resource needs or if you underestimate them. \n\n\nConversely, if you overestimate them by too much, your jobs will match to fewer slots (and with a longer average wait time) \nand\n you'll be hogging up resources that you don't need, but that could be used for the jobs of other users. In the long run, it works better for all users of the pool if you declare what you really need.\n\n\n\n\nBut how do you know what to request? In particular, we are concerned with memory and disk here; requesting multiple CPUs and using them is covered a bit in later school materials, but true HTC splits work up into jobs that each use as few CPU cores as possible (one CPU core is always best to have the most jobs running and completing soonest).\n\n\nDetermining Resource Needs Before Running Any Jobs\n\u00b6\n\n\n\n\nNote\n\n\nIf you are running short on time, you can skip to \"Determining Resource Needs By Running Test Jobs\", below, but try to come back and read over this part at some point.\n\n\n\n\nIt can be very difficult to predict the memory needs of your running program without running tests. Typically, the memory size of a job changes over time, making the task even trickier. \nIf you have knowledge ahead of time about your job\u2019s maximum memory needs, use that, or a maybe a number that's just a bit higher, to be safe. Worst case scenario, you can request a fairly large amount of memory (as high as what's on your laptop or other server, if you know your program can run without crashing) for a first test job, OR you can run the program locally and 'watch' it:\n\n\nExamining a Running Program on a Local Computer\n\u00b6\n\n\nWhen working on a shared submit server, you should not run computationally-intensive work because it can use resources needed by HTCondor to manage the queue for all uses. \nHowever, you may have access to other computers (your laptop, for example, or another server) where you can observe the memory usage of a program. The downside is that you'll have to watch a program run for essentially the entire time, to make sure you catch the maximum memory usage.\n\n\nFor Memory:\n\u00b6\n\n\nOn Mac and Windows, for example, the \"Activity Monitor\" and \"Task Manager\" applications may be useful. On a Mac or Linux system, you can use the \nps\n command or the \ntop\n command in the Terminal to watch a running program and see (roughly) how much memory it is using. Full coverage of these tools is beyond the scope of this exercise, but here are two quick examples:\n\n\nUsing \nps\n:\n\n\nusername@learn $\n ps ux\n\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\n\n\ncat      24342  0.0  0.0  90224  1864 ?        S    13:39   0:00 sshd: cat@pts/0  \n\n\ncat      24343  0.0  0.0  66096  1580 pts/0    Ss   13:39   0:00 -bash\n\n\ncat      25864  0.0  0.0  65624   996 pts/0    R+   13:52   0:00 ps ux\n\n\ncat      30052  0.0  0.0  90720  2456 ?        S    Jun22   0:00 sshd: cat@pts/2  \n\n\ncat      30053  0.0  0.0  66096  1624 pts/2    Ss+  Jun22   0:00 -bash\n\n\n\n\n\n\nThe Resident Set Size (\nRSS\n) column, highlighted above, gives a rough indication of the memory usage (in KB) of each running process. If your program runs long enough, you can run this command several times and note the greatest value.\n\n\nUsing \ntop\n:\n\n\nusername@learn $\n top -u \n<USERNAME>\n\n\ntop - 13:55:31 up 11 days, 20:59,  5 users,  load average: 0.12, 0.12, 0.09\n\n\nTasks: 198 total,   1 running, 197 sleeping,   0 stopped,   0 zombie\n\n\nCpu(s):  1.2%us,  0.1%sy,  0.0%ni, 98.5%id,  0.2%wa,  0.0%hi,  0.1%si,  0.0%st\n\n\nMem:   4001440k total,  3558028k used,   443412k free,   258568k buffers\n\n\nSwap:  4194296k total,      148k used,  4194148k free,  2960760k cached\n\n\n\n  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n\n\n24342 cat       15   0 90224 1864 1096 S  0.0  0.0   0:00.26 sshd\n\n\n24343 cat       15   0 66096 1580 1232 S  0.0  0.0   0:00.07 bash\n\n\n25927 cat       15   0 12760 1196  836 R  0.0  0.0   0:00.01 top\n\n\n30052 cat       16   0 90720 2456 1112 S  0.0  0.1   0:00.69 sshd\n\n\n30053 cat       18   0 66096 1624 1236 S  0.0  0.0   0:00.37 bash\n\n\n\n\n\n\nThe \ntop\n command (shown here with an option to limit the output to a single user ID) also shows information about running processes, but updates periodically by itself. Type the letter \nq\n to quit the interactive display. Again, the highlighted \nRES\n column shows an approximation of memory usage.\n\n\nFor Disk:\n\u00b6\n\n\nDetermining disk needs may be a bit simpler, because you can check on the size of files that a program is using while it runs. However, it is important to count all files that HTCondor counts to get an accurate size. HTCondor counts \neverything\n in your job sandbox toward your job\u2019s disk usage:\n\n\n\n\nThe executable itself\n\n\nAll \"input\" files (anything else that gets transferred TO the job, even if you don't think of it as \"input\")\n\n\nAll files created during the job (broadly defined as \"output\"), including the captured standard output and error files that you list in the submit file.\n\n\nAll temporary files created in the sandbox, even if they get deleted by the executable before it's done.\n\n\n\n\nIf you can run your program within a single directory on a local computer (not on the submit server), you should be able to view files and their sizes with the \nls\n and \ndu\n commands.\n\n\nDetermining Resource Needs By Running Test Jobs (BEST)\n\u00b6\n\n\nDespite the techniques mentioned above, by far the easiest approach to measuring your job\u2019s resource needs is to run one or a small number of sample jobs and have HTCondor itself tell you about the resources used during the runs.\n\n\nFor example, here is a strange Python script that does not do anything useful, but consumes some real resources while running:\n\n\n#!/usr/bin/env python\n\n\nimport\n \ntime\n\n\nimport\n \nos\n\n\nsize\n \n=\n \n1000000\n\n\nnumbers\n \n=\n \n[]\n\n\nfor\n \ni\n \nin\n \nxrange\n(\nsize\n):\n \nnumbers\n.\nappend\n(\nstr\n(\ni\n))\n\n\ntempfile\n \n=\n \nopen\n(\n'temp'\n,\n \n'w'\n)\n\n\ntempfile\n.\nwrite\n(\n' '\n.\njoin\n(\nnumbers\n))\n\n\ntempfile\n.\nclose\n()\n\n\ntime\n.\nsleep\n(\n60\n)\n\n\nos\n.\nremove\n(\n'temp'\n)\n\n\n\n\n\n\nWithout trying to figure out what this code does or how many resources it uses, create a submit file for it, \nand run it once with HTCondor, starting with somewhat high memory requests (\"1GB\" for memory and disk is a good starting point, unless you think the job will use far more).\nWhen it is done, examine the log file. In particular, we care about these lines:\n\n\n    \nPartitionable\n \nResources\n \n:\n    \nUsage\n  \nRequest\n \nAllocated\n\n       \nCpus\n                 \n:\n                 \n1\n         \n1\n\n       \nDisk\n \n(\nKB\n)\n            \n:\n     \n6739\n  \n1048576\n   \n8022934\n\n       \nMemory\n \n(\nMB\n)\n          \n:\n        \n3\n     \n1024\n      \n1024\n\n\n\n\n\n\nSo, now we know that the job used 6,739 KB of disk (= about 6.5 MB) and 3 MB of memory!\n\n\nThis is a great technique for determining the real resource needs of your job. If you think resource needs vary from run to run, submit a few sample jobs and look at all the results. And it never hurts to round up your resource requests a little, just in case your job occasionally uses more resources.\n\n\nSetting Resource Requirements\n\u00b6\n\n\nOnce you know your job\u2019s resource requirements, it is easy to declare them in your submit file. For example, taking our results above as an example, we might slightly increase our requests above what was used, just to be safe:\n\n\nrequest_memory\n \n=\n \n4\nMB\n  \n%\nBLUE\n%#\n \nrounded\n \nup\n \nfrom\n \n3\n \nMB\n%\nENDCOLOR\n%\n\n\nrequest_disk\n \n=\n \n7\nMB\n  \n%\nBLUE\n%#\n \nrounded\n \nup\n \nfrom\n \n6\n.\n5\n \nMB\n%\nENDCOLOR\n%\n\n\n\n\n\n\nPay close attention to units:\n\n\n\n\nWithout explicit units, \nrequest_memory\n is in MB (megabytes)\n\n\nWithout explicit units, \nrequest_disk\n is in KB (kilobytes)\n\n\nAllowable units are \nKB\n (kilobytes), \nMB\n (megabytes), \nGB\n (gigabytes), and \nTB\n (terabytes)\n\n\n\n\nHTCondor translates these requirements into attributes that become part of the job's \nrequirements\n expression. However, do not put your CPU, memory, and disk requirements directly into the \nrequirements\n expression; use the \nrequest_XXX\n statements instead.\n\n\nIf you still have time in this working session, Add these requirements to your submit file for the Python script, rerun the job, and confirm in the log file that your requests were used.",
            "title": "Exercise 1.5"
        },
        {
            "location": "/materials/day1/part1-ex5-request/#monday-exercise-15-declare-resource-needs",
            "text": "The goal of this exercise is to demonstrate how to test and tune the  request_X  statements in a submit file for when you don't know what resources your job needs.  There are three special resource request statements that you can use (optionally) in an HTCondor submit file:   request_cpus  for the number of CPUs your job will use (most softwares will take an argument to control this number, and it's usually otherwise \"1\")  request_memory  for the maximum amount of run-time memory your job may use  request_disk  for the maximum amount of disk space your job may use (including the executable and all other data that may show up during the job)   HTCondor defaults to certain reasonable values for these request settings, so you do not need to use them to get  small  jobs to run. \nHowever, it is in  YOUR  best interest to always estimate resource requests before submitting any job, but to definitely tune your requests before submitting multiple jobs. In many HTCondor pools:   If your job goes over the request values, it may be removed from the execute machine and held (status 'H' in the  condor_q  output, awaiting action on your part) without saving any partial job output files. So it is a disadvantage to not declare your resource needs or if you underestimate them.   Conversely, if you overestimate them by too much, your jobs will match to fewer slots (and with a longer average wait time)  and  you'll be hogging up resources that you don't need, but that could be used for the jobs of other users. In the long run, it works better for all users of the pool if you declare what you really need.   But how do you know what to request? In particular, we are concerned with memory and disk here; requesting multiple CPUs and using them is covered a bit in later school materials, but true HTC splits work up into jobs that each use as few CPU cores as possible (one CPU core is always best to have the most jobs running and completing soonest).",
            "title": "Monday Exercise 1.5: Declare Resource Needs"
        },
        {
            "location": "/materials/day1/part1-ex5-request/#determining-resource-needs-before-running-any-jobs",
            "text": "Note  If you are running short on time, you can skip to \"Determining Resource Needs By Running Test Jobs\", below, but try to come back and read over this part at some point.   It can be very difficult to predict the memory needs of your running program without running tests. Typically, the memory size of a job changes over time, making the task even trickier. \nIf you have knowledge ahead of time about your job\u2019s maximum memory needs, use that, or a maybe a number that's just a bit higher, to be safe. Worst case scenario, you can request a fairly large amount of memory (as high as what's on your laptop or other server, if you know your program can run without crashing) for a first test job, OR you can run the program locally and 'watch' it:",
            "title": "Determining Resource Needs Before Running Any Jobs"
        },
        {
            "location": "/materials/day1/part1-ex5-request/#examining-a-running-program-on-a-local-computer",
            "text": "When working on a shared submit server, you should not run computationally-intensive work because it can use resources needed by HTCondor to manage the queue for all uses. \nHowever, you may have access to other computers (your laptop, for example, or another server) where you can observe the memory usage of a program. The downside is that you'll have to watch a program run for essentially the entire time, to make sure you catch the maximum memory usage.",
            "title": "Examining a Running Program on a Local Computer"
        },
        {
            "location": "/materials/day1/part1-ex5-request/#for-memory",
            "text": "On Mac and Windows, for example, the \"Activity Monitor\" and \"Task Manager\" applications may be useful. On a Mac or Linux system, you can use the  ps  command or the  top  command in the Terminal to watch a running program and see (roughly) how much memory it is using. Full coverage of these tools is beyond the scope of this exercise, but here are two quick examples:  Using  ps :  username@learn $  ps ux USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND  cat      24342  0.0  0.0  90224  1864 ?        S    13:39   0:00 sshd: cat@pts/0    cat      24343  0.0  0.0  66096  1580 pts/0    Ss   13:39   0:00 -bash  cat      25864  0.0  0.0  65624   996 pts/0    R+   13:52   0:00 ps ux  cat      30052  0.0  0.0  90720  2456 ?        S    Jun22   0:00 sshd: cat@pts/2    cat      30053  0.0  0.0  66096  1624 pts/2    Ss+  Jun22   0:00 -bash   The Resident Set Size ( RSS ) column, highlighted above, gives a rough indication of the memory usage (in KB) of each running process. If your program runs long enough, you can run this command several times and note the greatest value.  Using  top :  username@learn $  top -u  <USERNAME>  top - 13:55:31 up 11 days, 20:59,  5 users,  load average: 0.12, 0.12, 0.09  Tasks: 198 total,   1 running, 197 sleeping,   0 stopped,   0 zombie  Cpu(s):  1.2%us,  0.1%sy,  0.0%ni, 98.5%id,  0.2%wa,  0.0%hi,  0.1%si,  0.0%st  Mem:   4001440k total,  3558028k used,   443412k free,   258568k buffers  Swap:  4194296k total,      148k used,  4194148k free,  2960760k cached    PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND  24342 cat       15   0 90224 1864 1096 S  0.0  0.0   0:00.26 sshd  24343 cat       15   0 66096 1580 1232 S  0.0  0.0   0:00.07 bash  25927 cat       15   0 12760 1196  836 R  0.0  0.0   0:00.01 top  30052 cat       16   0 90720 2456 1112 S  0.0  0.1   0:00.69 sshd  30053 cat       18   0 66096 1624 1236 S  0.0  0.0   0:00.37 bash   The  top  command (shown here with an option to limit the output to a single user ID) also shows information about running processes, but updates periodically by itself. Type the letter  q  to quit the interactive display. Again, the highlighted  RES  column shows an approximation of memory usage.",
            "title": "For Memory:"
        },
        {
            "location": "/materials/day1/part1-ex5-request/#for-disk",
            "text": "Determining disk needs may be a bit simpler, because you can check on the size of files that a program is using while it runs. However, it is important to count all files that HTCondor counts to get an accurate size. HTCondor counts  everything  in your job sandbox toward your job\u2019s disk usage:   The executable itself  All \"input\" files (anything else that gets transferred TO the job, even if you don't think of it as \"input\")  All files created during the job (broadly defined as \"output\"), including the captured standard output and error files that you list in the submit file.  All temporary files created in the sandbox, even if they get deleted by the executable before it's done.   If you can run your program within a single directory on a local computer (not on the submit server), you should be able to view files and their sizes with the  ls  and  du  commands.",
            "title": "For Disk:"
        },
        {
            "location": "/materials/day1/part1-ex5-request/#determining-resource-needs-by-running-test-jobs-best",
            "text": "Despite the techniques mentioned above, by far the easiest approach to measuring your job\u2019s resource needs is to run one or a small number of sample jobs and have HTCondor itself tell you about the resources used during the runs.  For example, here is a strange Python script that does not do anything useful, but consumes some real resources while running:  #!/usr/bin/env python  import   time  import   os  size   =   1000000  numbers   =   []  for   i   in   xrange ( size ):   numbers . append ( str ( i ))  tempfile   =   open ( 'temp' ,   'w' )  tempfile . write ( ' ' . join ( numbers ))  tempfile . close ()  time . sleep ( 60 )  os . remove ( 'temp' )   Without trying to figure out what this code does or how many resources it uses, create a submit file for it, \nand run it once with HTCondor, starting with somewhat high memory requests (\"1GB\" for memory and disk is a good starting point, unless you think the job will use far more).\nWhen it is done, examine the log file. In particular, we care about these lines:       Partitionable   Resources   :      Usage    Request   Allocated \n        Cpus                   :                   1           1 \n        Disk   ( KB )              :       6739    1048576     8022934 \n        Memory   ( MB )            :          3       1024        1024   So, now we know that the job used 6,739 KB of disk (= about 6.5 MB) and 3 MB of memory!  This is a great technique for determining the real resource needs of your job. If you think resource needs vary from run to run, submit a few sample jobs and look at all the results. And it never hurts to round up your resource requests a little, just in case your job occasionally uses more resources.",
            "title": "Determining Resource Needs By Running Test Jobs (BEST)"
        },
        {
            "location": "/materials/day1/part1-ex5-request/#setting-resource-requirements",
            "text": "Once you know your job\u2019s resource requirements, it is easy to declare them in your submit file. For example, taking our results above as an example, we might slightly increase our requests above what was used, just to be safe:  request_memory   =   4 MB    % BLUE %#   rounded   up   from   3   MB % ENDCOLOR %  request_disk   =   7 MB    % BLUE %#   rounded   up   from   6 . 5   MB % ENDCOLOR %   Pay close attention to units:   Without explicit units,  request_memory  is in MB (megabytes)  Without explicit units,  request_disk  is in KB (kilobytes)  Allowable units are  KB  (kilobytes),  MB  (megabytes),  GB  (gigabytes), and  TB  (terabytes)   HTCondor translates these requirements into attributes that become part of the job's  requirements  expression. However, do not put your CPU, memory, and disk requirements directly into the  requirements  expression; use the  request_XXX  statements instead.  If you still have time in this working session, Add these requirements to your submit file for the Python script, rerun the job, and confirm in the log file that your requests were used.",
            "title": "Setting Resource Requirements"
        },
        {
            "location": "/materials/day1/part1-ex6-remove/",
            "text": "pre em { font-style: normal; background-color: yellow; } pre strong { font-style: normal; font-weight: bold; color: \\#008; } \n\n\n\nMonday Exercise 1.6: Remove Jobs From the Queue\n\u00b6\n\n\nThe goal of this exercise is to show you how to remove jobs from the queue. This is helpful if you make a mistake, do not want to wait for a job to complete, or otherwise need to fix things. For example, if some test jobs go on hold for using too much memory or disk, you may want to just remove them, edit the submit files, and then submit again.\n\n\nSkip this exercise and come back to it if you are short on time, or until you need to remove jobs for other exercises\n\n\n\n\nNote\n\n\nPlease remember to remove any jobs from the queue that you have given up on. Otherwise, the queue will start to get very long with jobs that will waste resources (and decrease your priority), or that may never run (if they're on hold, or have other issues keeping them from matching).\n\n\n\n\nThis exercise is very short, but if you are out of time, you can come back to it later.\n\n\nRemoving a Job or Cluster From the Queue\n\u00b6\n\n\nTo practice removing jobs from the queue, you need a job in the queue!\n\n\n\n\nSubmit a job from an earlier exercise\n\n\nDetermine the job ID (\ncluster.process\n) from the \ncondor_submit\n output or from \ncondor_q\n\n\n\n\nRemove the job:\n\n\nusername@learn $\n condor_rm \n<JOB.ID>\n\n\n\n\n\n\nUse the full job ID this time, e.g. \n5759.0\n.\n\n\n\n\n\n\nDid the job leave the queue immediately? If not, about how long did it take?\n\n\n\n\n\n\nSo far, we have created job clusters that contain only one job process (the \n.0\n part of the job ID). That will change soon, so it is good to know how to remove a specific job ID. However, it is possible to remove all jobs that are part of a cluster at once. Simply omit the job process (the \n.0\n part of the job ID) in the \ncondor_rm\n command:\n\n\nusername@learn $\n condor_rm \n<CLUSTER>\n\n\n\n\n\n\nFinally, you can include many job clusters and full job IDs in a single \ncondor_rm\n command. For example:\n\n\nusername@learn $\n condor_rm \n5768\n \n5769\n \n5770\n.0 \n5771\n.2\n\n\n\n\n\nRemoving All of Your Jobs\n\u00b6\n\n\nIf you really want to remove all of your jobs at once, you can do that with:\n\n\nusername@learn $\n condor_rm \n<USERNAME>\n\n\n\n\n\n\nIf you want to test it: (optional, though you'll likely need this in the future)\n1.  Quickly submit several jobs from past exercises\n1.  View the jobs in the queue with \ncondor_q\n\n1.  Remove them all with the above command\n1.  Use \ncondor_q\n to track progress\n\n\nIn case you are wondering, you can remove only your own jobs. HTCondor administrators can remove anyone\u2019s jobs, so be nice to them.",
            "title": "Exercise 1.6"
        },
        {
            "location": "/materials/day1/part1-ex6-remove/#monday-exercise-16-remove-jobs-from-the-queue",
            "text": "The goal of this exercise is to show you how to remove jobs from the queue. This is helpful if you make a mistake, do not want to wait for a job to complete, or otherwise need to fix things. For example, if some test jobs go on hold for using too much memory or disk, you may want to just remove them, edit the submit files, and then submit again.  Skip this exercise and come back to it if you are short on time, or until you need to remove jobs for other exercises   Note  Please remember to remove any jobs from the queue that you have given up on. Otherwise, the queue will start to get very long with jobs that will waste resources (and decrease your priority), or that may never run (if they're on hold, or have other issues keeping them from matching).   This exercise is very short, but if you are out of time, you can come back to it later.",
            "title": "Monday Exercise 1.6: Remove Jobs From the Queue"
        },
        {
            "location": "/materials/day1/part1-ex6-remove/#removing-a-job-or-cluster-from-the-queue",
            "text": "To practice removing jobs from the queue, you need a job in the queue!   Submit a job from an earlier exercise  Determine the job ID ( cluster.process ) from the  condor_submit  output or from  condor_q   Remove the job:  username@learn $  condor_rm  <JOB.ID>   Use the full job ID this time, e.g.  5759.0 .    Did the job leave the queue immediately? If not, about how long did it take?    So far, we have created job clusters that contain only one job process (the  .0  part of the job ID). That will change soon, so it is good to know how to remove a specific job ID. However, it is possible to remove all jobs that are part of a cluster at once. Simply omit the job process (the  .0  part of the job ID) in the  condor_rm  command:  username@learn $  condor_rm  <CLUSTER>   Finally, you can include many job clusters and full job IDs in a single  condor_rm  command. For example:  username@learn $  condor_rm  5768   5769   5770 .0  5771 .2",
            "title": "Removing a Job or Cluster From the Queue"
        },
        {
            "location": "/materials/day1/part1-ex6-remove/#removing-all-of-your-jobs",
            "text": "If you really want to remove all of your jobs at once, you can do that with:  username@learn $  condor_rm  <USERNAME>   If you want to test it: (optional, though you'll likely need this in the future)\n1.  Quickly submit several jobs from past exercises\n1.  View the jobs in the queue with  condor_q \n1.  Remove them all with the above command\n1.  Use  condor_q  to track progress  In case you are wondering, you can remove only your own jobs. HTCondor administrators can remove anyone\u2019s jobs, so be nice to them.",
            "title": "Removing All of Your Jobs"
        },
        {
            "location": "/materials/day1/part1-ex7-compile/",
            "text": "pre em { font-style: normal; background-color: yellow; } pre strong { font-style: normal; font-weight: bold; color: \\#008; } \n\n\n\nMonday Bonus Exercise 1.7: Compile and Run Some C Code\n\u00b6\n\n\nThe goal of this exercise is to show that compiled code works just fine in HTCondor. It is mainly of interest to people who have their own C code to run (or C++, or really any compiled code, although Java would be handled a bit differently).\n\n\nPreparing a C Executable\n\u00b6\n\n\nWhen preparing a C program for HTCondor, it is best to compile and link the executable statically, so that it does not depend on external libraries and their particular versions. Why is this important? When your compiled C program is sent to another machine for execution, that machine may not have the same libraries that you have on your submit machine (or wherever you compile the program). If the libraries are not available or are the wrong versions, your program may fail or, perhaps worse, silently produce the wrong results.\n\n\nHere is a simple C program to try using (thanks, Alain Roy):\n\n\n#\ninclude\n \n<\nstdio\n.\nh\n>\n\n\n\nint\n \nmain\n(\nint\n \nargc\n, \nchar\n \n**\nargv\n)\n\n{\n    \nint\n \nsleep_time\n;\n\n    \nint\n \ninput\n;\n\n    \nint\n \nfailure\n;\n\n\n    \nif\n \n(\nargc\n \n!=\n \n3\n)\n {\n        \nprintf\n(\n\"\nUsage: simple <sleep-time> <integer>\n\\n\n\"\n)\n;\n\n        \nfailure\n \n=\n \n1\n;\n\n    } \nelse\n {\n        \nsleep_time\n \n=\n \natoi\n(\nargv\n[\n1\n]\n)\n;\n\n        \ninput\n      \n=\n \natoi\n(\nargv\n[\n2\n]\n)\n;\n\n\n        \nprintf\n(\n\"\nThinking really hard for %d seconds...\n\\n\n\"\n, \nsleep_time\n)\n;\n\n        \nsleep\n(\nsleep_time\n)\n;\n\n        \nprintf\n(\n\"\nWe calculated: %d\n\\n\n\"\n, \ninput\n \n*\n \n2\n)\n;\n\n        \nfailure\n \n=\n \n0\n;\n\n    }\n    \nreturn\n \nfailure\n;\n\n}\n\n\n\n\n\nSave that code to a file, for example, \nsimple.c\n.\n\n\nCompile the program with static linking:\n\n\nusername@learn $\n gcc -static -o simple simple.c\n\n\n\n\n\nAs always, test that you can run your command from the command line first. First, without arguments to make sure it fails correctly:\n\n\nusername@learn $\n ./simple\n\n\n\n\n\nand then with valid arguments:\n\n\nusername@learn $\n ./simple \n5\n \n21\n\n\n\n\n\n\nRunning a Compiled C Program\n\u00b6\n\n\nThe rest is simple. In fact, it is no different than running any other program. Here is a basic submit file for the C program (call it simple.sub):\n\n\nexecutable\n \n=\n \nsimple\n\n\narguments\n \n=\n \n\"60 64\"\n\n\n\noutput\n \n=\n \nc\n-\nprogram\n.\nout\n\n\nerror\n \n=\n \nc\n-\nprogram\n.\nerr\n\n\nlog\n \n=\n \nc\n-\nprogram\n.\nlog\n\n\n\nshould_transfer_files\n \n=\n \nYES\n\n\nwhen_to_transfer_output\n \n=\n \nON_EXIT\n\n\n\nqueue\n\n\n\n\n\n\nThen submit the job as usual!\n\n\nIn summary, it is easy to work with statically linked compiled code. It \nis\n possible to handle dynamically linked compiled code, but it is trickier. We will only mention this topic briefly on Wednesday.",
            "title": "Bonus Exercise 1.7"
        },
        {
            "location": "/materials/day1/part1-ex7-compile/#monday-bonus-exercise-17-compile-and-run-some-c-code",
            "text": "The goal of this exercise is to show that compiled code works just fine in HTCondor. It is mainly of interest to people who have their own C code to run (or C++, or really any compiled code, although Java would be handled a bit differently).",
            "title": "Monday Bonus Exercise 1.7: Compile and Run Some C Code"
        },
        {
            "location": "/materials/day1/part1-ex7-compile/#preparing-a-c-executable",
            "text": "When preparing a C program for HTCondor, it is best to compile and link the executable statically, so that it does not depend on external libraries and their particular versions. Why is this important? When your compiled C program is sent to another machine for execution, that machine may not have the same libraries that you have on your submit machine (or wherever you compile the program). If the libraries are not available or are the wrong versions, your program may fail or, perhaps worse, silently produce the wrong results.  Here is a simple C program to try using (thanks, Alain Roy):  # include   < stdio . h >  int   main ( int   argc ,  char   ** argv ) \n{\n     int   sleep_time ; \n     int   input ; \n     int   failure ; \n\n     if   ( argc   !=   3 )  {\n         printf ( \" Usage: simple <sleep-time> <integer> \\n \" ) ; \n         failure   =   1 ; \n    }  else  {\n         sleep_time   =   atoi ( argv [ 1 ] ) ; \n         input        =   atoi ( argv [ 2 ] ) ; \n\n         printf ( \" Thinking really hard for %d seconds... \\n \" ,  sleep_time ) ; \n         sleep ( sleep_time ) ; \n         printf ( \" We calculated: %d \\n \" ,  input   *   2 ) ; \n         failure   =   0 ; \n    }\n     return   failure ; \n}  Save that code to a file, for example,  simple.c .  Compile the program with static linking:  username@learn $  gcc -static -o simple simple.c  As always, test that you can run your command from the command line first. First, without arguments to make sure it fails correctly:  username@learn $  ./simple  and then with valid arguments:  username@learn $  ./simple  5   21",
            "title": "Preparing a C Executable"
        },
        {
            "location": "/materials/day1/part1-ex7-compile/#running-a-compiled-c-program",
            "text": "The rest is simple. In fact, it is no different than running any other program. Here is a basic submit file for the C program (call it simple.sub):  executable   =   simple  arguments   =   \"60 64\"  output   =   c - program . out  error   =   c - program . err  log   =   c - program . log  should_transfer_files   =   YES  when_to_transfer_output   =   ON_EXIT  queue   Then submit the job as usual!  In summary, it is easy to work with statically linked compiled code. It  is  possible to handle dynamically linked compiled code, but it is trickier. We will only mention this topic briefly on Wednesday.",
            "title": "Running a Compiled C Program"
        },
        {
            "location": "/materials/day1/part2-ex1-files/",
            "text": "pre em { font-style: normal; background-color: yellow; } pre strong { font-style: normal; font-weight: bold; color: \\#008; } \n\n\n\nMonday Exercise 2.1: Work With Input and Output Files\n\u00b6\n\n\nThe goal of this exercise is make input files available to your job on the execute machine, and return output files back. This small change significantly adds to the kinds of jobs that you can run.\n\n\nViewing a Job Sandbox\n\u00b6\n\n\nBefore you learn to transfer files to and from your job, it is good to understand a bit more about the environment in which your job runs. When the HTCondor \nstarter\n process prepares to run your job, it creates a new directory for your job and all of its files. We call this directory the \njob sandbox\n, because it is your job\u2019s private space to play. Let\u2019s see what is in the job sandbox for a very simple job with no special input or output files.\n\n\n\n\n\n\nSave the script below in a file named \nsandbox.sh\n:\n\n\n#!/bin/sh\n\n\necho\n \n'Date: '\n \n`\ndate\n`\n\n\necho\n \n'Host: '\n \n`\nhostname\n`\n \n\necho\n \n'Sandbox: '\n \n`\npwd\n`\n \nls -alF\n\n# END\n\n\n\n\n\n\n\n\n\n\nCreate a submit file for this script and submit it.\n\n\n\n\nWhen the job finishes, look at the contents of the output file.\n\n\n\n\nIn the output file, note the \nSandbox:\n line: That is the full path to your job sandbox for the run. It was created just for your job, and it was removed as soon as your job finished.\n\n\nNext, look at the output that appears after the \nSandbox:\n line; it is the output from the \nls\n command in the script. It shows all of the files in your job sandbox, as they existed at the end of the execution of \nsandbox.sh\n. The files are:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.chirp.config\n\n\nConfiguration for an advanced feature\n\n\n\n\n\n\n.job.ad\n\n\nThe job ClassAd\n\n\n\n\n\n\n.machine.ad\n\n\nThe machine ClassAd\n\n\n\n\n\n\n_condor_stderr\n\n\nSaved standard error from the job\n\n\n\n\n\n\n_condor_stdout\n\n\nSaved standard output from the job\n\n\n\n\n\n\ncondor_exec.exe\n\n\nThe executable, renamed from \nsandbox.sh\n\n\n\n\n\n\ntmp/\n\n\nA directory in which to put temporary files\n\n\n\n\n\n\n\n\nSo, HTCondor wrote copies of the job and machine ads (for use by the job, if desired), transferred your executable (\nsandbox.sh\n), renamed it (\ncondor_exec.exe\n), ran it, and saved its standard output and standard error into files. Notice that your submit file, which was in the same directory on the submit machine as your executable, was \nnot\n transferred, nor were any other files that happened to be in directory with the submit file.\n\n\nNow that we know something about the sandbox, we can transfer more files to and from it.\n\n\nRunning a Job With Input Files\n\u00b6\n\n\nNext, you will run a job that requires an input file. Remember, the initial job sandbox will contain only the renamed job executable, unless you tell HTCondor explicitly about every other file that needs to be transferred. Fortunately, this is easy.\n\n\nHere is a simple Python script that takes the name of an input file (containing one word per line) from the command line, counts the number of times each (lowercased) word occurs in the text, and prints out the final list of words and their counts.\n\n\n#!/usr/bin/env python\n\n\n\nimport\n \nos\n\n\nimport\n \nsys\n\n\n\nif\n \nlen\n(\nsys\n.\nargv\n)\n \n!=\n \n2\n:\n\n    \nprint\n \n'Usage: \n%s\n DATA'\n \n%\n \n(\nos\n.\npath\n.\nbasename\n(\nsys\n.\nargv\n[\n0\n]))\n\n    \nsys\n.\nexit\n(\n1\n)\n\n\ninput_filename\n \n=\n \nsys\n.\nargv\n[\n1\n]\n\n\n\nwords\n \n=\n \n{}\n\n\n\nmy_file\n \n=\n \nopen\n(\ninput_filename\n,\n \n'r'\n)\n\n\nfor\n \nline\n \nin\n \nmy_file\n:\n\n    \nword\n \n=\n \nline\n.\nstrip\n()\n.\nlower\n()\n\n    \nif\n \nword\n \nin\n \nwords\n:\n\n        \nwords\n[\nword\n]\n \n+=\n \n1\n\n    \nelse\n:\n\n        \nwords\n[\nword\n]\n \n=\n \n1\n\n\nmy_file\n.\nclose\n()\n\n\n\nfor\n \nword\n \nin\n \nsorted\n(\nwords\n.\nkeys\n()):\n\n    \nprint\n \n'\n%8d\n \n%s\n'\n \n%\n \n(\nwords\n[\nword\n],\n \nword\n)\n\n\n\n\n\n\n\n\nSave the Python script in a file named \nfreq.py\n.\n\n\n\n\nDownload the input file for the script (263K lines, ~1.4 MB) and save it in your submit directory:\n\n\nusername@learn $\n wget http://proxy.chtc.wisc.edu/SQUID/osgschool18/mon-2.1-words.txt\n\n\n\n\n\n\n\n\n\nCreate a basic submit file for the \nfreq.py\n executable.\n\n\n\n\n\n\nAdd a line to tell HTCondor to transfer the input file:\n\n\ntransfer_input_files\n \n=\n \nmon\n-\n2\n.\n1\n-\nwords\n.\ntxt\n\n\n\n\n\n\nAs with all submit file commands, it does not matter where this line goes, as long as it comes before the word \nqueue\n.\n\n\n\n\n\n\nDo not forget to add a line to name the input file as the argument to the Python script.\n\n\n\n\nSubmit the job, wait for it to finish, and check the output!\n\n\n\n\nIf things do not work the first time, keep trying! At this point in the exercises, we are telling you less and less explicitly how to do steps that you have done before. If you get stuck, ask a neighbor or one of the instructors.\n\n\n\n\nNote\n\n\nIf you want to transfer more than one input file, list all of them on a single \ntransfer_input_files\n command,\nseparated by commas.\nFor example, if there are three input files:\n\n\ntransfer_input_files\n \n=\n \na\n.\ntxt\n,\n \nb\n.\ntxt\n,\n \nc\n.\ntxt\n\n\n\n\n\n\n\n\nTransferring Output Files\n\u00b6\n\n\nSo far, we have relied on programs that send their output to the standard output and error streams, which HTCondor captures, saves, and returns back to the submit directory. But what if your program writes one or more files for its output? How do you tell HTCondor to bring them back?\n\n\nLet\u2019s start by exploring what happens to files that a jobs creates in the sandbox. We will use a very simple method for creating a new file: We will copy an input file to another name.\n\n\n\n\nFind or create a small input file (it is fine to use any small file from a previous exercise).\n\n\nCreate a submit file that transfers the input file and copies it to another name (as if doing \n/bin/cp input.txt output.txt\n on the command line)\n\n\nMake the output filename different than any filenames that are in your submit directory\n\n\nWhat is the \nexecutable\n line?\n\n\nWhat is the \narguments\n line?\n\n\nHow do you tell HTCondor to transfer the input file?\n\n\nAs always, use \noutput\n, \nerror\n, and \nlog\n filenames that are different from previous exercises\n\n\n\n\n\n\nSubmit the job and wait for it to finish.\n\n\n\n\nWhat happened? Can you tell what HTCondor did with the output file that was created (did it end up back on the submit server?), after it was created in the job sandbox? Look carefully at the list of files in your submit directory now.\n\n\nTransferring Specific Output Files\n\u00b6\n\n\nAs you saw in the last exercise, by default HTCondor transfers files that are created in the job sandbox back to the submit directory when the job finishes. In fact, HTCondor will also transfer back \nchanged\n input files, too. But, this only works for files that are in the top-level sandbox directory, and \nnot\n for ones contained in subdirectories.\n\n\nWhat if you want to bring back only \nsome\n output files, or output files contained in subdirectories?\n\n\nHere is a simple shell script that creates several files, including a copy of an input file in a new subdirectory:\n\n\n#!/bin/sh\n\n\nif\n \n[\n \n$#\n -ne \n1\n \n]\n;\n \nthen\n \necho\n \n\"Usage: \n$0\n INPUT\"\n;\n \nexit\n \n1\n;\n \nfi\n\ndate > output-timestamp.txt\ncal > output-calendar.txt\nmkdir subdirectory\ncp \n$1\n subdirectory/backup-\n$1\n\n\n\n\n\n\nFirst, let\u2019s confirm that HTCondor does not bring back the output file in the subdirectory:\n\n\n\n\nSave the shell script in a file named \noutput.sh\n.\n\n\nWrite a submit file that transfers an input file and runs \noutput.sh\n on it (passing the filename as an argument).\n\n\nSubmit the job, wait for it to finish, and examine the contents of your submit directory.\n\n\n\n\nSuppose you decide that you want only the timestamp output file and all files in the subdirectory, but not the calendar output file. You can tell HTCondor to transfer these specific files:\n\n\ntransfer_output_files\n \n=\n \noutput\n-\ntimestamp\n.\ntxt\n,\n \nsubdirectory\n/\n\n\n\n\n\n\n\n\nNote\n\n\nSee the trailing slash (\n/\n) on the subdirectory?\nThat tells HTCondor to transfer back \nthe files\n contained in the subdirectory, but not the directory itself;\nthe files will be written directly into the submit directory.\nIf you want HTCondor to transfer back an entire directory, leave off the trailing slash.\n\n\n\n\n\n\nRemove all output files from the previous run, including \noutput-timestamp.txt\n and \noutput-calendar.txt\n.\n\n\nCopy the previous submit file that ran \noutput.sh\n and add the \ntransfer_output_files\n line from above.\n\n\nSubmit the job, wait for it to finish, and examine the contents of your submit directory.\n\n\n\n\nDid it work as you expected?\n\n\nThinking About Progress So Far\n\u00b6\n\n\nAt this point, you can do just about everything that you need in order to run jobs on a local HTC pool. You can identify the executable, arguments, and input files, and you can get output back from the job. This is a big achievement!\n\n\nIn some ways, everything after this exercise shows you how to submit multiple jobd at once and makes it easier to run certain kinds of jobs and deal with certain kinds of situations.\n\n\nReferences\n\u00b6\n\n\nThere are many more details about HTCondor\u2019s file transfer mechanism not covered here. For more information, read section 2.5.9 of the HTCondor Manual.",
            "title": "Exercise 2.1"
        },
        {
            "location": "/materials/day1/part2-ex1-files/#monday-exercise-21-work-with-input-and-output-files",
            "text": "The goal of this exercise is make input files available to your job on the execute machine, and return output files back. This small change significantly adds to the kinds of jobs that you can run.",
            "title": "Monday Exercise 2.1: Work With Input and Output Files"
        },
        {
            "location": "/materials/day1/part2-ex1-files/#viewing-a-job-sandbox",
            "text": "Before you learn to transfer files to and from your job, it is good to understand a bit more about the environment in which your job runs. When the HTCondor  starter  process prepares to run your job, it creates a new directory for your job and all of its files. We call this directory the  job sandbox , because it is your job\u2019s private space to play. Let\u2019s see what is in the job sandbox for a very simple job with no special input or output files.    Save the script below in a file named  sandbox.sh :  #!/bin/sh  echo   'Date: '   ` date `  echo   'Host: '   ` hostname `   echo   'Sandbox: '   ` pwd `  \nls -alF # END     Create a submit file for this script and submit it.   When the job finishes, look at the contents of the output file.   In the output file, note the  Sandbox:  line: That is the full path to your job sandbox for the run. It was created just for your job, and it was removed as soon as your job finished.  Next, look at the output that appears after the  Sandbox:  line; it is the output from the  ls  command in the script. It shows all of the files in your job sandbox, as they existed at the end of the execution of  sandbox.sh . The files are:           .chirp.config  Configuration for an advanced feature    .job.ad  The job ClassAd    .machine.ad  The machine ClassAd    _condor_stderr  Saved standard error from the job    _condor_stdout  Saved standard output from the job    condor_exec.exe  The executable, renamed from  sandbox.sh    tmp/  A directory in which to put temporary files     So, HTCondor wrote copies of the job and machine ads (for use by the job, if desired), transferred your executable ( sandbox.sh ), renamed it ( condor_exec.exe ), ran it, and saved its standard output and standard error into files. Notice that your submit file, which was in the same directory on the submit machine as your executable, was  not  transferred, nor were any other files that happened to be in directory with the submit file.  Now that we know something about the sandbox, we can transfer more files to and from it.",
            "title": "Viewing a Job Sandbox"
        },
        {
            "location": "/materials/day1/part2-ex1-files/#running-a-job-with-input-files",
            "text": "Next, you will run a job that requires an input file. Remember, the initial job sandbox will contain only the renamed job executable, unless you tell HTCondor explicitly about every other file that needs to be transferred. Fortunately, this is easy.  Here is a simple Python script that takes the name of an input file (containing one word per line) from the command line, counts the number of times each (lowercased) word occurs in the text, and prints out the final list of words and their counts.  #!/usr/bin/env python  import   os  import   sys  if   len ( sys . argv )   !=   2 : \n     print   'Usage:  %s  DATA'   %   ( os . path . basename ( sys . argv [ 0 ])) \n     sys . exit ( 1 )  input_filename   =   sys . argv [ 1 ]  words   =   {}  my_file   =   open ( input_filename ,   'r' )  for   line   in   my_file : \n     word   =   line . strip () . lower () \n     if   word   in   words : \n         words [ word ]   +=   1 \n     else : \n         words [ word ]   =   1  my_file . close ()  for   word   in   sorted ( words . keys ()): \n     print   ' %8d   %s '   %   ( words [ word ],   word )    Save the Python script in a file named  freq.py .   Download the input file for the script (263K lines, ~1.4 MB) and save it in your submit directory:  username@learn $  wget http://proxy.chtc.wisc.edu/SQUID/osgschool18/mon-2.1-words.txt    Create a basic submit file for the  freq.py  executable.    Add a line to tell HTCondor to transfer the input file:  transfer_input_files   =   mon - 2 . 1 - words . txt   As with all submit file commands, it does not matter where this line goes, as long as it comes before the word  queue .    Do not forget to add a line to name the input file as the argument to the Python script.   Submit the job, wait for it to finish, and check the output!   If things do not work the first time, keep trying! At this point in the exercises, we are telling you less and less explicitly how to do steps that you have done before. If you get stuck, ask a neighbor or one of the instructors.   Note  If you want to transfer more than one input file, list all of them on a single  transfer_input_files  command,\nseparated by commas.\nFor example, if there are three input files:  transfer_input_files   =   a . txt ,   b . txt ,   c . txt",
            "title": "Running a Job With Input Files"
        },
        {
            "location": "/materials/day1/part2-ex1-files/#transferring-output-files",
            "text": "So far, we have relied on programs that send their output to the standard output and error streams, which HTCondor captures, saves, and returns back to the submit directory. But what if your program writes one or more files for its output? How do you tell HTCondor to bring them back?  Let\u2019s start by exploring what happens to files that a jobs creates in the sandbox. We will use a very simple method for creating a new file: We will copy an input file to another name.   Find or create a small input file (it is fine to use any small file from a previous exercise).  Create a submit file that transfers the input file and copies it to another name (as if doing  /bin/cp input.txt output.txt  on the command line)  Make the output filename different than any filenames that are in your submit directory  What is the  executable  line?  What is the  arguments  line?  How do you tell HTCondor to transfer the input file?  As always, use  output ,  error , and  log  filenames that are different from previous exercises    Submit the job and wait for it to finish.   What happened? Can you tell what HTCondor did with the output file that was created (did it end up back on the submit server?), after it was created in the job sandbox? Look carefully at the list of files in your submit directory now.",
            "title": "Transferring Output Files"
        },
        {
            "location": "/materials/day1/part2-ex1-files/#transferring-specific-output-files",
            "text": "As you saw in the last exercise, by default HTCondor transfers files that are created in the job sandbox back to the submit directory when the job finishes. In fact, HTCondor will also transfer back  changed  input files, too. But, this only works for files that are in the top-level sandbox directory, and  not  for ones contained in subdirectories.  What if you want to bring back only  some  output files, or output files contained in subdirectories?  Here is a simple shell script that creates several files, including a copy of an input file in a new subdirectory:  #!/bin/sh  if   [   $#  -ne  1   ] ;   then   echo   \"Usage:  $0  INPUT\" ;   exit   1 ;   fi \ndate > output-timestamp.txt\ncal > output-calendar.txt\nmkdir subdirectory\ncp  $1  subdirectory/backup- $1   First, let\u2019s confirm that HTCondor does not bring back the output file in the subdirectory:   Save the shell script in a file named  output.sh .  Write a submit file that transfers an input file and runs  output.sh  on it (passing the filename as an argument).  Submit the job, wait for it to finish, and examine the contents of your submit directory.   Suppose you decide that you want only the timestamp output file and all files in the subdirectory, but not the calendar output file. You can tell HTCondor to transfer these specific files:  transfer_output_files   =   output - timestamp . txt ,   subdirectory /    Note  See the trailing slash ( / ) on the subdirectory?\nThat tells HTCondor to transfer back  the files  contained in the subdirectory, but not the directory itself;\nthe files will be written directly into the submit directory.\nIf you want HTCondor to transfer back an entire directory, leave off the trailing slash.    Remove all output files from the previous run, including  output-timestamp.txt  and  output-calendar.txt .  Copy the previous submit file that ran  output.sh  and add the  transfer_output_files  line from above.  Submit the job, wait for it to finish, and examine the contents of your submit directory.   Did it work as you expected?",
            "title": "Transferring Specific Output Files"
        },
        {
            "location": "/materials/day1/part2-ex1-files/#thinking-about-progress-so-far",
            "text": "At this point, you can do just about everything that you need in order to run jobs on a local HTC pool. You can identify the executable, arguments, and input files, and you can get output back from the job. This is a big achievement!  In some ways, everything after this exercise shows you how to submit multiple jobd at once and makes it easier to run certain kinds of jobs and deal with certain kinds of situations.",
            "title": "Thinking About Progress So Far"
        },
        {
            "location": "/materials/day1/part2-ex1-files/#references",
            "text": "There are many more details about HTCondor\u2019s file transfer mechanism not covered here. For more information, read section 2.5.9 of the HTCondor Manual.",
            "title": "References"
        },
        {
            "location": "/materials/day1/part2-ex2-queue-n/",
            "text": "pre em { font-style: normal; background-color: yellow; } pre strong { font-style: normal; font-weight: bold; color: \\#008; } \n\n\n\nMonday Exercise 2.2: Use queue \nN\n, $(Cluster), and $(Process)\n\u00b6\n\n\nThe goal of the next several exercises is to learn to submit many jobs from a single \nqueue\n statement, and then to control filenames and arguments per job.\n\n\nSuppose you have a program that you want to run many times with different arguments each time. With what you know so far, you have a couple of choices:\n\n\n\n\nWrite one submit file; submit one job, change the argument in the submit file, submit another job, change the submit file, \u2026\n\n\nWrite many submit files that are nearly identical except for the program argument\n\n\n\n\nNeither of these options seems very satisfying. Fortunately, we can do better with HTCondor.\n\n\nRunning Many Jobs With One queue Statement\n\u00b6\n\n\nHere is a C program that uses a simple stochastic (random) method to estimate the value of \u03c0\u00a0\u2014 feel free to try to figure out the method from the code, but it is not critical for this exercise. The single argument to the program is the number of samples to take. More samples should result in better estimates!\n\n\n#\ninclude\n \n<\nstdio\n.\nh\n>\n\n#\ninclude\n \n<\nstdlib\n.\nh\n>\n\n#\ninclude\n \n<\nsys\n/\ntime\n.\nh\n>\n\n\n\nint\n \nmain\n(\nint\n \nargc\n, \nchar\n \n*\nargv\n[]\n)\n\n{\n  \nstruct\n \ntimeval\n \nmy_timeval\n;\n\n  \nint\n \niterations\n \n=\n \n0\n;\n\n  \nint\n \ninside_circle\n \n=\n \n0\n;\n\n  \nint\n \ni\n;\n\n  \ndouble\n \nx\n, \ny\n, \npi_estimate\n;\n\n\n  \ngettimeofday\n(\n&\nmy_timeval\n, \nNULL\n)\n;\n\n  \nsrand48\n(\nmy_timeval\n.\ntv_sec\n \n^\n \nmy_timeval\n.\ntv_usec\n)\n;\n\n\n  \nif\n \n(\nargc\n \n==\n \n2\n)\n {\n    \niterations\n \n=\n \natoi\n(\nargv\n[\n1\n]\n)\n;\n\n  } \nelse\n {\n    \nprintf\n(\n\"\nusage: circlepi ITERATIONS\n\\n\n\"\n)\n;\n\n    \nexit\n(\n1\n)\n;\n\n  }\n\n  \nfor\n \n(\ni\n \n=\n \n0\n; i < iterations; i++) {\n\n    \nx\n \n=\n \n(\ndrand48\n()\n \n-\n \n0\n.\n5\n)\n \n*\n \n2\n.\n0\n;\n\n    \ny\n \n=\n \n(\ndrand48\n()\n \n-\n \n0\n.\n5\n)\n \n*\n \n2\n.\n0\n;\n\n    \nif\n \n(((\nx\n \n*\n \nx\n)\n \n+\n \n(\ny\n \n*\n \ny\n))\n \n<=\n \n1\n.\n0\n)\n {\n      \ninside_circle\n++\n;\n\n    }\n  }\n  \npi_estimate\n \n=\n \n4\n.\n0\n \n*\n \n((\ndouble\n)\n \ninside_circle\n \n/\n \n(\ndouble\n)\n \niterations\n)\n;\n\n  \nprintf\n(\n\"\n%d iterations, %d inside; pi = %f\n\\n\n\"\n, \niterations\n, \ninside_circle\n, \npi_estimate\n)\n;\n\n  \nreturn\n \n0\n;\n\n}\n\n\n\n\n\n\n\nIn a new directory for this exercise, save the code to a file named \ncirclepi.c\n\n\n\n\nCompile the code (we will cover this in more detail Wednesday):\n\n\nusername@learn $\n gcc -static -o circlepi circlepi.c\n\n\n\n\n\n\n\n\n\nTest the program with just 1000 samples:\n\n\nusername@learn $\n ./circlepi \n1000\n\n\n\n\n\n\n\n\n\n\nNow suppose that you want to run the program many times, to produce many estimates. This is exactly what a statement like \nqueue 3\n is useful for. Let\u2019s see how it works:\n\n\n\n\nWrite a normal submit file for this program\n\n\nPass 1 million (\n1000000\n) as the command line argument to \ncirclepi\n\n\nRemember to use \nqueue 3\n instead of just \nqueue\n\n\n\n\n\n\n\n\nSubmit the file. Note the slightly different message from \ncondor_submit\n:\n\n\n3 job(s) submitted to cluster *NNNN*.\n\n\n\n\n\n\n\n\n\n\nBefore the jobs execute, look at the job queue to see the multiple jobs\n\n\n\n\n\n\nHere is some sample \ncondor_q -nobatch\n output:\n\n\n ID       OWNER            SUBMITTED     RUN_TIME ST PRI SIZE CMD\n\n\n10228.0   cat             7/25 11:57   0+00:00:00 I  0    0.7 circlepi 1000000000\n\n\n10228.1   cat             7/25 11:57   0+00:00:00 I  0    0.7 circlepi 1000000000\n\n\n10228.2   cat             7/25 11:57   0+00:00:00 I  0    0.7 circlepi 1000000000\n\n\n\n\n\n\nIn this sample, all three jobs are part of \ncluster\n \n10228\n, but the first job was assigned \nprocess\n \n0\n, the second job was assigned process \n1\n, and the third one was assigned process \n2\n. (Historical note: Programmers like to start counting from 0, hence the odd numbering scheme.)\n\n\nAt this time, it is worth reviewing the definition of a \njob ID\n. It is a job\u2019s cluster number, a dot (\n.\n), and the job\u2019s process number. So in the example above, the job ID of the second job is \n10228.1\n.\n\n\nPop Quiz:\n Do you remember how to ask HTCondor to list all of the jobs from one cluster? How about one specific job ID?\n\n\nUsing queue \nN\n With Output\n\u00b6\n\n\nWhen all three jobs in your single cluster are finished, examine the resulting files.\n\n\n\n\nWhat is in the output file?\n\n\nWhat is in the error file (hopefully nothing)?\n\n\nWhat is in the log file? Look carefully at the job IDs in each event.\n\n\nIs this what you expected? Is it what you wanted?\n\n\n\n\nUsing $(Process) to Distinguish Jobs\n\u00b6\n\n\nAs you saw with the experiment above, each job ended up overwriting the same output and error filenames in the submission directory.\nAfter all, we didn't tell it to behave any differently when it ran three jobs.\nWe need a way to separate output (and error) files \nper job that is queued\n, not just for the whole cluster of jobs. Fortunately, HTCondor has a way to separate the files easily.\n\n\nWhen processing a submit file, HTCondor will replace any instance of \n$(Process)\n with the process number of the job, for each job that is queued. \nFor example, you can use the \n$(Process)\n variable to define a separate output file name for each job:\n\n\noutput\n \n=\n \nmy\n-\noutput\n-\nfile\n-\n$\n(\nProcess\n).\nout\n\n\nqueue\n \n10\n\n\n\n\n\n\nEven though the \noutput\n filename is defined only once, HTCondor will create separate output filenames for each job:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFirst job\n\n\nmy-output-file-0.out\n\n\n\n\n\n\nSecond job\n\n\nmy-output-file-1.out\n\n\n\n\n\n\nThird job\n\n\nmy-output-file-2.out\n\n\n\n\n\n\n...\n\n\n\n\n\n\n\n\nLast (tenth) job\n\n\nmy-output-file-9.out\n\n\n\n\n\n\n\n\nLet\u2019s see how this works for our program that estimates \u03c0.\n\n\n\n\nIn your submit file, change the definitions of \noutput\n and \nerror\n to use \n$(Process)\n in the filename, similar to the example above.\n\n\nDelete any output, error, and log files from previous runs.\n\n\nSubmit the updated file.\n\n\n\n\nWhen all three jobs are finished, examine the resulting files again.\n\n\n\n\nHow many files are there of each type? What are their names?\n\n\nIs this what you expected? Is it what you wanted from the \u03c0 estimation process?\n\n\n\n\nUsing $(Cluster) to Separate Files Across Runs\n\u00b6\n\n\nWith \n$(Process)\n, you can get separate output (and error) filenames for each job within a run. However, the next time you submit the same file, all of the output and error files are overwritten by new ones created by the new jobs. Maybe this is the behavior that you want. But sometimes, you may want to separate files by run, as well.\n\n\nIn addition to \n$(Process)\n, there is also a \n$(Cluster)\n variable that you can use in your submit files. It works just like \n$(Process)\n, except it is replaced with the cluster number of the entire submission. Because the cluster number is the same for all jobs within a single submission, it does not separate files by job within a submission. But when used \nwith\n \n$(Process)\n, it can be used to separate files by run. For example, consider this \noutput\n statement:\n\n\noutput\n \n=\n \nmy\n-\noutput\n-\nfile\n-\n$\n(\nCluster\n)\n-\n$\n(\nProcess\n).\nout\n\n\n\n\n\n\nFor one particular run, it might result in output filenames like \nmy-output-file-2444-0.out\n, \nmyoutput-file-2444-1.out\n, \nmyoutput-file-2444-2.out\n, etc.\n\n\nHowever, the next run would have different filenames, replacing \n2444\n with the new Cluster number of that run.\n\n\nUsing $(Process) and $(Cluster) in Other Statements\n\u00b6\n\n\nThe \n$(Cluster)\n and \n$(Process)\n variables can be used in any submit file statement, although they are useful in some kinds of submit file statements and not really for others. For example, consider using $(Cluster) or $(Process) in each of the below:\n\n\n\n\nlog\n\n\ntransfer_input_files\n\n\ntransfer_output_files\n\n\narguments\n\n\n\n\nUnfortunately, HTCondor does not easily let you perform math on the \n$(Process)\n number when using it. So, for example, if you use \n$(Process)\n as a numeric argument to a command, it will always result in jobs getting the arguments 0, 1, 2, and so on. If you have control over your program and the way in which it uses command-line arguments, then you are fine. Otherwise, you might need a solution like those in the next exercises.\n\n\n(Optional) Defining JobBatchName for Tracking\n\u00b6\n\n\nDuring the lecture, it was mentioned that you can define arbitrary attributes in your submit file, and that one purpose of such attributes is to track or report on different jobs separately. In this optional exercise, you will see how this technique can be used.\n\n\nOnce again, we will use \nsleep\n jobs, so that your jobs remain in the queue long enough to experiment on.\n\n\n\n\nCreate a basic submit file that runs \nsleep 120\n (or some reasonable duration).\n\n\n\n\nInstead of a single \nqueue\n statement, write this:\n\n\njobbatchname\n \n=\n \n1\n\n\nqueue\n \n5\n\n\n\n\n\n\n\n\n\n\nSubmit the file.\n\n\n\n\n\n\nNow, quickly edit the submit file to instead say:\n\n\njobbatchname\n \n=\n \n2\n\n\n\n\n\n\n\n\n\n\nSubmit the file again.\n\n\n\n\n\n\nCheck on the submissions using a normal \ncondor_q\n and \ncondor_q -nobatch\n. Of course, your special attribute does not appear in the \ncondor_q -nobatch\n output, but it is present in the \ncondor_q\n output and in each job\u2019s ClassAd. You can see the effect of the attribute by limiting your \ncondor_q\n output to one type of job or another. First, run this command:\n\n\nusername@learn $\n condor_q -constraint \n'JobBatchName == \"1\"'\n\n\n\n\n\n\nDo you get the output that you expected? Using the example command above, how would you list your other five jobs?\n(More on constraints in other exercises later today.)",
            "title": "Exercise 2.2"
        },
        {
            "location": "/materials/day1/part2-ex2-queue-n/#monday-exercise-22-use-queue-n-cluster-and-process",
            "text": "The goal of the next several exercises is to learn to submit many jobs from a single  queue  statement, and then to control filenames and arguments per job.  Suppose you have a program that you want to run many times with different arguments each time. With what you know so far, you have a couple of choices:   Write one submit file; submit one job, change the argument in the submit file, submit another job, change the submit file, \u2026  Write many submit files that are nearly identical except for the program argument   Neither of these options seems very satisfying. Fortunately, we can do better with HTCondor.",
            "title": "Monday Exercise 2.2: Use queue N, $(Cluster), and $(Process)"
        },
        {
            "location": "/materials/day1/part2-ex2-queue-n/#running-many-jobs-with-one-queue-statement",
            "text": "Here is a C program that uses a simple stochastic (random) method to estimate the value of \u03c0\u00a0\u2014 feel free to try to figure out the method from the code, but it is not critical for this exercise. The single argument to the program is the number of samples to take. More samples should result in better estimates!  # include   < stdio . h > \n# include   < stdlib . h > \n# include   < sys / time . h >  int   main ( int   argc ,  char   * argv [] ) \n{\n   struct   timeval   my_timeval ; \n   int   iterations   =   0 ; \n   int   inside_circle   =   0 ; \n   int   i ; \n   double   x ,  y ,  pi_estimate ; \n\n   gettimeofday ( & my_timeval ,  NULL ) ; \n   srand48 ( my_timeval . tv_sec   ^   my_timeval . tv_usec ) ; \n\n   if   ( argc   ==   2 )  {\n     iterations   =   atoi ( argv [ 1 ] ) ; \n  }  else  {\n     printf ( \" usage: circlepi ITERATIONS \\n \" ) ; \n     exit ( 1 ) ; \n  }\n\n   for   ( i   =   0 ; i < iterations; i++) { \n     x   =   ( drand48 ()   -   0 . 5 )   *   2 . 0 ; \n     y   =   ( drand48 ()   -   0 . 5 )   *   2 . 0 ; \n     if   ((( x   *   x )   +   ( y   *   y ))   <=   1 . 0 )  {\n       inside_circle ++ ; \n    }\n  }\n   pi_estimate   =   4 . 0   *   (( double )   inside_circle   /   ( double )   iterations ) ; \n   printf ( \" %d iterations, %d inside; pi = %f \\n \" ,  iterations ,  inside_circle ,  pi_estimate ) ; \n   return   0 ; \n}   In a new directory for this exercise, save the code to a file named  circlepi.c   Compile the code (we will cover this in more detail Wednesday):  username@learn $  gcc -static -o circlepi circlepi.c    Test the program with just 1000 samples:  username@learn $  ./circlepi  1000     Now suppose that you want to run the program many times, to produce many estimates. This is exactly what a statement like  queue 3  is useful for. Let\u2019s see how it works:   Write a normal submit file for this program  Pass 1 million ( 1000000 ) as the command line argument to  circlepi  Remember to use  queue 3  instead of just  queue     Submit the file. Note the slightly different message from  condor_submit :  3 job(s) submitted to cluster *NNNN*.     Before the jobs execute, look at the job queue to see the multiple jobs    Here is some sample  condor_q -nobatch  output:   ID       OWNER            SUBMITTED     RUN_TIME ST PRI SIZE CMD  10228.0   cat             7/25 11:57   0+00:00:00 I  0    0.7 circlepi 1000000000  10228.1   cat             7/25 11:57   0+00:00:00 I  0    0.7 circlepi 1000000000  10228.2   cat             7/25 11:57   0+00:00:00 I  0    0.7 circlepi 1000000000   In this sample, all three jobs are part of  cluster   10228 , but the first job was assigned  process   0 , the second job was assigned process  1 , and the third one was assigned process  2 . (Historical note: Programmers like to start counting from 0, hence the odd numbering scheme.)  At this time, it is worth reviewing the definition of a  job ID . It is a job\u2019s cluster number, a dot ( . ), and the job\u2019s process number. So in the example above, the job ID of the second job is  10228.1 .  Pop Quiz:  Do you remember how to ask HTCondor to list all of the jobs from one cluster? How about one specific job ID?",
            "title": "Running Many Jobs With One queue Statement"
        },
        {
            "location": "/materials/day1/part2-ex2-queue-n/#using-queue-n-with-output",
            "text": "When all three jobs in your single cluster are finished, examine the resulting files.   What is in the output file?  What is in the error file (hopefully nothing)?  What is in the log file? Look carefully at the job IDs in each event.  Is this what you expected? Is it what you wanted?",
            "title": "Using queue N With Output"
        },
        {
            "location": "/materials/day1/part2-ex2-queue-n/#using-process-to-distinguish-jobs",
            "text": "As you saw with the experiment above, each job ended up overwriting the same output and error filenames in the submission directory.\nAfter all, we didn't tell it to behave any differently when it ran three jobs.\nWe need a way to separate output (and error) files  per job that is queued , not just for the whole cluster of jobs. Fortunately, HTCondor has a way to separate the files easily.  When processing a submit file, HTCondor will replace any instance of  $(Process)  with the process number of the job, for each job that is queued. \nFor example, you can use the  $(Process)  variable to define a separate output file name for each job:  output   =   my - output - file - $ ( Process ). out  queue   10   Even though the  output  filename is defined only once, HTCondor will create separate output filenames for each job:           First job  my-output-file-0.out    Second job  my-output-file-1.out    Third job  my-output-file-2.out    ...     Last (tenth) job  my-output-file-9.out     Let\u2019s see how this works for our program that estimates \u03c0.   In your submit file, change the definitions of  output  and  error  to use  $(Process)  in the filename, similar to the example above.  Delete any output, error, and log files from previous runs.  Submit the updated file.   When all three jobs are finished, examine the resulting files again.   How many files are there of each type? What are their names?  Is this what you expected? Is it what you wanted from the \u03c0 estimation process?",
            "title": "Using $(Process) to Distinguish Jobs"
        },
        {
            "location": "/materials/day1/part2-ex2-queue-n/#using-cluster-to-separate-files-across-runs",
            "text": "With  $(Process) , you can get separate output (and error) filenames for each job within a run. However, the next time you submit the same file, all of the output and error files are overwritten by new ones created by the new jobs. Maybe this is the behavior that you want. But sometimes, you may want to separate files by run, as well.  In addition to  $(Process) , there is also a  $(Cluster)  variable that you can use in your submit files. It works just like  $(Process) , except it is replaced with the cluster number of the entire submission. Because the cluster number is the same for all jobs within a single submission, it does not separate files by job within a submission. But when used  with   $(Process) , it can be used to separate files by run. For example, consider this  output  statement:  output   =   my - output - file - $ ( Cluster ) - $ ( Process ). out   For one particular run, it might result in output filenames like  my-output-file-2444-0.out ,  myoutput-file-2444-1.out ,  myoutput-file-2444-2.out , etc.  However, the next run would have different filenames, replacing  2444  with the new Cluster number of that run.",
            "title": "Using $(Cluster) to Separate Files Across Runs"
        },
        {
            "location": "/materials/day1/part2-ex2-queue-n/#using-process-and-cluster-in-other-statements",
            "text": "The  $(Cluster)  and  $(Process)  variables can be used in any submit file statement, although they are useful in some kinds of submit file statements and not really for others. For example, consider using $(Cluster) or $(Process) in each of the below:   log  transfer_input_files  transfer_output_files  arguments   Unfortunately, HTCondor does not easily let you perform math on the  $(Process)  number when using it. So, for example, if you use  $(Process)  as a numeric argument to a command, it will always result in jobs getting the arguments 0, 1, 2, and so on. If you have control over your program and the way in which it uses command-line arguments, then you are fine. Otherwise, you might need a solution like those in the next exercises.",
            "title": "Using $(Process) and $(Cluster) in Other Statements"
        },
        {
            "location": "/materials/day1/part2-ex2-queue-n/#optional-defining-jobbatchname-for-tracking",
            "text": "During the lecture, it was mentioned that you can define arbitrary attributes in your submit file, and that one purpose of such attributes is to track or report on different jobs separately. In this optional exercise, you will see how this technique can be used.  Once again, we will use  sleep  jobs, so that your jobs remain in the queue long enough to experiment on.   Create a basic submit file that runs  sleep 120  (or some reasonable duration).   Instead of a single  queue  statement, write this:  jobbatchname   =   1  queue   5     Submit the file.    Now, quickly edit the submit file to instead say:  jobbatchname   =   2     Submit the file again.    Check on the submissions using a normal  condor_q  and  condor_q -nobatch . Of course, your special attribute does not appear in the  condor_q -nobatch  output, but it is present in the  condor_q  output and in each job\u2019s ClassAd. You can see the effect of the attribute by limiting your  condor_q  output to one type of job or another. First, run this command:  username@learn $  condor_q -constraint  'JobBatchName == \"1\"'   Do you get the output that you expected? Using the example command above, how would you list your other five jobs?\n(More on constraints in other exercises later today.)",
            "title": "(Optional) Defining JobBatchName for Tracking"
        },
        {
            "location": "/materials/day1/part2-ex3-queue-matching/",
            "text": "pre em { font-style: normal; background-color: yellow; } pre strong { font-style: normal; font-weight: bold; color: \\#008; } \n\n\n\nMonday Exercise 2.3: Submit With \u201cqueue matching\u201d\n\u00b6\n\n\nIn this exercise and the next one, you will explore more ways to use a single submit file to submit many jobs. The focus of this exercise is to submit one job per filename that matches a given pattern.\n\n\nIn all cases of submitting many jobs from a single submit file, the key questions are:\n\n\n\n\nWhat makes each job unique? In other words, there is one job per _____?\n\n\nSo, how should you tell HTCondor to distinguish each job?\n\n\n\n\nFor \nqueue *N*\n, jobs are distinguished simply by the built-in \"process\" varialbe. But with the remaining \nqueue\n forms, you help HTCondor distinguish jobs by other, more meaningful \ncustom\n variables.\n\n\nCounting Words in Files\n\u00b6\n\n\nSuppose you have a collection of books, and you want to analyze how words vary from book to book or author to author. As mentioned in the lecture, HTCondor provides many ways to do this task. You could create a separate submit file for each book, and submit all of the files manually, but you'd have a lot of file lines to modify each time (in particular, all five of the last lines before \nqueue\n below):\n\n\nexecutable\n              \n=\n \nfreq\n.\npy\n\n\nrequest_memory\n          \n=\n \n20\nMB\n\n\nrequest_disk\n            \n=\n \n20\nMB\n\n\nshould_transfer_files\n   \n=\n \nYES\n\n\nwhen_to_transfer_output\n \n=\n \nON_EXIT\n\n\n\ntransfer_input_files\n \n=\n \nAAiW\n.\ntxt\n\n\narguments\n            \n=\n \nAAiW\n.\ntxt\n\n\noutput\n               \n=\n \nAAiW\n.\nout\n\n\nerror\n                \n=\n \nAAiW\n.\nerr\n\n\nlog\n                  \n=\n \nAAiW\n.\nlog\n\n\nqueue\n\n\n\n\n\n\nQueue Jobs By Matching Filenames\n\u00b6\n\n\nFor our analysis, we will have a new version of the word-frequency counting script. It takes a single command-line argument, which is the name of the input file containing the text of a book, and it outputs the frequency of each word from least to most common. There will be several book files, and the filename for each book ends with \n.txt\n.\n\n\nThis is an example of a common scenario: We want to run one job per file, where the filenames match a certain consistent pattern. The \nqueue ... matching\n statement is made for this scenario.\n\n\nLet\u2019s see this in action. First, here is the new version of the script:\n\n\n#!/usr/bin/env python\n\n\n\nimport\n \nos\n\n\nimport\n \nsys\n\n\nimport\n \noperator\n\n\n\nif\n \nlen\n(\nsys\n.\nargv\n)\n \n!=\n \n2\n:\n\n    \nprint\n \n'Usage: \n%s\n DATA'\n \n%\n \n(\nos\n.\npath\n.\nbasename\n(\nsys\n.\nargv\n[\n0\n]))\n\n    \nsys\n.\nexit\n(\n1\n)\n\n\ninput_filename\n \n=\n \nsys\n.\nargv\n[\n1\n]\n\n\n\nwords\n \n=\n \n{}\n\n\n\nmy_file\n \n=\n \nopen\n(\ninput_filename\n,\n \n'r'\n)\n\n\nfor\n \nline\n \nin\n \nmy_file\n:\n\n    \nline_words\n \n=\n \nline\n.\nsplit\n()\n\n    \nfor\n \nword\n \nin\n \nline_words\n:\n\n        \nif\n \nword\n \nin\n \nwords\n:\n\n            \nwords\n[\nword\n]\n \n+=\n \n1\n\n        \nelse\n:\n\n            \nwords\n[\nword\n]\n \n=\n \n1\n\n\nmy_file\n.\nclose\n()\n\n\n\nsorted_words\n \n=\n \nsorted\n(\nwords\n.\nitems\n(),\n \nkey\n=\noperator\n.\nitemgetter\n(\n1\n))\n\n\nfor\n \nword\n \nin\n \nsorted_words\n:\n\n    \nprint\n \n'\n%s\n \n%8d\n'\n \n%\n \n(\nword\n[\n0\n],\n \nword\n[\n1\n])\n\n\n\n\n\n\nTo use the script:\n\n\n\n\nSave it as \nwordcount.py\n.\n\n\n\n\nDownload and unpack some books from Project Gutenberg:\n\n\nusername@learn $\n wget http://proxy.chtc.wisc.edu/SQUID/osgschool18/books.zip\n\nusername@learn $\n unzip books.zip\n\n\n\n\n\n\n\n\n\nVerify the script by running it on one book manually.\n\n\n\n\nCreate a submit file to submit one job (pick a book file and model your submit file off of the one above), including memory and disk requests of 20\u00a0MB; submit it, if you like.\n\n\n\n\nModify the following submit file statements to work for all books:\n\n\ntransfer_input_files = $(BOOK) \narguments = $(book) \noutput = $(book).out \nerror = $(book).err \nqueue book matching *.txt\n\n\n\n\n\n\n\nNote\n\n\nAs always, the order of statements in a submit file does not matter, except that the \nqueue\n statement should be last. Also note that any submit file variable name (here, \nbook\n, but true for \nprocess\n and all others) may be used in any mixture of upper- and lowercase letters.\n\n\n\n\n\n\n\n\nSubmit the jobs.\n\n\n\n\n\n\nHTCondor uses the \nqueue ... matching\n statement to look for files in the submit directory that match the given pattern, then queues one job per match. For each job, the given variable (e.g., \nbook\n here) is assigned the name of the matching file, so that it can be used in \noutput\n, \nerror\n, and other statements.\n\n\nThe result is the same as if we had written out a much longer submit file:\n\n\n...\n\n\n\ntransfer_input_files\n \n=\n \nAAiW\n.\ntxt\n\n\narguments\n \n=\n \n\"AAiW.txt\"\n\n\noutput\n \n=\n \nAAiW\n.\ntxt\n.\nout\n\n\nerror\n \n=\n \nAAiW\n.\ntxt\n.\nerr\n\n\nqueue\n\n\n\ntransfer_input_files\n \n=\n \nPandP\n.\ntxt\n\n\narguments\n \n=\n \n\"PandP.txt\"\n\n\noutput\n \n=\n \nPandP\n.\ntxt\n.\nout\n\n\nerror\n \n=\n \nPandP\n.\ntxt\n.\nerr\n\n\nqueue\n\n\n\ntransfer_input_files\n \n=\n \nTAoSH\n.\ntxt\n\n\narguments\n \n=\n \n\"TAoSH.txt\"\n\n\noutput\n \n=\n \nTAoSH\n.\ntxt\n.\nout\n\n\nerror\n \n=\n \nTAoSH\n.\ntxt\n.\nerr\n\n\nqueue\n\n\n\n\n\n\nHere is some example \ncondor_q -nobatch\n output:\n\n\n ID      OWNER            SUBMITTED     RUN_TIME ST PRI SIZE CMD\n\n\n  89.0   iaross          7/17 11:41   0+00:00:00 I  0    0.0 wordcount.py AAiW.txt\n\n\n  89.1   iaross          7/17 11:41   0+00:00:00 I  0    0.0 wordcount.py PandP.txt\n\n\n  89.2   iaross          7/17 11:41   0+00:00:00 I  0    0.0 wordcount.py TAoSH.txt\n\n\n\n\n\n\nAll three jobs were part of cluster 89. The first filename that was matched in the queue statement resulted in a process ID of 0, the second match has a process ID of 1, and the third has a process ID of 2.\n\n\nWhen the three jobs finish, carefully look at the resulting files. Do they match your expectations? There should be a single log file, but three separate output files and three separate (and hopefully empty) error files, one for each job.\n\n\nExtra Challenge\n\u00b6\n\n\nIn the example above, you used a single log file for all three jobs. HTCondor handles this situation with no problem; each job writes its events into the log file without getting in the way of other events and other jobs. But as you may have seen, it may be difficult for a person to understand the events for any particular job in the combined log file.\n\n\nCreate a new submit file that works just like the one above, except that each job writes its own log file.",
            "title": "Exercise 2.3"
        },
        {
            "location": "/materials/day1/part2-ex3-queue-matching/#monday-exercise-23-submit-with-queue-matching",
            "text": "In this exercise and the next one, you will explore more ways to use a single submit file to submit many jobs. The focus of this exercise is to submit one job per filename that matches a given pattern.  In all cases of submitting many jobs from a single submit file, the key questions are:   What makes each job unique? In other words, there is one job per _____?  So, how should you tell HTCondor to distinguish each job?   For  queue *N* , jobs are distinguished simply by the built-in \"process\" varialbe. But with the remaining  queue  forms, you help HTCondor distinguish jobs by other, more meaningful  custom  variables.",
            "title": "Monday Exercise 2.3: Submit With \u201cqueue matching\u201d"
        },
        {
            "location": "/materials/day1/part2-ex3-queue-matching/#counting-words-in-files",
            "text": "Suppose you have a collection of books, and you want to analyze how words vary from book to book or author to author. As mentioned in the lecture, HTCondor provides many ways to do this task. You could create a separate submit file for each book, and submit all of the files manually, but you'd have a lot of file lines to modify each time (in particular, all five of the last lines before  queue  below):  executable                =   freq . py  request_memory            =   20 MB  request_disk              =   20 MB  should_transfer_files     =   YES  when_to_transfer_output   =   ON_EXIT  transfer_input_files   =   AAiW . txt  arguments              =   AAiW . txt  output                 =   AAiW . out  error                  =   AAiW . err  log                    =   AAiW . log  queue",
            "title": "Counting Words in Files"
        },
        {
            "location": "/materials/day1/part2-ex3-queue-matching/#queue-jobs-by-matching-filenames",
            "text": "For our analysis, we will have a new version of the word-frequency counting script. It takes a single command-line argument, which is the name of the input file containing the text of a book, and it outputs the frequency of each word from least to most common. There will be several book files, and the filename for each book ends with  .txt .  This is an example of a common scenario: We want to run one job per file, where the filenames match a certain consistent pattern. The  queue ... matching  statement is made for this scenario.  Let\u2019s see this in action. First, here is the new version of the script:  #!/usr/bin/env python  import   os  import   sys  import   operator  if   len ( sys . argv )   !=   2 : \n     print   'Usage:  %s  DATA'   %   ( os . path . basename ( sys . argv [ 0 ])) \n     sys . exit ( 1 )  input_filename   =   sys . argv [ 1 ]  words   =   {}  my_file   =   open ( input_filename ,   'r' )  for   line   in   my_file : \n     line_words   =   line . split () \n     for   word   in   line_words : \n         if   word   in   words : \n             words [ word ]   +=   1 \n         else : \n             words [ word ]   =   1  my_file . close ()  sorted_words   =   sorted ( words . items (),   key = operator . itemgetter ( 1 ))  for   word   in   sorted_words : \n     print   ' %s   %8d '   %   ( word [ 0 ],   word [ 1 ])   To use the script:   Save it as  wordcount.py .   Download and unpack some books from Project Gutenberg:  username@learn $  wget http://proxy.chtc.wisc.edu/SQUID/osgschool18/books.zip username@learn $  unzip books.zip    Verify the script by running it on one book manually.   Create a submit file to submit one job (pick a book file and model your submit file off of the one above), including memory and disk requests of 20\u00a0MB; submit it, if you like.   Modify the following submit file statements to work for all books:  transfer_input_files = $(BOOK) \narguments = $(book) \noutput = $(book).out \nerror = $(book).err \nqueue book matching *.txt   Note  As always, the order of statements in a submit file does not matter, except that the  queue  statement should be last. Also note that any submit file variable name (here,  book , but true for  process  and all others) may be used in any mixture of upper- and lowercase letters.     Submit the jobs.    HTCondor uses the  queue ... matching  statement to look for files in the submit directory that match the given pattern, then queues one job per match. For each job, the given variable (e.g.,  book  here) is assigned the name of the matching file, so that it can be used in  output ,  error , and other statements.  The result is the same as if we had written out a much longer submit file:  ...  transfer_input_files   =   AAiW . txt  arguments   =   \"AAiW.txt\"  output   =   AAiW . txt . out  error   =   AAiW . txt . err  queue  transfer_input_files   =   PandP . txt  arguments   =   \"PandP.txt\"  output   =   PandP . txt . out  error   =   PandP . txt . err  queue  transfer_input_files   =   TAoSH . txt  arguments   =   \"TAoSH.txt\"  output   =   TAoSH . txt . out  error   =   TAoSH . txt . err  queue   Here is some example  condor_q -nobatch  output:   ID      OWNER            SUBMITTED     RUN_TIME ST PRI SIZE CMD    89.0   iaross          7/17 11:41   0+00:00:00 I  0    0.0 wordcount.py AAiW.txt    89.1   iaross          7/17 11:41   0+00:00:00 I  0    0.0 wordcount.py PandP.txt    89.2   iaross          7/17 11:41   0+00:00:00 I  0    0.0 wordcount.py TAoSH.txt   All three jobs were part of cluster 89. The first filename that was matched in the queue statement resulted in a process ID of 0, the second match has a process ID of 1, and the third has a process ID of 2.  When the three jobs finish, carefully look at the resulting files. Do they match your expectations? There should be a single log file, but three separate output files and three separate (and hopefully empty) error files, one for each job.",
            "title": "Queue Jobs By Matching Filenames"
        },
        {
            "location": "/materials/day1/part2-ex3-queue-matching/#extra-challenge",
            "text": "In the example above, you used a single log file for all three jobs. HTCondor handles this situation with no problem; each job writes its events into the log file without getting in the way of other events and other jobs. But as you may have seen, it may be difficult for a person to understand the events for any particular job in the combined log file.  Create a new submit file that works just like the one above, except that each job writes its own log file.",
            "title": "Extra Challenge"
        },
        {
            "location": "/materials/day1/part2-ex4-queue-from/",
            "text": "pre em { font-style: normal; background-color: yellow; } pre strong { font-style: normal; font-weight: bold; color: \\#008; } \n\n\n\nMonday Exercise 2.4: Submit with \u201cqueue from\u201d\n\u00b6\n\n\nThe goal of this exercise is to submit many jobs from a single submit file by using the \nqueue ... from\n syntax to read variable values from a file.\n\n\nMore Job Submission Alternatives\n\u00b6\n\n\nIn the previous exercise, we used the \nqueue ... matching\n syntax, which is primarily useful for collections of files with similar names. But that method has its weaknesses, too. \nIt is less useful when the values for different job conditions are \nnot\n filenames, or if you have other filenames with a similar naming pattern that should \nnot\n be used for jobs.\n\n\nQueue Jobs From a List of Values\n\u00b6\n\n\nSuppose we want to modify our word-frequency analysis a little bit so that it outputs only the most common \nN\n words of a document. Further, we want to experiment with different values of \nN\n. And finally, even though we downloaded it, we no longer want to analyze the Sherlock Holmes stories in the \nTAoSH.txt\n file. Clearly, \nqueue ... matching\n will not help us in this case.\n\n\nFirst, we need a new version of the word counting program so that it accepts an extra number as a command line argument and outputs only that many of the most common words. Here is the new code (it's still not important that you understand this code):\n\n\n#!/usr/bin/env python\n\n\n\nimport\n \nos\n\n\nimport\n \nsys\n\n\nimport\n \noperator\n\n\n\nif\n \nlen\n(\nsys\n.\nargv\n)\n \n!=\n \n3\n:\n\n    \nprint\n \n'Usage: \n%s\n DATA NUM_WORDS'\n \n%\n \n(\nos\n.\npath\n.\nbasename\n(\nsys\n.\nargv\n[\n0\n]))\n\n    \nsys\n.\nexit\n(\n1\n)\n\n\ninput_filename\n \n=\n \nsys\n.\nargv\n[\n1\n]\n\n\nnum_words\n \n=\n \nint\n(\nsys\n.\nargv\n[\n2\n])\n\n\n\nwords\n \n=\n \n{}\n\n\n\nmy_file\n \n=\n \nopen\n(\ninput_filename\n,\n \n'r'\n)\n\n\nfor\n \nline\n \nin\n \nmy_file\n:\n\n    \nline_words\n \n=\n \nline\n.\nsplit\n()\n\n    \nfor\n \nword\n \nin\n \nline_words\n:\n\n        \nif\n \nword\n \nin\n \nwords\n:\n\n            \nwords\n[\nword\n]\n \n+=\n \n1\n\n        \nelse\n:\n\n            \nwords\n[\nword\n]\n \n=\n \n1\n\n\nmy_file\n.\nclose\n()\n\n\n\nsorted_words\n \n=\n \nsorted\n(\nwords\n.\nitems\n(),\n \nkey\n=\noperator\n.\nitemgetter\n(\n1\n))\n\n\nfor\n \nword\n \nin\n \nsorted_words\n[\n-\nnum_words\n:]:\n\n    \nprint\n \n'\n%s\n \n%8d\n'\n \n%\n \n(\nword\n[\n0\n],\n \nword\n[\n1\n])\n\n\n\n\n\n\nTo submit this program with a collection of two variable values for each run, one for the number of top words and one for the filename:\n\n\n\n\nIn the same directory as the last exercise, save the script as \nwordcount-top-n.py\n.\n\n\nCopy your submit file from the last exercise to a new name (maybe \nwordcount-top.sub\n).\n\n\nUpdate the \nexecutable\n and \nlog\n statements as appropriate.\n\n\n\n\nUpdate other statements to work with two variables, \nbook\n and \nn\n:\n\n\noutput\n \n=\n \n$\n(\nbook\n)\n_top_$\n(\nn\n).\nout\n \n\nerror\n \n=\n \n$\n(\nbook\n)\n_top_$\n(\nn\n).\nerr\n \n\ntransfer_input_files\n \n=\n \n$\n(\nbook\n)\n \n\narguments\n \n=\n \n\"$(book) $(n)\"\n \n\nqueue\n \nbook\n,\nn\n \nfrom\n \nbooks_n\n.\ntxt\n\n\n\n\n\n\nNote especially the changes to the \nqueue\n statement; it now tells HTCondor to read a separate text file of \npairs\n of values, which will be assigned to \nbook\n and \nn\n respectively.\n\n\n\n\n\n\nCreate the separate text file of job variable values and save it as \nbooks_n.txt\n:\n\n\nAAiW\n.\ntxt\n,\n \n10\n \n\nAAiW\n.\ntxt\n,\n \n25\n \n\nAAiW\n.\ntxt\n,\n \n50\n \n\nPandP\n.\ntxt\n,\n \n10\n \n\nPandP\n.\ntxt\n,\n \n25\n \n\nPandP\n.\ntxt\n,\n \n50\n\n\n\n\n\n\nNote that we used 3 different values for \nn\n for each book, and that we dropped the Sherlock Holmes book, \nTAoSH.txt\n.\n\n\n\n\n\n\nSubmit the file\n\n\n\n\nDo a quick sanity check: How many jobs were submitted? How many log, output, and error files were created?\n\n\n\n\nExtra Challenge 1\n\u00b6\n\n\nBetween this exercise and the previous one, you have explored two of the three primary \nqueue\n statements. How would you use the \nqueue in ... list\n statement to accomplish the same thing(s) as one or both of the exercises?\n\n\nExtra Challenge 2\n\u00b6\n\n\nYou may have noticed that the output of these jobs has a messy naming convention. Because our macros resolve to the filenames, including their extension (e.g., \nAAiW.txt\n), the output filenames contain with multiple extensions (e.g., \nAAiW.txt.err\n). Although the extra extension is acceptable, it makes the filenames harder to read and possibly organize. \nChange your submit file and variable file for this exercise so that the output filenames do not include the \n.txt\n extension.",
            "title": "Exercise 2.4"
        },
        {
            "location": "/materials/day1/part2-ex4-queue-from/#monday-exercise-24-submit-with-queue-from",
            "text": "The goal of this exercise is to submit many jobs from a single submit file by using the  queue ... from  syntax to read variable values from a file.",
            "title": "Monday Exercise 2.4: Submit with \u201cqueue from\u201d"
        },
        {
            "location": "/materials/day1/part2-ex4-queue-from/#more-job-submission-alternatives",
            "text": "In the previous exercise, we used the  queue ... matching  syntax, which is primarily useful for collections of files with similar names. But that method has its weaknesses, too. \nIt is less useful when the values for different job conditions are  not  filenames, or if you have other filenames with a similar naming pattern that should  not  be used for jobs.",
            "title": "More Job Submission Alternatives"
        },
        {
            "location": "/materials/day1/part2-ex4-queue-from/#queue-jobs-from-a-list-of-values",
            "text": "Suppose we want to modify our word-frequency analysis a little bit so that it outputs only the most common  N  words of a document. Further, we want to experiment with different values of  N . And finally, even though we downloaded it, we no longer want to analyze the Sherlock Holmes stories in the  TAoSH.txt  file. Clearly,  queue ... matching  will not help us in this case.  First, we need a new version of the word counting program so that it accepts an extra number as a command line argument and outputs only that many of the most common words. Here is the new code (it's still not important that you understand this code):  #!/usr/bin/env python  import   os  import   sys  import   operator  if   len ( sys . argv )   !=   3 : \n     print   'Usage:  %s  DATA NUM_WORDS'   %   ( os . path . basename ( sys . argv [ 0 ])) \n     sys . exit ( 1 )  input_filename   =   sys . argv [ 1 ]  num_words   =   int ( sys . argv [ 2 ])  words   =   {}  my_file   =   open ( input_filename ,   'r' )  for   line   in   my_file : \n     line_words   =   line . split () \n     for   word   in   line_words : \n         if   word   in   words : \n             words [ word ]   +=   1 \n         else : \n             words [ word ]   =   1  my_file . close ()  sorted_words   =   sorted ( words . items (),   key = operator . itemgetter ( 1 ))  for   word   in   sorted_words [ - num_words :]: \n     print   ' %s   %8d '   %   ( word [ 0 ],   word [ 1 ])   To submit this program with a collection of two variable values for each run, one for the number of top words and one for the filename:   In the same directory as the last exercise, save the script as  wordcount-top-n.py .  Copy your submit file from the last exercise to a new name (maybe  wordcount-top.sub ).  Update the  executable  and  log  statements as appropriate.   Update other statements to work with two variables,  book  and  n :  output   =   $ ( book ) _top_$ ( n ). out   error   =   $ ( book ) _top_$ ( n ). err   transfer_input_files   =   $ ( book )   arguments   =   \"$(book) $(n)\"   queue   book , n   from   books_n . txt   Note especially the changes to the  queue  statement; it now tells HTCondor to read a separate text file of  pairs  of values, which will be assigned to  book  and  n  respectively.    Create the separate text file of job variable values and save it as  books_n.txt :  AAiW . txt ,   10   AAiW . txt ,   25   AAiW . txt ,   50   PandP . txt ,   10   PandP . txt ,   25   PandP . txt ,   50   Note that we used 3 different values for  n  for each book, and that we dropped the Sherlock Holmes book,  TAoSH.txt .    Submit the file   Do a quick sanity check: How many jobs were submitted? How many log, output, and error files were created?",
            "title": "Queue Jobs From a List of Values"
        },
        {
            "location": "/materials/day1/part2-ex4-queue-from/#extra-challenge-1",
            "text": "Between this exercise and the previous one, you have explored two of the three primary  queue  statements. How would you use the  queue in ... list  statement to accomplish the same thing(s) as one or both of the exercises?",
            "title": "Extra Challenge 1"
        },
        {
            "location": "/materials/day1/part2-ex4-queue-from/#extra-challenge-2",
            "text": "You may have noticed that the output of these jobs has a messy naming convention. Because our macros resolve to the filenames, including their extension (e.g.,  AAiW.txt ), the output filenames contain with multiple extensions (e.g.,  AAiW.txt.err ). Although the extra extension is acceptable, it makes the filenames harder to read and possibly organize.  Change your submit file and variable file for this exercise so that the output filenames do not include the  .txt  extension.",
            "title": "Extra Challenge 2"
        },
        {
            "location": "/materials/day1/part3-ex1-queue/",
            "text": "pre em { font-style: normal; background-color: yellow; } pre strong { font-style: normal; font-weight: bold; color: \\#008; } \n\n\n\nMonday Exercise 3.1: Explore condor_q\n\u00b6\n\n\nThe goal of this exercise is try out some of the most common options to the \ncondor_q\n command, so that you can view jobs effectively.\n\n\nThe main part of this exercise should take just a few minutes, but if you have more time later, come back and work on the extension ideas at the end to become a \ncondor_q\n expert!\n\n\nSelecting Jobs\n\u00b6\n\n\nThe \ncondor_q\n program has many options for selecting which jobs are listed. You have already seen that the default mode (as of version 8.5) is to show only your jobs in \"batch\" mode:\n\n\nusername@learn $\n condor_q\n\n\n\n\n\nYou've seen that you can view all jobs (all users) in the submit node's queue by using the \n-all\n argument:\n\n\nusername@learn $\n condor_q -all\n\n\n\n\n\nAnd you've seen that you can view more details about queued jobs, with each separate job on a single line using the \n-nobatch\n option:\n\n\nusername@learn $\n condor_q -nobatch\n\nusername@learn $\n condor_q -all -nobatch\n\n\n\n\n\nDid you know you can also name one or more user IDs on the command line, in which case jobs for all of the named users are listed at once?\n\n\nusername@learn $\n condor_q \n<username1> <username2> <username3>\n\n\n\n\n\n\nThere are two other, simple selection criteria that you can use. To list just the jobs associated with a single cluster number:\n\n\nusername@learn $\n condor_q \n<CLUSTER>\n\n\n\n\n\n\nFor example, if you want to see the jobs in cluster 5678 (i.e., \n5678.0\n, \n5678.1\n, etc.), you use \ncondor_q 5678\n.\n\n\nTo list a specific job (i.e., cluster.process, as in 5678.0):\n\n\nusername@learn $\n condor_q \n<JOB.ID>\n\n\n\n\n\n\nFor example, to see job ID 5678.1, you use \ncondor_q 5678.1\n.\n\n\n\n\nNote\n\n\nYou can name more than one cluster, job ID, or combination thereof on the command line, in which case jobs for\n\nall\n of the named clusters and/or job IDs are listed.\n\n\n\n\nLet\u2019s get some practice using \ncondor_q\n selections!\n\n\n\n\nUsing a previous exercise, submit several \nsleep\n jobs.\n\n\nList all jobs in the queue \u2014 are there others besides your own?\n\n\nPractice using all forms of \ncondor_q\n that you have learned:\n\n\nList just your jobs, with and without batching.\n\n\nList a specific cluster.\n\n\nList a specific job ID.\n\n\nTry listing several users at once.\n\n\nTry listing several clusters and job IDs at once.\n\n\n\n\n\n\nWhen there are a variety of jobs in the queue, try combining a username and a different user's cluster or job ID in the same command \u2014 what happens?\n\n\n\n\nViewing a Job ClassAd\n\u00b6\n\n\nYou may have wondered why it is useful to be able to list a single job ID using \ncondor_q\n. By itself, it may not be that useful. But, in combination with another option, it is very useful!\n\n\nIf you add the \n-long\n option to \ncondor_q\n (or its short form, \n-l\n), it will show the complete ClassAd for each selected job, instead of the one-line summary that you have seen so far. Because job ClassAds may have 80\u201390 attributes (or more), it probably makes the most sense to show the ClassAd for a single job at a time. And you know how to show just one job! Here is what the command looks like:\n\n\nusername@learn $\n condor_q -long \n<JOB.ID>\n\n\n\n\n\n\nThe output from this command is long and complex. Most of the attributes that HTCondor adds to a job are arcane and uninteresting for us now. But here are some examples of common, interesting attributes taken directly from \ncondor_q\n output (except with some line breaks added to the \nRequirements\n attribute):\n\n\nMyType\n \n=\n \n\"Job\"\n\n\nErr\n \n=\n \n\"sleep.err\"\n\n\nUserLog\n \n=\n \n\"/home/cat/1-monday-2.1-queue/sleep.log\"\n\n\nJobUniverse\n \n=\n \n5\n\n\nRequirements\n \n=\n \n(\n \nIsOSGSchoolSlot\n \n=?=\n \ntrue\n \n)\n \n&&\n\n        \n(\n \nTARGET\n.\nArch\n \n==\n \n\"X86_64\"\n \n)\n \n&&\n\n        \n(\n \nTARGET\n.\nOpSys\n \n==\n \n\"LINUX\"\n \n)\n \n&&\n\n        \n(\n \nTARGET\n.\nDisk\n \n>=\n \nRequestDisk\n \n)\n \n&&\n\n        \n(\n \nTARGET\n.\nMemory\n \n>=\n \nRequestMemory\n \n)\n \n&&\n\n        \n(\n \nTARGET\n.\nHasFileTransfer\n \n)\n\n\nClusterId\n \n=\n \n2420\n\n\nWhenToTransferOutput\n \n=\n \n\"ON_EXIT\"\n\n\nOwner\n \n=\n \n\"cat\"\n\n\nCondorVersion\n \n=\n \n\"$CondorVersion: 8.5.5 May 03 2016 BuildID: 366162 $\"\n\n\nOut\n \n=\n \n\"sleep.out\"\n\n\nCmd\n \n=\n \n\"/bin/sleep\"\n\n\nArguments\n \n=\n \n\"120\"\n\n\n\n\n\n\n\n\nNote\n\n\nAttributes are listed in no particular order and may change from time to time.\nDo not assume anything about the order of attributes in \ncondor_q\n output.\n\n\n\n\nSee what you can find in a job ClassAd from your own job.\n\n\n\n\nUsing a previous exercise, submit a \nsleep\n job that sleeps for at least 3 minutes (180 seconds).\n\n\n\n\nBefore the job executes, capture its ClassAd and save to a file:\n\n\ncondor_q -l \n<JOB.ID>\n > classad-1.txt\n\n\n\n\n\n\n\n\n\n\nAfter the job starts execution but before it finishes, capture its ClassAd again and save to a file\n\n\ncondor_q -l \n<JOB.ID>\n > classad-2.txt\n\n\n\n\n\n\n\n\n\n\nNow examine each saved ClassAd file. Here are a few things to look for:\n\n\n\n\nCan you find attributes that came from your submit file? (E.g., JobUniverse, Cmd, Arguments, Out, Err, UserLog, and so forth)\n\n\nCan you find attributes that could have come from your submit file, but that HTCondor added for you? (E.g., Requirements)\n\n\nHow many of the following attributes can you guess the meaning of?\n\n\nDiskUsage\n\n\nImageSize\n\n\nBytesSent\n\n\nJobStatus\n\n\n\n\n\n\n\n\nWhy Is My Job Not Running?\n\u00b6\n\n\nSometimes, you submit a job and it just sits in the queue in Idle state, never running. It can be difficult to figure out why a job never matches and runs. Fortunately, HTCondor can give you some help.\n\n\nTo ask HTCondor why your job is not running, add the \n-better-analyze\n option to \ncondor_q\n for the specific job. For example, for job ID 2423.0, the command is:\n\n\nusername@learn $\n condor_q -better-analyze \n2423\n.0\n\n\n\n\n\nOf course, replace the job ID with your own.\n\n\nLet\u2019s submit a job that will never run and see what happens. Here is the submit file to use:\n\n\nexecutable\n \n=\n \n/\nbin\n/\nhostname\n\n\noutput\n \n=\n \nnorun\n.\nout\n\n\nerror\n \n=\n \nnorun\n.\nerr\n\n\nlog\n \n=\n \nnorun\n.\nlog\n\n\nshould_transfer_files\n \n=\n \nYES\n\n\nwhen_to_transfer_output\n \n=\n \nON_EXIT\n\n\nrequest_memory\n \n=\n \n8\nTB\n\n\nqueue\n\n\n\n\n\n\n(Do you see what I did?)\n\n\n\n\nSave and submit this file.\n\n\nRun \ncondor_q -analyze\n on the job ID.\n\n\n\n\nThere is a lot of output, but a few items are worth highlighting. Here is a sample from my own job (with many lines left out):\n\n\n--\n \nSubmitter\n: \nlearn\n.\nchtc\n.\nwisc\n.\nedu\n : ....\n...\n\n---\n\n\n2423\n.\n000\n:  \nRun\n \nanalysis\n \nsummary\n.  \nOf\n \n12388\n \nmachines\n,\n   \n12388\n \nare\n \nrejected\n \nby\n \nyour\n \njob\n'\ns requirements \n\n...\n\nWARNING\n:  \nBe\n \nadvised\n:\n   \nNo\n \nresources\n \nmatched\n \nrequest\n'\ns constraints\n\n\n\nThe\n \nRequirements\n \nexpression\n \nfor\n \nyour\n \njob\n \nis\n:\n...\n\n\nSuggestions\n:\n\n    \nCondition\n                         \nMachines\n \nMatched\n    \nSuggestion\n\n    \n---------\n                         \n----------------\n    \n----------\n\n\n1\n   \n(\n \nTARGET\n.\nMemory\n \n>=\n \n8388608\n \n)\n      \n0\n                   \nMODIFY\n \nTO\n \n1000064\n\n\n2\n   \n(\n ... \n)\n\n                                      \n12145\n                \n\n3\n   \n(\n \nTARGET\n.\nArch\n \n==\n \n\"\nX86_64\n\"\n \n)\n       \n12388\n                \n\n4\n   \n(\n \nTARGET\n.\nOpSys\n \n==\n \n\"\nLINUX\n\"\n \n)\n       \n12386\n                \n\n5\n   \n(\n \nTARGET\n.\nDisk\n \n>=\n \n20\n \n)\n             \n12387\n                \n\n6\n   \n(\n \nTARGET\n.\nHasFileTransfer\n \n)\n        \n12388\n                \n\n\n\n\n\nToward the top, \ncondor_q\n said that it considered 12388 \u201cmachines\u201d (really, slots) and \nall\n 12388 of them were rejected by \nmy job\u2019s requirements\n. In other words, I am asking for something that is not available. But what?\n\n\nThe real clue comes from the breakdown of the Requirements expression, at the end of the output. \nNote the highlighted line: My job asked for \n8 terabytes\n of memory (8,388,608 MB) and \nno\n machines matched that part of the expression. \nWell, of course! 8 TB is a lot of memory on today\u2019s machines. \nAnd finally, note the suggestion: If I reduce my memory request to 1,000,064 MB (about 1 TB), there will be at least one slot in the pool that will match that expression.\n\n\nThe output from \ncondor_q -analyze\n (and \ncondor_q -better-analyze\n) may be helpful or it may not be, depending on your exact case. The example above was constructed so that it would be obvious what the problem was. But in many cases, this is a good place to start looking if you are having problems matching.\n\n\nBonus: Automatic Formatting Output\n\u00b6\n\n\nDo this exercise only if you have time, though it's pretty awesome!\n\n\nThere is a way to select the specific job attributes you want \ncondor_q\n to tell you about with the \n-autoformat\n or \n-af\n option. In this case, HTCondor decides for you how to format the data you ask for from job ClassAd(s). \n(To tell HTCondor how to specially format this information, yourself, you could use the \n-format\n option, which we're not covering.)\n\n\nTo use autoformatting, use the \n-af\n option followed by the attribute name, for each attribute that you want to output:\n\n\nusername@learn $\n condor_q -af Owner ClusterId Cmd\n\nmoate 2418 /share/test.sh\n\n\ncat 2421 /bin/sleep\n\n\ncat 2422 /bin/sleep\n\n\n\n\n\n\nBonus Question\n: If you wanted to print out the \nRequirements\n expression of a job, how would you do that with \n-af\n? Is the output what you expected? (HINT: for ClassAd attributes like \"Requirements\" that are long expressions, instead of simple values, you can use \n-af:r\n to view the expressions, instead of what it's current evaluation.)\n\n\nReferences\n\u00b6\n\n\nAs suggested above, if you want to learn more about \ncondor_q\n, you can do some reading:\n\n\n\n\nRead the \ncondor_q\n man page or HTCondor Manual section (same text) to learn about more options\n\n\nRead about ClassAd attributes in Appendix A of the HTCondor Manual",
            "title": "Exercise 3.1"
        },
        {
            "location": "/materials/day1/part3-ex1-queue/#monday-exercise-31-explore-condor_q",
            "text": "The goal of this exercise is try out some of the most common options to the  condor_q  command, so that you can view jobs effectively.  The main part of this exercise should take just a few minutes, but if you have more time later, come back and work on the extension ideas at the end to become a  condor_q  expert!",
            "title": "Monday Exercise 3.1: Explore condor_q"
        },
        {
            "location": "/materials/day1/part3-ex1-queue/#selecting-jobs",
            "text": "The  condor_q  program has many options for selecting which jobs are listed. You have already seen that the default mode (as of version 8.5) is to show only your jobs in \"batch\" mode:  username@learn $  condor_q  You've seen that you can view all jobs (all users) in the submit node's queue by using the  -all  argument:  username@learn $  condor_q -all  And you've seen that you can view more details about queued jobs, with each separate job on a single line using the  -nobatch  option:  username@learn $  condor_q -nobatch username@learn $  condor_q -all -nobatch  Did you know you can also name one or more user IDs on the command line, in which case jobs for all of the named users are listed at once?  username@learn $  condor_q  <username1> <username2> <username3>   There are two other, simple selection criteria that you can use. To list just the jobs associated with a single cluster number:  username@learn $  condor_q  <CLUSTER>   For example, if you want to see the jobs in cluster 5678 (i.e.,  5678.0 ,  5678.1 , etc.), you use  condor_q 5678 .  To list a specific job (i.e., cluster.process, as in 5678.0):  username@learn $  condor_q  <JOB.ID>   For example, to see job ID 5678.1, you use  condor_q 5678.1 .   Note  You can name more than one cluster, job ID, or combination thereof on the command line, in which case jobs for all  of the named clusters and/or job IDs are listed.   Let\u2019s get some practice using  condor_q  selections!   Using a previous exercise, submit several  sleep  jobs.  List all jobs in the queue \u2014 are there others besides your own?  Practice using all forms of  condor_q  that you have learned:  List just your jobs, with and without batching.  List a specific cluster.  List a specific job ID.  Try listing several users at once.  Try listing several clusters and job IDs at once.    When there are a variety of jobs in the queue, try combining a username and a different user's cluster or job ID in the same command \u2014 what happens?",
            "title": "Selecting Jobs"
        },
        {
            "location": "/materials/day1/part3-ex1-queue/#viewing-a-job-classad",
            "text": "You may have wondered why it is useful to be able to list a single job ID using  condor_q . By itself, it may not be that useful. But, in combination with another option, it is very useful!  If you add the  -long  option to  condor_q  (or its short form,  -l ), it will show the complete ClassAd for each selected job, instead of the one-line summary that you have seen so far. Because job ClassAds may have 80\u201390 attributes (or more), it probably makes the most sense to show the ClassAd for a single job at a time. And you know how to show just one job! Here is what the command looks like:  username@learn $  condor_q -long  <JOB.ID>   The output from this command is long and complex. Most of the attributes that HTCondor adds to a job are arcane and uninteresting for us now. But here are some examples of common, interesting attributes taken directly from  condor_q  output (except with some line breaks added to the  Requirements  attribute):  MyType   =   \"Job\"  Err   =   \"sleep.err\"  UserLog   =   \"/home/cat/1-monday-2.1-queue/sleep.log\"  JobUniverse   =   5  Requirements   =   (   IsOSGSchoolSlot   =?=   true   )   && \n         (   TARGET . Arch   ==   \"X86_64\"   )   && \n         (   TARGET . OpSys   ==   \"LINUX\"   )   && \n         (   TARGET . Disk   >=   RequestDisk   )   && \n         (   TARGET . Memory   >=   RequestMemory   )   && \n         (   TARGET . HasFileTransfer   )  ClusterId   =   2420  WhenToTransferOutput   =   \"ON_EXIT\"  Owner   =   \"cat\"  CondorVersion   =   \"$CondorVersion: 8.5.5 May 03 2016 BuildID: 366162 $\"  Out   =   \"sleep.out\"  Cmd   =   \"/bin/sleep\"  Arguments   =   \"120\"    Note  Attributes are listed in no particular order and may change from time to time.\nDo not assume anything about the order of attributes in  condor_q  output.   See what you can find in a job ClassAd from your own job.   Using a previous exercise, submit a  sleep  job that sleeps for at least 3 minutes (180 seconds).   Before the job executes, capture its ClassAd and save to a file:  condor_q -l  <JOB.ID>  > classad-1.txt     After the job starts execution but before it finishes, capture its ClassAd again and save to a file  condor_q -l  <JOB.ID>  > classad-2.txt     Now examine each saved ClassAd file. Here are a few things to look for:   Can you find attributes that came from your submit file? (E.g., JobUniverse, Cmd, Arguments, Out, Err, UserLog, and so forth)  Can you find attributes that could have come from your submit file, but that HTCondor added for you? (E.g., Requirements)  How many of the following attributes can you guess the meaning of?  DiskUsage  ImageSize  BytesSent  JobStatus",
            "title": "Viewing a Job ClassAd"
        },
        {
            "location": "/materials/day1/part3-ex1-queue/#why-is-my-job-not-running",
            "text": "Sometimes, you submit a job and it just sits in the queue in Idle state, never running. It can be difficult to figure out why a job never matches and runs. Fortunately, HTCondor can give you some help.  To ask HTCondor why your job is not running, add the  -better-analyze  option to  condor_q  for the specific job. For example, for job ID 2423.0, the command is:  username@learn $  condor_q -better-analyze  2423 .0  Of course, replace the job ID with your own.  Let\u2019s submit a job that will never run and see what happens. Here is the submit file to use:  executable   =   / bin / hostname  output   =   norun . out  error   =   norun . err  log   =   norun . log  should_transfer_files   =   YES  when_to_transfer_output   =   ON_EXIT  request_memory   =   8 TB  queue   (Do you see what I did?)   Save and submit this file.  Run  condor_q -analyze  on the job ID.   There is a lot of output, but a few items are worth highlighting. Here is a sample from my own job (with many lines left out):  --   Submitter :  learn . chtc . wisc . edu  : ....\n... ---  2423 . 000 :   Run   analysis   summary .   Of   12388   machines ,\n    12388   are   rejected   by   your   job ' s requirements  \n... WARNING :   Be   advised :\n    No   resources   matched   request ' s constraints  The   Requirements   expression   for   your   job   is :\n... Suggestions :\n\n     Condition                           Machines   Matched      Suggestion \n     ---------                           ----------------      ----------  1     (   TARGET . Memory   >=   8388608   )        0                     MODIFY   TO   1000064  2     (  ...  ) \n                                       12145                  3     (   TARGET . Arch   ==   \" X86_64 \"   )         12388                  4     (   TARGET . OpSys   ==   \" LINUX \"   )         12386                  5     (   TARGET . Disk   >=   20   )               12387                  6     (   TARGET . HasFileTransfer   )          12388                   Toward the top,  condor_q  said that it considered 12388 \u201cmachines\u201d (really, slots) and  all  12388 of them were rejected by  my job\u2019s requirements . In other words, I am asking for something that is not available. But what?  The real clue comes from the breakdown of the Requirements expression, at the end of the output. \nNote the highlighted line: My job asked for  8 terabytes  of memory (8,388,608 MB) and  no  machines matched that part of the expression. \nWell, of course! 8 TB is a lot of memory on today\u2019s machines. \nAnd finally, note the suggestion: If I reduce my memory request to 1,000,064 MB (about 1 TB), there will be at least one slot in the pool that will match that expression.  The output from  condor_q -analyze  (and  condor_q -better-analyze ) may be helpful or it may not be, depending on your exact case. The example above was constructed so that it would be obvious what the problem was. But in many cases, this is a good place to start looking if you are having problems matching.",
            "title": "Why Is My Job Not Running?"
        },
        {
            "location": "/materials/day1/part3-ex1-queue/#bonus-automatic-formatting-output",
            "text": "Do this exercise only if you have time, though it's pretty awesome!  There is a way to select the specific job attributes you want  condor_q  to tell you about with the  -autoformat  or  -af  option. In this case, HTCondor decides for you how to format the data you ask for from job ClassAd(s). \n(To tell HTCondor how to specially format this information, yourself, you could use the  -format  option, which we're not covering.)  To use autoformatting, use the  -af  option followed by the attribute name, for each attribute that you want to output:  username@learn $  condor_q -af Owner ClusterId Cmd moate 2418 /share/test.sh  cat 2421 /bin/sleep  cat 2422 /bin/sleep   Bonus Question : If you wanted to print out the  Requirements  expression of a job, how would you do that with  -af ? Is the output what you expected? (HINT: for ClassAd attributes like \"Requirements\" that are long expressions, instead of simple values, you can use  -af:r  to view the expressions, instead of what it's current evaluation.)",
            "title": "Bonus: Automatic Formatting Output"
        },
        {
            "location": "/materials/day1/part3-ex1-queue/#references",
            "text": "As suggested above, if you want to learn more about  condor_q , you can do some reading:   Read the  condor_q  man page or HTCondor Manual section (same text) to learn about more options  Read about ClassAd attributes in Appendix A of the HTCondor Manual",
            "title": "References"
        },
        {
            "location": "/materials/day1/part3-ex2-status/",
            "text": "pre em { font-style: normal; background-color: yellow; } pre strong { font-style: normal; font-weight: bold; color: \\#008; } \n\n\n\nMonday Exercise 3.2: Explore condor_status\n\u00b6\n\n\nThe goal of this exercise is try out some of the most common options to the \ncondor_status\n command, so that you can view slots effectively.\n\n\nThe main part of this exercise should take just a few minutes, but if you have more time later, come back and work on the extension ideas at the end to become a \ncondor_status\n expert!\n\n\nSelecting Slots\n\u00b6\n\n\nThe \ncondor_status\n program has many options for selecting which slots are listed. You've already learned the basic \ncondor_status\n and the \ncondor_status -compact\n variation (which you may wish to retry now, before proceeding).\n\n\nAnother convenient option is to list only those slots that are available now:\n\n\nusername@learn $\n condor_status -avail\n\n\n\n\n\nOf course, the individual execute machines only report their slots to the collector at certain time intervals, so this list will not reflect the up-to-the-second reality of all slots. But this limitation is true of all \ncondor_status\n output, not just with the \n-avail\n option.\n\n\nSimilar to \ncondor_q\n, you can limit the slots that are listed in two easy ways. To list just the slots on a specific machine:\n\n\nusername@learn $\n condor_status \n<hostname>\n\n\n\n\n\n\nFor example, if you want to see the slots on \ne242.chtc.wisc.edu\n (in the CHTC pool):\n\n\nusername@learn $\n condor_status e242.chtc.wisc.edu\n\n\n\n\n\nTo list a specific slot on a machine:\n\n\nusername@learn $\n condor_status \n<slot>\n@\n<hostname>\n\n\n\n\n\n\nFor example, to see the \u201cfirst\u201d slot on the machine above:\n\n\nusername@learn $\n condor_status slot1@e242.chtc.wisc.edu\n\n\n\n\n\n\n\nNote\n\n\nYou can name more than one hostname, slot, or combination thereof on the command line, in which case slots for\n\nall\n of the named hostnames and/or slots are listed.\n\n\n\n\nLet\u2019s get some practice using \ncondor_status\n selections!\n\n\n\n\nList all slots in the pool \u2014 how many are there total?\n\n\nPractice using all forms of \ncondor_status\n that you have learned:\n\n\nList the available slots.\n\n\nList the slots on a specific machine (e.g., \ne242.chtc.wisc.edu\n).\n\n\nList a specific slot from that machine.\n\n\nTry listing the slots from a few (but not all) machines at once.\n\n\nTry using a mix of hostnames and slot IDs at once.\n\n\n\n\n\n\n\n\nViewing a Slot ClassAd\n\u00b6\n\n\nJust as with \ncondor_q\n, you can use \ncondor_status\n to view the complete ClassAd for a given slot (often confusingly called the \u201cmachine\u201d ad):\n\n\nusername@learn $\n condor_status -long \n<slot>\n@\n<hostname>\n\n\n\n\n\n\nBecause slot ClassAds may have 150\u2013200 attributes (or more), it probably makes the most sense to show the ClassAd for a single slot at a time, as shown above.\n\n\nHere are some examples of common, interesting attributes taken directly from \ncondor_status\n output:\n\n\nOpSys\n \n=\n \n\"LINUX\"\n\n\nDetectedCpus\n \n=\n \n24\n\n\nOpSysAndVer\n \n=\n \n\"SL6\"\n\n\nMyType\n \n=\n \n\"Machine\"\n\n\nLoadAvg\n \n=\n \n0\n.\n99\n\n\nTotalDisk\n \n=\n \n798098404\n\n\nOSIssue\n \n=\n \n\"Scientific Linux release 6.6 (Carbon)\"\n\n\nTotalMemory\n \n=\n \n24016\n\n\nMachine\n \n=\n \n\"e242.chtc.wisc.edu\"\n\n\nCondorVersion\n \n=\n \n\"$CondorVersion: 8.5.5 May 03 2016 BuildID: 366162 $\"\n\n\nMemory\n \n=\n \n1024\n\n\n\n\n\n\nAs you may be able to tell, there is a mix of attributes about the machine as a whole (hence the name \u201cmachine ad\u201d) and about the slot in particular.\n\n\nGo ahead and examine a machine ClassAd now. I suggest looking at one of the slots on, say, \nc010.chtc.wisc.edu\n because of its relatively simple configuration.\n\n\nViewing Slots by ClassAd Expression\n\u00b6\n\n\nOften, it is helpful to view slots that meet some particular criteria. For example, if you know that your job needs a lot of memory to run, you may want to see how many high-memory slots there are and whether they are busy. You can filter the list of slots like this using the \n-constraint\n option and a ClassAd expression.\n\n\nFor example, suppose we want to list all slots that are running Scientific Linux 6 (operating system) and have at least 16 GB memory available. Note that memory is reported in units of Megabytes. The command is:\n\n\nusername@learn $\n condor_status -constraint \n'OpSysAndVer == \"CentOS7\" && Memory >= 200000'\n\n\n\n\n\n\n\n\nNote\n\n\nBe very careful with using quote characters appropriately in these commands.\nIn the example above, the single quotes (\n'\n) are for the shell, so that the entire expression is passed to\n\ncondor_status\n untouched, and the double quotes (\n\"\n) surround a string value within the expression itself.\n\n\n\n\nCurrently on CHTC, there are only a few slots that meet these criteria (our high-memory servers, mainly used for metagenomics assemblies).\n\n\nIf you are interested in learning more about writing ClassAd expressions, look at section 4.1 and especially 4.1.4 of the HTCondor Manual. This is definitely advanced material, so if you do not want to read it, that is fine. But if you do, take some time to practice writing expressions for the \ncondor_status -constraint\n command.\n\n\n\n\nNote\n\n\nThe \ncondor_q\n command accepts the \n-constraint\n option as well!\nAs you might expect, the option allows you to limit the jobs that are listed based on a ClassAd expression.\n\n\n\n\nBonus: Formatting Output\n\u00b6\n\n\nThe \ncondor_status\n command accepts the same \n-autoformat\n (\n-af\n) options that \ncondor_q\n accepts, and the options have the same meanings in both commands. Of course, the attributes available in machine ads may differ from the ones that are available in job ads. Use the HTCondor Manual or look at individual slot ClassAds to get a better idea of what attributes are available.\n\n\nFor example, I was curious about the Windows slots listed in the \ncondor_status\n summary output. Here are two commands that show the full hostnames and major version information for the Windows slots:\n\n\nusername@learn $\n condor_status -af Machine -af OpSysAndVer -constraint \n'OpSys == \"WINDOWS\"'\n\n\n\n\n\n\nIf you like, spend a few minutes now or later experimenting with \ncondor_status\n formatting.\n\n\nReferences\n\u00b6\n\n\nAs suggested above, if you want to learn more about \ncondor_q\n, you can do some reading:\n\n\n\n\nRead the \ncondor_status\n man page or HTCondor Manual section (same text) to learn about more options\n\n\nRead about ClassAd attributes in Appendix A of the HTCondor Manual\n\n\nRead about ClassAd expressions in section 4.1.4 of the HTCondor Manual",
            "title": "Exercise 3.2"
        },
        {
            "location": "/materials/day1/part3-ex2-status/#monday-exercise-32-explore-condor_status",
            "text": "The goal of this exercise is try out some of the most common options to the  condor_status  command, so that you can view slots effectively.  The main part of this exercise should take just a few minutes, but if you have more time later, come back and work on the extension ideas at the end to become a  condor_status  expert!",
            "title": "Monday Exercise 3.2: Explore condor_status"
        },
        {
            "location": "/materials/day1/part3-ex2-status/#selecting-slots",
            "text": "The  condor_status  program has many options for selecting which slots are listed. You've already learned the basic  condor_status  and the  condor_status -compact  variation (which you may wish to retry now, before proceeding).  Another convenient option is to list only those slots that are available now:  username@learn $  condor_status -avail  Of course, the individual execute machines only report their slots to the collector at certain time intervals, so this list will not reflect the up-to-the-second reality of all slots. But this limitation is true of all  condor_status  output, not just with the  -avail  option.  Similar to  condor_q , you can limit the slots that are listed in two easy ways. To list just the slots on a specific machine:  username@learn $  condor_status  <hostname>   For example, if you want to see the slots on  e242.chtc.wisc.edu  (in the CHTC pool):  username@learn $  condor_status e242.chtc.wisc.edu  To list a specific slot on a machine:  username@learn $  condor_status  <slot> @ <hostname>   For example, to see the \u201cfirst\u201d slot on the machine above:  username@learn $  condor_status slot1@e242.chtc.wisc.edu   Note  You can name more than one hostname, slot, or combination thereof on the command line, in which case slots for all  of the named hostnames and/or slots are listed.   Let\u2019s get some practice using  condor_status  selections!   List all slots in the pool \u2014 how many are there total?  Practice using all forms of  condor_status  that you have learned:  List the available slots.  List the slots on a specific machine (e.g.,  e242.chtc.wisc.edu ).  List a specific slot from that machine.  Try listing the slots from a few (but not all) machines at once.  Try using a mix of hostnames and slot IDs at once.",
            "title": "Selecting Slots"
        },
        {
            "location": "/materials/day1/part3-ex2-status/#viewing-a-slot-classad",
            "text": "Just as with  condor_q , you can use  condor_status  to view the complete ClassAd for a given slot (often confusingly called the \u201cmachine\u201d ad):  username@learn $  condor_status -long  <slot> @ <hostname>   Because slot ClassAds may have 150\u2013200 attributes (or more), it probably makes the most sense to show the ClassAd for a single slot at a time, as shown above.  Here are some examples of common, interesting attributes taken directly from  condor_status  output:  OpSys   =   \"LINUX\"  DetectedCpus   =   24  OpSysAndVer   =   \"SL6\"  MyType   =   \"Machine\"  LoadAvg   =   0 . 99  TotalDisk   =   798098404  OSIssue   =   \"Scientific Linux release 6.6 (Carbon)\"  TotalMemory   =   24016  Machine   =   \"e242.chtc.wisc.edu\"  CondorVersion   =   \"$CondorVersion: 8.5.5 May 03 2016 BuildID: 366162 $\"  Memory   =   1024   As you may be able to tell, there is a mix of attributes about the machine as a whole (hence the name \u201cmachine ad\u201d) and about the slot in particular.  Go ahead and examine a machine ClassAd now. I suggest looking at one of the slots on, say,  c010.chtc.wisc.edu  because of its relatively simple configuration.",
            "title": "Viewing a Slot ClassAd"
        },
        {
            "location": "/materials/day1/part3-ex2-status/#viewing-slots-by-classad-expression",
            "text": "Often, it is helpful to view slots that meet some particular criteria. For example, if you know that your job needs a lot of memory to run, you may want to see how many high-memory slots there are and whether they are busy. You can filter the list of slots like this using the  -constraint  option and a ClassAd expression.  For example, suppose we want to list all slots that are running Scientific Linux 6 (operating system) and have at least 16 GB memory available. Note that memory is reported in units of Megabytes. The command is:  username@learn $  condor_status -constraint  'OpSysAndVer == \"CentOS7\" && Memory >= 200000'    Note  Be very careful with using quote characters appropriately in these commands.\nIn the example above, the single quotes ( ' ) are for the shell, so that the entire expression is passed to condor_status  untouched, and the double quotes ( \" ) surround a string value within the expression itself.   Currently on CHTC, there are only a few slots that meet these criteria (our high-memory servers, mainly used for metagenomics assemblies).  If you are interested in learning more about writing ClassAd expressions, look at section 4.1 and especially 4.1.4 of the HTCondor Manual. This is definitely advanced material, so if you do not want to read it, that is fine. But if you do, take some time to practice writing expressions for the  condor_status -constraint  command.   Note  The  condor_q  command accepts the  -constraint  option as well!\nAs you might expect, the option allows you to limit the jobs that are listed based on a ClassAd expression.",
            "title": "Viewing Slots by ClassAd Expression"
        },
        {
            "location": "/materials/day1/part3-ex2-status/#bonus-formatting-output",
            "text": "The  condor_status  command accepts the same  -autoformat  ( -af ) options that  condor_q  accepts, and the options have the same meanings in both commands. Of course, the attributes available in machine ads may differ from the ones that are available in job ads. Use the HTCondor Manual or look at individual slot ClassAds to get a better idea of what attributes are available.  For example, I was curious about the Windows slots listed in the  condor_status  summary output. Here are two commands that show the full hostnames and major version information for the Windows slots:  username@learn $  condor_status -af Machine -af OpSysAndVer -constraint  'OpSys == \"WINDOWS\"'   If you like, spend a few minutes now or later experimenting with  condor_status  formatting.",
            "title": "Bonus: Formatting Output"
        },
        {
            "location": "/materials/day1/part3-ex2-status/#references",
            "text": "As suggested above, if you want to learn more about  condor_q , you can do some reading:   Read the  condor_status  man page or HTCondor Manual section (same text) to learn about more options  Read about ClassAd attributes in Appendix A of the HTCondor Manual  Read about ClassAd expressions in section 4.1.4 of the HTCondor Manual",
            "title": "References"
        },
        {
            "location": "/materials/day1/part3-ex3-job-retry/",
            "text": "pre em { font-style: normal; background-color: yellow; } pre strong { font-style: normal; font-weight: bold; color: \\#008; } \n\n\n\nMonday Exercise 3.3: Retries\n\u00b6\n\n\nThe goal of this exercise is to demonstrate running a job that intermittently fails and thus could benefit from having HTCondor automatically retry it.\n\n\nThis first part of the exercise should take only a few minutes, and is designed to setup the next exercises.\n\n\nBad Job\n\u00b6\n\n\nLet\u2019s assume that a colleague has shared with you a program, and it fails once in a while. In the real world, we would probably just fix the program, but what if you cannot change the software? Unfortunately, this situation happens more often than we would like.\n\n\nBelow is a simple Python script that fails once in a while. We will not fix it, but use it to simulate a program that can fail and that we \ncannot\n fix.\n\n\n#!/usr/bin/env python\n\n\n\n# murphy.py simulates a real program with real problems\n\n\nimport\n \nrandom\n\n\nimport\n \nsys\n\n\nimport\n \ntime\n\n\n\n# Create a random number seeded by system entropy\n\n\nr\n \n=\n \nrandom\n.\nSystemRandom\n()\n\n\n\n# One time in three, simulate a runtime error\n\n\nif\n \n(\nr\n.\nrandint\n(\n0\n,\n2\n)\n \n==\n \n0\n):\n\n    \n# intentionally print no output\n\n    \nsys\n.\nexit\n(\n15\n)\n\n\nelse\n:\n\n    \ntime\n.\nsleep\n(\n3\n)\n\n    \nprint\n \n\"All work done correctly\"\n\n\n\n# By convention, zero exit code means success\n\n\nsys\n.\nexit\n(\n0\n)\n\n\n\n\n\n\nEven if you are not a Python expert, you may be able to figure out what this program does.\n\n\nLet\u2019s see what happens when a program like this one is run in HTCondor.\n\n\n\n\nIn a new directory for this exercise, save the script above as \nmurphy.py\n.\n\n\nWrite a submit file for the script; \nqueue 20\n instances of the job and be sure to ask for 20\u00a0MB of memory and disk.\n\n\nSubmit the file and wait for the jobs to finish.\n\n\n\n\nWhat output do you expect? What output did you get? If you are curious about the exit code from the job, it is saved in completed jobs in \ncondor_history\n in the \nExitCode\n attribute. The following command will show the \nExitCode\n for a given cluster of jobs:\n\n\nusername@learn $\n condor_history \n<CLUSTER>\n -af ProcId ExitCode\n\n\n\n\n\n(Be sure to replace \n<cluster>\n with your actual cluster ID)\n\n\nHow many of the jobs succeeded? How many failed?\n\n\nRetrying Failed Jobs\n\u00b6\n\n\nNow let\u2019s see if we can solve the problem of jobs that fail once in a while. In this particular case, if HTCondor runs a failed job again, it has a good chance of succeeding. Not all failing jobs are like this, but in this case it is a reasonable assumption.\n\n\nFrom the lecture materials, implement the \nmax_retries\n feature to retry any job with a non-zero exit code up to 5 times, then resubmit the jobs. Did your change work?\n\n\nAfter the jobs have finished, examine the log file(s) to see what happened in detail. Did any jobs need to be restarted? Another way to see how many restarts there were is to look at the \nNumJobStarts\n attribute of a completed job with the \ncondor_history\n command, in the same way you looked at the \nExitCode\n attribute earlier. Does the number of retries seem correct? For those jobs which did need to be retried, what is their \nExitCode\n; and what about the \nExitCode\n from earlier execution attempts?\n\n\nA (Too) Long Running Job\n\u00b6\n\n\nSometimes, an ill-behaved job will get stuck in a loop and run forever, instead of exiting with a failure code, and it may just need to be re-run (or run on a different execute server) to complete without getting stuck. We can modify our Python program to simulate this kind of bad job with the following file:\n\n\n#!/usr/bin/env python\n\n\n\n# murphy.py simulate a real program with real problems\n\n\nimport\n \nrandom\n\n\nimport\n \nsys\n\n\nimport\n \ntime\n\n\n\n# Create a random number seeded by system entropy\n\n\nr\n \n=\n \nrandom\n.\nSystemRandom\n()\n\n\n\n# One time in three, simulate an infinite loop\n\n\nif\n \n(\nr\n.\nrandint\n(\n0\n,\n2\n)\n \n==\n \n0\n):\n\n        \n# intentionally print no output\n\n        \ntime\n.\nsleep\n(\n3600\n)\n\n        \nsys\n.\nexit\n(\n15\n)\n\n\nelse\n:\n\n        \ntime\n.\nsleep\n(\n3\n)\n\n        \nprint\n \n\"All work done correctly\"\n\n\n\n# By convention, zero exit code means success\n\n\nsys\n.\nexit\n(\n0\n)\n\n\n\n\n\n\nAgain, you may be able to figure out what this new program does.\n\n\n\n\nSave the script to a new file named \nmurphy2.py\n.\n\n\nCopy your previous submit file to a new name and change the \nexecutable\n to \nmurphy2.py\n.\n\n\nIf you like, submit the new file\u00a0\u2014 but after a while be sure to remove the whole cluster to clear out the \u201chung\u201d jobs.\n\n\n\n\nNow try to change the submit file to automatically remove any jobs that \nrun\n for more than one minute. You can make this change with just a single line in your submit file\n\n\nperiodic_remove\n \n=\n \n(\nJobStatus\n \n==\n \n2\n)\n \n&&\n \n(\n \n(\nCurrentTime\n \n-\n \nEnteredCurrentStatus\n)\n \n>\n \n60\n \n)\n\n\n\n\n\n\n\n\n\n\nSubmit the new file. Do the long running jobs get removed? What does \ncondor_history\n show for the cluster after all jobs are done? Which job status (i.e. idle, held, running) do you think \nJobStatus == 2\n corresponds to?\n\n\n\n\n\n\nBonus Exercise\n\u00b6\n\n\nIf you have time, edit your submit file so that instead of removing long running jobs, have HTCondor automatically put the long-running job on hold, and then automatically release it.",
            "title": "Exercise 3.3"
        },
        {
            "location": "/materials/day1/part3-ex3-job-retry/#monday-exercise-33-retries",
            "text": "The goal of this exercise is to demonstrate running a job that intermittently fails and thus could benefit from having HTCondor automatically retry it.  This first part of the exercise should take only a few minutes, and is designed to setup the next exercises.",
            "title": "Monday Exercise 3.3: Retries"
        },
        {
            "location": "/materials/day1/part3-ex3-job-retry/#bad-job",
            "text": "Let\u2019s assume that a colleague has shared with you a program, and it fails once in a while. In the real world, we would probably just fix the program, but what if you cannot change the software? Unfortunately, this situation happens more often than we would like.  Below is a simple Python script that fails once in a while. We will not fix it, but use it to simulate a program that can fail and that we  cannot  fix.  #!/usr/bin/env python  # murphy.py simulates a real program with real problems  import   random  import   sys  import   time  # Create a random number seeded by system entropy  r   =   random . SystemRandom ()  # One time in three, simulate a runtime error  if   ( r . randint ( 0 , 2 )   ==   0 ): \n     # intentionally print no output \n     sys . exit ( 15 )  else : \n     time . sleep ( 3 ) \n     print   \"All work done correctly\"  # By convention, zero exit code means success  sys . exit ( 0 )   Even if you are not a Python expert, you may be able to figure out what this program does.  Let\u2019s see what happens when a program like this one is run in HTCondor.   In a new directory for this exercise, save the script above as  murphy.py .  Write a submit file for the script;  queue 20  instances of the job and be sure to ask for 20\u00a0MB of memory and disk.  Submit the file and wait for the jobs to finish.   What output do you expect? What output did you get? If you are curious about the exit code from the job, it is saved in completed jobs in  condor_history  in the  ExitCode  attribute. The following command will show the  ExitCode  for a given cluster of jobs:  username@learn $  condor_history  <CLUSTER>  -af ProcId ExitCode  (Be sure to replace  <cluster>  with your actual cluster ID)  How many of the jobs succeeded? How many failed?",
            "title": "Bad Job"
        },
        {
            "location": "/materials/day1/part3-ex3-job-retry/#retrying-failed-jobs",
            "text": "Now let\u2019s see if we can solve the problem of jobs that fail once in a while. In this particular case, if HTCondor runs a failed job again, it has a good chance of succeeding. Not all failing jobs are like this, but in this case it is a reasonable assumption.  From the lecture materials, implement the  max_retries  feature to retry any job with a non-zero exit code up to 5 times, then resubmit the jobs. Did your change work?  After the jobs have finished, examine the log file(s) to see what happened in detail. Did any jobs need to be restarted? Another way to see how many restarts there were is to look at the  NumJobStarts  attribute of a completed job with the  condor_history  command, in the same way you looked at the  ExitCode  attribute earlier. Does the number of retries seem correct? For those jobs which did need to be retried, what is their  ExitCode ; and what about the  ExitCode  from earlier execution attempts?",
            "title": "Retrying Failed Jobs"
        },
        {
            "location": "/materials/day1/part3-ex3-job-retry/#a-too-long-running-job",
            "text": "Sometimes, an ill-behaved job will get stuck in a loop and run forever, instead of exiting with a failure code, and it may just need to be re-run (or run on a different execute server) to complete without getting stuck. We can modify our Python program to simulate this kind of bad job with the following file:  #!/usr/bin/env python  # murphy.py simulate a real program with real problems  import   random  import   sys  import   time  # Create a random number seeded by system entropy  r   =   random . SystemRandom ()  # One time in three, simulate an infinite loop  if   ( r . randint ( 0 , 2 )   ==   0 ): \n         # intentionally print no output \n         time . sleep ( 3600 ) \n         sys . exit ( 15 )  else : \n         time . sleep ( 3 ) \n         print   \"All work done correctly\"  # By convention, zero exit code means success  sys . exit ( 0 )   Again, you may be able to figure out what this new program does.   Save the script to a new file named  murphy2.py .  Copy your previous submit file to a new name and change the  executable  to  murphy2.py .  If you like, submit the new file\u00a0\u2014 but after a while be sure to remove the whole cluster to clear out the \u201chung\u201d jobs.   Now try to change the submit file to automatically remove any jobs that  run  for more than one minute. You can make this change with just a single line in your submit file  periodic_remove   =   ( JobStatus   ==   2 )   &&   (   ( CurrentTime   -   EnteredCurrentStatus )   >   60   )     Submit the new file. Do the long running jobs get removed? What does  condor_history  show for the cluster after all jobs are done? Which job status (i.e. idle, held, running) do you think  JobStatus == 2  corresponds to?",
            "title": "A (Too) Long Running Job"
        },
        {
            "location": "/materials/day1/part3-ex3-job-retry/#bonus-exercise",
            "text": "If you have time, edit your submit file so that instead of removing long running jobs, have HTCondor automatically put the long-running job on hold, and then automatically release it.",
            "title": "Bonus Exercise"
        },
        {
            "location": "/materials/day1/part4-ex1-submit-refresher/",
            "text": "Monday Exercise 4.1: Refresher \u2013 Submitting Multiple Jobs\n\u00b6\n\n\nThe goal of this exercise is to map the physical locations of some worker nodes in our local cluster.\nTo do this, you will write a simple submit file that will queue multiple jobs and then manually collate the results.\n\n\nWhere in the world are my jobs?\n\u00b6\n\n\nTo find the physical location of the computers your jobs our running on, you will use a method called \ngeolocation\n.\nGeolocation uses a registry to match a computer\u2019s network address to an approximate latitude and longitude.\n\n\nGeolocating several machines\n\u00b6\n\n\nNow, let\u2019s try to remember some basic HTCondor ideas from earlier today:\n\n\n\n\nLog in to \nlearn.chtc.wisc.edu\n\n\nCreate and change into a new folder for this exercise, for example \nmonday-4.1\n\n\n\n\nDownload the geolocation code:\n\n\nusername@learn $\n wget http://proxy.chtc.wisc.edu/SQUID/osgschool19/location-wrapper.sh \n\\\n\n                 http://proxy.chtc.wisc.edu/SQUID/osgschool19/wn-geoip.tar.gz\n\n\n\n\n\nYou will be using \nlocation-wrapper.sh\n as your executable and \nwn-geoip.tar.gz\n as an input file.\n\n\n\n\n\n\nAs always, ensure that your executable has the proper permissions (hint: try running it from the command line)\n\n\n\n\n\n\nCreate a submit file that generates \nfifty\n jobs that run \nlocation-wrapper.sh\n, transfers \nwn-geoip.tar.gz\n as an\n    input file, and uses the \n$(Process)\n macro to write different \noutput\n and \nerror\n files.\n    Also, add the following requirement to the submit file (it's not important to know what it does):\n\n\nRequirements\n \n=\n \n(\nHAS_CVMFS_oasis_opensciencegrid_org\n \n=?=\n \nTRUE\n)\n\n\n\n\n\n\nTry to do this step without looking at materials from earlier today.\nBut if you are stuck, see \ntoday\u2019s exercise 2.2\n.\n\n\n\n\n\n\nSubmit your jobs and wait for the results\n\n\n\n\n\n\nCollating your results\n\u00b6\n\n\nNow that you have your results, it's time to summarize them.\nRather than inspecting each output file individually, you can use the \ncat\n command to print the results from all of\nyour output files at once.\nIf all of your output files have the format \nlocation-#.out\n (e.g., \nlocation-10.out\n), your command will look something\nlike this:\n\n\nuser@learn $\n cat location-*.out\n\n\n\n\n\nThe \n*\n is a wildcard so the above cat command runs on all files that start with \nlocation-\n and end in \n.out\n.\nAdditionally, you can use \ncat\n in combination with the \nsort\n and \nuniq\n commands using \"pipes\" (\n|\n) to print only\nthe unique results:\n\n\nuser@learn $\n cat location-*.out \n|\n sort \n|\n uniq\n\n\n\n\n\nMapping your results\n\u00b6\n\n\nTo visualize the locations of the machines that your jobs ran on, you will be using \nhttp://www.mapcustomizer.com/\n.\nCopy and paste the collated results into the text box that pops up when clicking on the 'Bulk Entry' button on the\nright-hand side.\nWhere did your jobs run?\n\n\nNext exercise\n\u00b6\n\n\nOnce completed, move onto the next exercise: \nLogging in to the OSG Submit Machine",
            "title": "Exercise 4.1"
        },
        {
            "location": "/materials/day1/part4-ex1-submit-refresher/#monday-exercise-41-refresher-submitting-multiple-jobs",
            "text": "The goal of this exercise is to map the physical locations of some worker nodes in our local cluster.\nTo do this, you will write a simple submit file that will queue multiple jobs and then manually collate the results.",
            "title": "Monday Exercise 4.1: Refresher \u2013 Submitting Multiple Jobs"
        },
        {
            "location": "/materials/day1/part4-ex1-submit-refresher/#where-in-the-world-are-my-jobs",
            "text": "To find the physical location of the computers your jobs our running on, you will use a method called  geolocation .\nGeolocation uses a registry to match a computer\u2019s network address to an approximate latitude and longitude.",
            "title": "Where in the world are my jobs?"
        },
        {
            "location": "/materials/day1/part4-ex1-submit-refresher/#geolocating-several-machines",
            "text": "Now, let\u2019s try to remember some basic HTCondor ideas from earlier today:   Log in to  learn.chtc.wisc.edu  Create and change into a new folder for this exercise, for example  monday-4.1   Download the geolocation code:  username@learn $  wget http://proxy.chtc.wisc.edu/SQUID/osgschool19/location-wrapper.sh  \\ \n                 http://proxy.chtc.wisc.edu/SQUID/osgschool19/wn-geoip.tar.gz  You will be using  location-wrapper.sh  as your executable and  wn-geoip.tar.gz  as an input file.    As always, ensure that your executable has the proper permissions (hint: try running it from the command line)    Create a submit file that generates  fifty  jobs that run  location-wrapper.sh , transfers  wn-geoip.tar.gz  as an\n    input file, and uses the  $(Process)  macro to write different  output  and  error  files.\n    Also, add the following requirement to the submit file (it's not important to know what it does):  Requirements   =   ( HAS_CVMFS_oasis_opensciencegrid_org   =?=   TRUE )   Try to do this step without looking at materials from earlier today.\nBut if you are stuck, see  today\u2019s exercise 2.2 .    Submit your jobs and wait for the results",
            "title": "Geolocating several machines"
        },
        {
            "location": "/materials/day1/part4-ex1-submit-refresher/#collating-your-results",
            "text": "Now that you have your results, it's time to summarize them.\nRather than inspecting each output file individually, you can use the  cat  command to print the results from all of\nyour output files at once.\nIf all of your output files have the format  location-#.out  (e.g.,  location-10.out ), your command will look something\nlike this:  user@learn $  cat location-*.out  The  *  is a wildcard so the above cat command runs on all files that start with  location-  and end in  .out .\nAdditionally, you can use  cat  in combination with the  sort  and  uniq  commands using \"pipes\" ( | ) to print only\nthe unique results:  user@learn $  cat location-*.out  |  sort  |  uniq",
            "title": "Collating your results"
        },
        {
            "location": "/materials/day1/part4-ex1-submit-refresher/#mapping-your-results",
            "text": "To visualize the locations of the machines that your jobs ran on, you will be using  http://www.mapcustomizer.com/ .\nCopy and paste the collated results into the text box that pops up when clicking on the 'Bulk Entry' button on the\nright-hand side.\nWhere did your jobs run?",
            "title": "Mapping your results"
        },
        {
            "location": "/materials/day1/part4-ex1-submit-refresher/#next-exercise",
            "text": "Once completed, move onto the next exercise:  Logging in to the OSG Submit Machine",
            "title": "Next exercise"
        },
        {
            "location": "/materials/day1/part4-ex2-login-scp/",
            "text": "Monday Exercise 4.2: Log in to the OSG Submit Machine\n\u00b6\n\n\nThe goal of this exercise is to log in to a different submit host so that you can start submitting jobs into the OSG\ninstead of the local cluster here at UW-Madison.\nAdditionally, you will learn about the \ntar\n and \nscp\n commands, which will allow you to efficiently copy files between\nthe two submit nodes.\n\n\nIf you have trouble getting \nssh\n access to the submit machine, ask the instructors right away! Gaining access is\ncritical for all remaining exercises.\n\n\nLog in to the OSG submit machine\n\u00b6\n\n\nFor some of the remaining exercises today, you will be using a machine named \ntraining.osgconnect.net\n.\nThe username and password are listed on your 'Accounts' paper that you received yesterday.\nIf you no longer have it, please ask the instructors for help.\n\n\nOnce you have your account details, \nssh\n in to the machine and take a look around.\n\n\nPreparing files for transfer\n\u00b6\n\n\nWhen transferring files between computers, it's best to limit the number of files as well as their size.\nSmaller files transfer more quickly and if your network connection drops, restarting the transfer is less painful than\nit would be if you were transferring large files.\n\n\nArchiving tools (WinZip, 7zip, Archive Utility, etc.) can compress the size of your files and place them into a single,\nsmaller archive file.\nThe \ntar\n command is a one-stop shop for creating, extracting, and viewing the contents of \ntar\n archives (called\ntarballs) whose usage is as follows:\n\n\n\n\n\n\nTo \ncreate\n a tarball named \n<archive filename>\n containing \n<archive contents>\n, use the following command:\n\n\nuser@training $\n tar -czvf <archive filename> <archive contents>\n\n\n\n\n\nWhere \n<archive filename>\n should end in \n.tar.gz\n and \n<archive contents>\n can be a list of any number of files\nand/or folders, separated by spaces.\n\n\n\n\n\n\nTo \nextract\n the files from a tarball into the current directory:\n\n\nuser@training $\n tar -xzvf <archive filename>\n\n\n\n\n\n\n\n\n\nTo \nlist\n the files within a tarball:\n\n\nuser@training $\n tar -tzvf <archive filename>\n\n\n\n\n\n\n\n\n\nUsing the above knowledge, log into \nlearn.chtc.wisc.edu\n, create a tarball that contains Monday's exercise 2.4\ndirectory, and verify that it contains all the proper files.\n\n\nComparing compressed sizes\n\u00b6\n\n\nYou can adjust the level of compression of \ntar\n by prepending your command with \nGZIP=--<COMPRESSION>\n, where\n\n<COMPRESSION>\n can be either \nfast\n for the least compression, or \nbest\n for the most compression (the default\ncompression is between \nbest\n and \nfast\n).\n\n\n\n\nUse \nwget\n to download the following files from our web server:\n\n\nText file: \nhttp://proxy.chtc.wisc.edu/SQUID/osgschool18/random_text\n\n\nArchive: \nhttp://proxy.chtc.wisc.edu/SQUID/osgschool18/pdbaa.tar.gz\n\n\nImage: \nhttp://proxy.chtc.wisc.edu/SQUID/osgschool18/obligatory_cat.jpg\n\n\n\n\n\n\nUse \ntar\n on each file and compare the sizes of the original file and the compressed version.\n\n\n\n\nWhich files were compressed the least? Why?\n\n\nTransferring files\n\u00b6\n\n\nUsing secure copy\n\u00b6\n\n\nSecure copy\n (\nscp\n) is a command based on \nSSH\n that lets you securely copy\nfiles between two different hosts.\nIt takes similar arguments to the \ncp\n command that you are familiar with but also takes additional host information:\n\n\nuser@learn $\n scp <\nsource\n \n1\n> <\nsource\n \n2\n>...<\nsource\n N> <remote host>:<remote path>\n\n\n\n\n\nFor example, if I were logged in to \nlearn.chtc.wisc.edu\n and wanted to copy the file \nfoo\n from my current directory to\nmy home directory on \ntraining.osgconnect.net\n, the command would look like this:\n\n\nuser@learn $\n scp foo training.osgconnect.net:~\n\n\n\n\n\nAdditionally, I could also pull files from \ntraining.osgconnect.net\n to \nlearn.chtc.wisc.edu\n.\nThe following command copies \nbar\n from my home directory on \ntraining.osgconnect.net\n to my current directory on\n\nlearn.chtc.wisc.edu\n:\n\n\nuser@learn $\n scp training.osgconnect.net:~/bar .\n\n\n\n\n\nYou can also copy folders between hosts using the \n-r\n option.\nIf I kept all my files from Monday's exercise 1.3 in a folder named \nmonday-1.3\n on \nlearn.chtc.wisc.edu\n, I could use\nthe following command to copy them to my home directory on \ntraining.osgconnect.net\n:\n\n\nuser@learn $\n scp -r monday-1.3 training.osgconnect.net:~\n\n\n\n\n\nTry copying the tarball you created earlier in this exercise on \nlearn.chtc.wisc.edu\n to \ntraining.osgconnect.net\n.\n\n\nSecure copy from your laptop\n\u00b6\n\n\nDuring your research, you may need to retrieve output files from your submit host to inspect them on your personal\nmachine, which can also be done with \nscp\n! To use \nscp\n on your laptop, follow the instructions relevant to your\nmachine's operating system:\n\n\nMac and Linux users\n\u00b6\n\n\nscp\n should be included by default and available via the terminal on both Mac and Linux operating systems.\nOpen a terminal window on your laptop and try copying the tarball containing Monday's 2.4 exercise from\n\ntraining.osgconnect.net\n to your laptop.\n\n\nWindows users\n\u00b6\n\n\nWinSCP is an \nscp\n client for Windows operating systems.\n\n\n\n\nInstall WinSCP from \nhttps://winscp.net/eng/index.php\n\n\nStart WinSCP and enter your SSH credentials for \ntraining.osgconnect.net\n\n\nCopy the tarball containing Monday's 2.4 exercise exercise to your laptop\n\n\n\n\nExtra challenge: Using rsync\n\u00b6\n\n\nscp\n is a great, ubiquitous tool for one-time transfers but there are better tools if you find yourself transferring\nthe same set of files to the same location repeatedly.\nAnother common tool available on many Linux machines is \nrsync\n, which is like a beefed-up version of \nscp\n.\nThe invocation is similar to \nscp\n: you can transfer files and/or folders, but the options are different and when\ntransferring folders, make sure they don't have a trailing slash (\n/\n, this means to copy all the files within the\nfolder instead of the folder itself):\n\n\nuser@learn $\n rsync -Pavz <\nsource\n \n1\n> <\nsource\n \n2\n>...<\nsource\n N> <remote host>:<remote path>\n\n\n\n\n\nrsync\n has many benefits over \nscp\n but two of its biggest features are built-in compression (so you don't have to\ncreate a tarball) and the ability to only transfer files that have changed.\nBoth of these feature are helpful when you're having connectivity issues so that you don't have to restart the transfer\nfrom scratch every time your connection fails.\n\n\n\n\nUse \nrsync\n to transfer the folder containing today's exercise 1.1 to \ntraining.osgconnect.net\n\n\n\n\nCreate a new file in your exercise 1.1 folder on \nlearn.chtc.wisc.edu\n with the \ntouch\n command:\n\n\nuser@learn $\n touch <filename>\n\n\n\n\n\n\n\n\n\nUse the same \nrsync\n command to transfer the folder with the new file you just created.\n   How many files were transferred the first time? How many files were transferred if you run the same rsync command\n   again?\n\n\n\n\n\n\nNext exercise\n\u00b6\n\n\nOnce completed, move onto the next exercise: \nRunning jobs in the OSG",
            "title": "Exercise 4.2"
        },
        {
            "location": "/materials/day1/part4-ex2-login-scp/#monday-exercise-42-log-in-to-the-osg-submit-machine",
            "text": "The goal of this exercise is to log in to a different submit host so that you can start submitting jobs into the OSG\ninstead of the local cluster here at UW-Madison.\nAdditionally, you will learn about the  tar  and  scp  commands, which will allow you to efficiently copy files between\nthe two submit nodes.  If you have trouble getting  ssh  access to the submit machine, ask the instructors right away! Gaining access is\ncritical for all remaining exercises.",
            "title": "Monday Exercise 4.2: Log in to the OSG Submit Machine"
        },
        {
            "location": "/materials/day1/part4-ex2-login-scp/#log-in-to-the-osg-submit-machine",
            "text": "For some of the remaining exercises today, you will be using a machine named  training.osgconnect.net .\nThe username and password are listed on your 'Accounts' paper that you received yesterday.\nIf you no longer have it, please ask the instructors for help.  Once you have your account details,  ssh  in to the machine and take a look around.",
            "title": "Log in to the OSG submit machine"
        },
        {
            "location": "/materials/day1/part4-ex2-login-scp/#preparing-files-for-transfer",
            "text": "When transferring files between computers, it's best to limit the number of files as well as their size.\nSmaller files transfer more quickly and if your network connection drops, restarting the transfer is less painful than\nit would be if you were transferring large files.  Archiving tools (WinZip, 7zip, Archive Utility, etc.) can compress the size of your files and place them into a single,\nsmaller archive file.\nThe  tar  command is a one-stop shop for creating, extracting, and viewing the contents of  tar  archives (called\ntarballs) whose usage is as follows:    To  create  a tarball named  <archive filename>  containing  <archive contents> , use the following command:  user@training $  tar -czvf <archive filename> <archive contents>  Where  <archive filename>  should end in  .tar.gz  and  <archive contents>  can be a list of any number of files\nand/or folders, separated by spaces.    To  extract  the files from a tarball into the current directory:  user@training $  tar -xzvf <archive filename>    To  list  the files within a tarball:  user@training $  tar -tzvf <archive filename>    Using the above knowledge, log into  learn.chtc.wisc.edu , create a tarball that contains Monday's exercise 2.4\ndirectory, and verify that it contains all the proper files.",
            "title": "Preparing files for transfer"
        },
        {
            "location": "/materials/day1/part4-ex2-login-scp/#comparing-compressed-sizes",
            "text": "You can adjust the level of compression of  tar  by prepending your command with  GZIP=--<COMPRESSION> , where <COMPRESSION>  can be either  fast  for the least compression, or  best  for the most compression (the default\ncompression is between  best  and  fast ).   Use  wget  to download the following files from our web server:  Text file:  http://proxy.chtc.wisc.edu/SQUID/osgschool18/random_text  Archive:  http://proxy.chtc.wisc.edu/SQUID/osgschool18/pdbaa.tar.gz  Image:  http://proxy.chtc.wisc.edu/SQUID/osgschool18/obligatory_cat.jpg    Use  tar  on each file and compare the sizes of the original file and the compressed version.   Which files were compressed the least? Why?",
            "title": "Comparing compressed sizes"
        },
        {
            "location": "/materials/day1/part4-ex2-login-scp/#transferring-files",
            "text": "",
            "title": "Transferring files"
        },
        {
            "location": "/materials/day1/part4-ex2-login-scp/#using-secure-copy",
            "text": "Secure copy  ( scp ) is a command based on  SSH  that lets you securely copy\nfiles between two different hosts.\nIt takes similar arguments to the  cp  command that you are familiar with but also takes additional host information:  user@learn $  scp < source   1 > < source   2 >...< source  N> <remote host>:<remote path>  For example, if I were logged in to  learn.chtc.wisc.edu  and wanted to copy the file  foo  from my current directory to\nmy home directory on  training.osgconnect.net , the command would look like this:  user@learn $  scp foo training.osgconnect.net:~  Additionally, I could also pull files from  training.osgconnect.net  to  learn.chtc.wisc.edu .\nThe following command copies  bar  from my home directory on  training.osgconnect.net  to my current directory on learn.chtc.wisc.edu :  user@learn $  scp training.osgconnect.net:~/bar .  You can also copy folders between hosts using the  -r  option.\nIf I kept all my files from Monday's exercise 1.3 in a folder named  monday-1.3  on  learn.chtc.wisc.edu , I could use\nthe following command to copy them to my home directory on  training.osgconnect.net :  user@learn $  scp -r monday-1.3 training.osgconnect.net:~  Try copying the tarball you created earlier in this exercise on  learn.chtc.wisc.edu  to  training.osgconnect.net .",
            "title": "Using secure copy"
        },
        {
            "location": "/materials/day1/part4-ex2-login-scp/#secure-copy-from-your-laptop",
            "text": "During your research, you may need to retrieve output files from your submit host to inspect them on your personal\nmachine, which can also be done with  scp ! To use  scp  on your laptop, follow the instructions relevant to your\nmachine's operating system:",
            "title": "Secure copy from your laptop"
        },
        {
            "location": "/materials/day1/part4-ex2-login-scp/#mac-and-linux-users",
            "text": "scp  should be included by default and available via the terminal on both Mac and Linux operating systems.\nOpen a terminal window on your laptop and try copying the tarball containing Monday's 2.4 exercise from training.osgconnect.net  to your laptop.",
            "title": "Mac and Linux users"
        },
        {
            "location": "/materials/day1/part4-ex2-login-scp/#windows-users",
            "text": "WinSCP is an  scp  client for Windows operating systems.   Install WinSCP from  https://winscp.net/eng/index.php  Start WinSCP and enter your SSH credentials for  training.osgconnect.net  Copy the tarball containing Monday's 2.4 exercise exercise to your laptop",
            "title": "Windows users"
        },
        {
            "location": "/materials/day1/part4-ex2-login-scp/#extra-challenge-using-rsync",
            "text": "scp  is a great, ubiquitous tool for one-time transfers but there are better tools if you find yourself transferring\nthe same set of files to the same location repeatedly.\nAnother common tool available on many Linux machines is  rsync , which is like a beefed-up version of  scp .\nThe invocation is similar to  scp : you can transfer files and/or folders, but the options are different and when\ntransferring folders, make sure they don't have a trailing slash ( / , this means to copy all the files within the\nfolder instead of the folder itself):  user@learn $  rsync -Pavz < source   1 > < source   2 >...< source  N> <remote host>:<remote path>  rsync  has many benefits over  scp  but two of its biggest features are built-in compression (so you don't have to\ncreate a tarball) and the ability to only transfer files that have changed.\nBoth of these feature are helpful when you're having connectivity issues so that you don't have to restart the transfer\nfrom scratch every time your connection fails.   Use  rsync  to transfer the folder containing today's exercise 1.1 to  training.osgconnect.net   Create a new file in your exercise 1.1 folder on  learn.chtc.wisc.edu  with the  touch  command:  user@learn $  touch <filename>    Use the same  rsync  command to transfer the folder with the new file you just created.\n   How many files were transferred the first time? How many files were transferred if you run the same rsync command\n   again?",
            "title": "Extra challenge: Using rsync"
        },
        {
            "location": "/materials/day1/part4-ex2-login-scp/#next-exercise",
            "text": "Once completed, move onto the next exercise:  Running jobs in the OSG",
            "title": "Next exercise"
        },
        {
            "location": "/materials/day1/part4-ex3-submit-osg/",
            "text": "Monday Exercise 4.3: Running jobs in the OSG\n\u00b6\n\n\nThe goal of this exercise is to have your jobs running on the OSG and map their geographical locations.\n\n\nWhere in the world are my jobs? (Part 2)\n\u00b6\n\n\nIn this version of the geolocating exercise, you will submit jobs to the OSG from \ntraining.osgconnect.net\n and\nhopefully getting back much more interesting results!\nYou will be using the same exact payload as you did in \nexercise 4.1\n.\n\n\nGathering network information from the OSG\n\u00b6\n\n\nNow to create submit files that will run in the OSG!\n\n\n\n\nIf not already logged in, \nssh\n into \ntraining.osgconnect.net\n\n\nMake a new directory for this exercise, \ntuesday-4.3\n and change into it\n\n\nUse \nscp\n or \nrsync\n from \nexercise 4.2\n to copy over the executable and input\n   file from the \nmonday-4.1\n directory from \nlearn\n.\n\n\nRe-create the submit file from exercise 1.1 except this time around change your submit file so that it submits \nfive\n   hundred\n jobs!\n\n\nSubmit your file and wait for the results\n\n\n\n\nMapping your jobs\n\u00b6\n\n\nAs before, you will be using \nhttp://www.mapcustomizer.com/\n to visualize where your jobs have landed in the OSG.\nCopy and paste the collated results from your job output into the bulk creation text box at the bottom of the screen.\nWhere did your jobs end up?\n\n\nNext exercise\n\u00b6\n\n\nOnce completed, move onto the next exercise: \nHardware Differences in the OSG\n\n\nExtra Challenge: Cleaning up your submit directory\n\u00b6\n\n\nIf you run \nls\n in the directory from which you submitted your job, you may see that you now have thousands of files!\nProper data management starts to become a requirement as you start to develop truly HTC workflows;\nyou'll want organize your submit files, code, and input data separate from your output data.\n\n\n\n\n\n\nTry editing your submit file so that all your output and error files are saved to separate directories within your\n   submit directory.\n\n\n\n\nTip\n\n\nExperiment with fewer job submissions until you're confident you have it right, then go back to submitting 1000\njobs!\n\n\n\n\n\n\n\n\nSubmit your file and track the status of your jobs.\n\n\n\n\n\n\nDid your jobs complete successfully with output and error files saved in separate directories?\nIf not, can you find any useful information in the job logs or hold messages?\nIf you get stuck, review the \nslides for submitting many jobs\n.",
            "title": "Exercise 4.3"
        },
        {
            "location": "/materials/day1/part4-ex3-submit-osg/#monday-exercise-43-running-jobs-in-the-osg",
            "text": "The goal of this exercise is to have your jobs running on the OSG and map their geographical locations.",
            "title": "Monday Exercise 4.3: Running jobs in the OSG"
        },
        {
            "location": "/materials/day1/part4-ex3-submit-osg/#where-in-the-world-are-my-jobs-part-2",
            "text": "In this version of the geolocating exercise, you will submit jobs to the OSG from  training.osgconnect.net  and\nhopefully getting back much more interesting results!\nYou will be using the same exact payload as you did in  exercise 4.1 .",
            "title": "Where in the world are my jobs? (Part 2)"
        },
        {
            "location": "/materials/day1/part4-ex3-submit-osg/#gathering-network-information-from-the-osg",
            "text": "Now to create submit files that will run in the OSG!   If not already logged in,  ssh  into  training.osgconnect.net  Make a new directory for this exercise,  tuesday-4.3  and change into it  Use  scp  or  rsync  from  exercise 4.2  to copy over the executable and input\n   file from the  monday-4.1  directory from  learn .  Re-create the submit file from exercise 1.1 except this time around change your submit file so that it submits  five\n   hundred  jobs!  Submit your file and wait for the results",
            "title": "Gathering network information from the OSG"
        },
        {
            "location": "/materials/day1/part4-ex3-submit-osg/#mapping-your-jobs",
            "text": "As before, you will be using  http://www.mapcustomizer.com/  to visualize where your jobs have landed in the OSG.\nCopy and paste the collated results from your job output into the bulk creation text box at the bottom of the screen.\nWhere did your jobs end up?",
            "title": "Mapping your jobs"
        },
        {
            "location": "/materials/day1/part4-ex3-submit-osg/#next-exercise",
            "text": "Once completed, move onto the next exercise:  Hardware Differences in the OSG",
            "title": "Next exercise"
        },
        {
            "location": "/materials/day1/part4-ex3-submit-osg/#extra-challenge-cleaning-up-your-submit-directory",
            "text": "If you run  ls  in the directory from which you submitted your job, you may see that you now have thousands of files!\nProper data management starts to become a requirement as you start to develop truly HTC workflows;\nyou'll want organize your submit files, code, and input data separate from your output data.    Try editing your submit file so that all your output and error files are saved to separate directories within your\n   submit directory.   Tip  Experiment with fewer job submissions until you're confident you have it right, then go back to submitting 1000\njobs!     Submit your file and track the status of your jobs.    Did your jobs complete successfully with output and error files saved in separate directories?\nIf not, can you find any useful information in the job logs or hold messages?\nIf you get stuck, review the  slides for submitting many jobs .",
            "title": "Extra Challenge: Cleaning up your submit directory"
        },
        {
            "location": "/materials/day1/part4-ex4-hardware-diffs/",
            "text": "Monday Exercise 4.4: Hardware Differences in the OSG\n\u00b6\n\n\nThe goal of this exercise is to compare hardware differences between our local cluster (CHTC here at UW\u2013Madison) and an\nOSG glidein pool.\nSpecifically, we will look at how easy it is to get access to resources in terms of the amount of memory that is\nrequested.\nThis will not be a very careful study, but should give you some idea of one way in which the pools are different.\n\n\nIn the first two parts of the exercise, you will submit a bunch of jobs that differ only in how much memory each one\nrequests;\nwe call this a \nparameter sweep\n, in that we are testing many possible values of a parameter.\nWe will request memory from 1\u201316 GB, doubling the memory each time.\nOne set of jobs will be submitted locally, and the other, identical set of jobs will be submitted to OSG.\nYou will check the queue periodically to see how many jobs have completed and how many are still waiting to run.\n\n\nPart 1: Checking on the availability of memory (locally)\n\u00b6\n\n\nIn this first part, you will create the submit file for both the local and OSG jobs, then submit the local set.\n\n\nYet another queue syntax\n\u00b6\n\n\nEarlier today, you learned about the \nqueue\n statement and some of the different ways it can be invoked to submit\nmultiple jobs.\nSimilar to the \nqueue from\n statement to submit jobs based on lines from a specific file, you can use \nqueue in\n to\nsubmit jobs based on a list directly from your submit file:\n\n\nqueue\n \n<#\n \nof\n \njobs\n>\n \n<\nvariable\n>\n \nin\n \n(\n\n\n<\nitem\n \n1\n>\n\n\n<\nitem\n \n2\n>\n\n\n<\nitem\n \n3\n>\n\n\n...\n\n\n)\n\n\n\n\n\n\nFor example, to submit 6 jobs that sleep for \n5\n, \n5\n, \n10\n, \n10\n, \n15\n, and \n15\n seconds, you could write the following\nsubmit file:\n\n\nexecutable\n \n=\n \n/\nbin\n/\nsleep\n\n\n\nqueue\n \n2\n \narguments\n \nin\n \n(\n\n\n5\n\n\n10\n\n\n15\n\n\n)\n\n\n\n\n\n\nTry submitting this yourself and check the jobs that end up in the queue with \ncondor_q -nobatch\n.\n\n\nCreate the submit files\n\u00b6\n\n\nTo create our parameter sweep, we will create a \nnew\n submit file with multiple queue statements and change the value of our\nparameter (\nrequest_memory\n) for each batch of jobs.\n\n\n\n\nIf not already, log in to \nlearn.chtc.wisc.edu\n\n\nCreate and change into a new subdirectory called \nmonday-4.4\n \u2013 doing things this way will make Part 2 much easier\n\n\n\n\nCreate a submit file that is named \nsleep.sub\n that executes the command \n/bin/sleep 300\n.\n\n\n\n\nNote\n\n\nIf you do not remember all of the submit statements to write this file, or just to go faster, find a similar\nsubmit file from yesterday.\nCopy the file and rename it here, and make sure the argument to \nsleep\n is \n60\n.\n\n\n\n\n\n\n\n\nUse the \nqueue in\n syntax to submit 10 jobs each for the following memory requests: 4, 8, 16, 32, and 64 GB of memory.\n    You should have 10 jobs requesting 4GB, 10 jobs requesting 8GB, etc.\n\n\n\n\nSave the submit file and exit your editor\n\n\nSubmit your jobs\n\n\n\n\nMonitoring the local jobs\n\u00b6\n\n\nEvery few minutes, run \ncondor_q\n and see how your sleep jobs are doing.\nTo easily see how many jobs of each type you have left, run the following command:\n\n\nuser@learn $\n condor_q <Cluster ID> -af RequestMemory \n|\n sort -n \n|\n uniq -c\n\n\n\n\n\nThe numbers in the left column are the number of jobs left of that type and the number on the right is the amount of\nmemory you requested in MB.\nConsider making a little table like the one below to track progress.\n\n\n\n\n\n\n\n\nMemory\n\n\nRemaining #1\n\n\nRemaining #2\n\n\nRemaining #3\n\n\n\n\n\n\n\n\n\n\n4 GB\n\n\n10\n\n\n6\n\n\n\n\n\n\n\n\n8 GB\n\n\n10\n\n\n7\n\n\n\n\n\n\n\n\n16 GB\n\n\n10\n\n\n8\n\n\n\n\n\n\n\n\n32 GB\n\n\n10\n\n\n9\n\n\n\n\n\n\n\n\n64 GB\n\n\n10\n\n\n10\n\n\n\n\n\n\n\n\n\n\nIn the meantime, between checking on your local jobs, start Part 2 \u2013 taking a break every few minutes to record progress\non your local jobs.\n\n\nPart 2: Checking on the availability of memory (remotely)\n\u00b6\n\n\nFor the second part of the exercise, you will just copy over the directory from part 1 on \nlearn.chtc.wisc.edu\n to\n\ntraining.osgconnect.net\n and resubmit your jobs to the OSG.\nIf you get stuck during the copying process, refer to \nexercise 4.2\n.\n\n\nMonitoring the remote jobs\n\u00b6\n\n\nAs you did in part 1, use \ncondor_q\n to track how your sleep jobs are doing.\nYou can move onto the next exercise but keep tracking the status of your jobs.\nAfter you are done with the \nnext exercise\n, come back to this exercise,\nand move onto part 3.\n\n\nPart 3: Analyzing the results\n\u00b6\n\n\nNow that you've finished the other exercise, how many jobs have completed locally? How many have completed remotely?\n\n\nDue to the dynamic nature of the remote pool, the OSG may have noticed the demand for higher memory jobs and leased more\nhigh memory slots for our pool.\nThat being said, 8GB+ slots are a high-demand, low-availability resource in the OSG so it's unlikely that all of your\n8GB+ jobs matched and ran to completion.\nOn the other hand, the local cluster has plenty of 8GB+ slots so all your jobs have a high chance of running.",
            "title": "Exercise 4.4"
        },
        {
            "location": "/materials/day1/part4-ex4-hardware-diffs/#monday-exercise-44-hardware-differences-in-the-osg",
            "text": "The goal of this exercise is to compare hardware differences between our local cluster (CHTC here at UW\u2013Madison) and an\nOSG glidein pool.\nSpecifically, we will look at how easy it is to get access to resources in terms of the amount of memory that is\nrequested.\nThis will not be a very careful study, but should give you some idea of one way in which the pools are different.  In the first two parts of the exercise, you will submit a bunch of jobs that differ only in how much memory each one\nrequests;\nwe call this a  parameter sweep , in that we are testing many possible values of a parameter.\nWe will request memory from 1\u201316 GB, doubling the memory each time.\nOne set of jobs will be submitted locally, and the other, identical set of jobs will be submitted to OSG.\nYou will check the queue periodically to see how many jobs have completed and how many are still waiting to run.",
            "title": "Monday Exercise 4.4: Hardware Differences in the OSG"
        },
        {
            "location": "/materials/day1/part4-ex4-hardware-diffs/#part-1-checking-on-the-availability-of-memory-locally",
            "text": "In this first part, you will create the submit file for both the local and OSG jobs, then submit the local set.",
            "title": "Part 1: Checking on the availability of memory (locally)"
        },
        {
            "location": "/materials/day1/part4-ex4-hardware-diffs/#yet-another-queue-syntax",
            "text": "Earlier today, you learned about the  queue  statement and some of the different ways it can be invoked to submit\nmultiple jobs.\nSimilar to the  queue from  statement to submit jobs based on lines from a specific file, you can use  queue in  to\nsubmit jobs based on a list directly from your submit file:  queue   <#   of   jobs >   < variable >   in   (  < item   1 >  < item   2 >  < item   3 >  ...  )   For example, to submit 6 jobs that sleep for  5 ,  5 ,  10 ,  10 ,  15 , and  15  seconds, you could write the following\nsubmit file:  executable   =   / bin / sleep  queue   2   arguments   in   (  5  10  15  )   Try submitting this yourself and check the jobs that end up in the queue with  condor_q -nobatch .",
            "title": "Yet another queue syntax"
        },
        {
            "location": "/materials/day1/part4-ex4-hardware-diffs/#create-the-submit-files",
            "text": "To create our parameter sweep, we will create a  new  submit file with multiple queue statements and change the value of our\nparameter ( request_memory ) for each batch of jobs.   If not already, log in to  learn.chtc.wisc.edu  Create and change into a new subdirectory called  monday-4.4  \u2013 doing things this way will make Part 2 much easier   Create a submit file that is named  sleep.sub  that executes the command  /bin/sleep 300 .   Note  If you do not remember all of the submit statements to write this file, or just to go faster, find a similar\nsubmit file from yesterday.\nCopy the file and rename it here, and make sure the argument to  sleep  is  60 .     Use the  queue in  syntax to submit 10 jobs each for the following memory requests: 4, 8, 16, 32, and 64 GB of memory.\n    You should have 10 jobs requesting 4GB, 10 jobs requesting 8GB, etc.   Save the submit file and exit your editor  Submit your jobs",
            "title": "Create the submit files"
        },
        {
            "location": "/materials/day1/part4-ex4-hardware-diffs/#monitoring-the-local-jobs",
            "text": "Every few minutes, run  condor_q  and see how your sleep jobs are doing.\nTo easily see how many jobs of each type you have left, run the following command:  user@learn $  condor_q <Cluster ID> -af RequestMemory  |  sort -n  |  uniq -c  The numbers in the left column are the number of jobs left of that type and the number on the right is the amount of\nmemory you requested in MB.\nConsider making a little table like the one below to track progress.     Memory  Remaining #1  Remaining #2  Remaining #3      4 GB  10  6     8 GB  10  7     16 GB  10  8     32 GB  10  9     64 GB  10  10      In the meantime, between checking on your local jobs, start Part 2 \u2013 taking a break every few minutes to record progress\non your local jobs.",
            "title": "Monitoring the local jobs"
        },
        {
            "location": "/materials/day1/part4-ex4-hardware-diffs/#part-2-checking-on-the-availability-of-memory-remotely",
            "text": "For the second part of the exercise, you will just copy over the directory from part 1 on  learn.chtc.wisc.edu  to training.osgconnect.net  and resubmit your jobs to the OSG.\nIf you get stuck during the copying process, refer to  exercise 4.2 .",
            "title": "Part 2: Checking on the availability of memory (remotely)"
        },
        {
            "location": "/materials/day1/part4-ex4-hardware-diffs/#monitoring-the-remote-jobs",
            "text": "As you did in part 1, use  condor_q  to track how your sleep jobs are doing.\nYou can move onto the next exercise but keep tracking the status of your jobs.\nAfter you are done with the  next exercise , come back to this exercise,\nand move onto part 3.",
            "title": "Monitoring the remote jobs"
        },
        {
            "location": "/materials/day1/part4-ex4-hardware-diffs/#part-3-analyzing-the-results",
            "text": "Now that you've finished the other exercise, how many jobs have completed locally? How many have completed remotely?  Due to the dynamic nature of the remote pool, the OSG may have noticed the demand for higher memory jobs and leased more\nhigh memory slots for our pool.\nThat being said, 8GB+ slots are a high-demand, low-availability resource in the OSG so it's unlikely that all of your\n8GB+ jobs matched and ran to completion.\nOn the other hand, the local cluster has plenty of 8GB+ slots so all your jobs have a high chance of running.",
            "title": "Part 3: Analyzing the results"
        },
        {
            "location": "/materials/day1/part4-ex5-software-diffs/",
            "text": "Monday Exercise 4.5: Software Differences in the OSG\n\u00b6\n\n\nThe goal of this exercise is to see the differences in availability of software in the OSG.\nAt your local cluster, you may be used to having certain versions of software but out on the OSG, it's possible that the\nsoftware you need won't even be installed.\n\n\nRefresher - condor_status\n\u00b6\n\n\nThe OSG pool, like the local pool you used earlier today, is just another HTCondor pool.\nThis means that the commands you use will be the same and the jobs you submit can have similar payloads but there is one\nmajor difference: the slots are different!\nYou can use the \ncondor_status\n command just as you did yesterday to inspect these differences.\n\n\n\n\nOpen two terminal windows side-by-side\n\n\nLog in to \nlearn.chtc.wisc.edu\n in one window and \ntraining.osgconnect.net\n in the other\n\n\nRun \ncondor_status\n in both windows\n\n\n\n\nNotice any differences?\n\n\nComparing operating systems\n\u00b6\n\n\nTo really see differences between slots in the local cluster vs the OSG, you will want to compare the slot ClassAds\nbetween the two pools.\nRather than inspecting the very long ClassAd for each slot, you will look at a specific attribute called \nOpSysAndVer\n,\nwhich tells us the operating system version of the machine where a slot resides.\nAn easy way to show this attribute for all slots is by using \ncondor_status\n in conjunction with the \n-autoformat\n\noption.\n\n-autoformat\n like the \n-format\n option you learned about yesterday will print out the attributes you're interested in\nfor each slot but as you probably guessed, it does some automatic formatting for you.\nSo to show the operating system and version of each slot, run the following command in both of your terminal windows:\n\n\nuser@submit-host $\n condor_status -autoformat OpSysAndVer\n\n\n\n\n\nYou will see many values with the type of operating system at the front and the version number at the end (i.e. SL6\nstands for Scientific Linux 6).\nThe only problem is that with hundreds or thousands of slots, it's difficult to get a feel for the composition of each\npool from this output.\nYou can find a count for each operating system by passing the \ncondor_status\n output into the \nsort\n and \nuniq\n\ncommands.\nYour command line should look something like this:\n\n\nuser@learn $\n condor_status -autoformat OpSysAndVer \n|\n sort \n|\n uniq -c\n\n\n\n\n\n\n\nNote\n\n\nFor \ntraining.osgconnect.net\n you will need to add the flag \n-pool flock.opensciencegrid.org\n to your \ncondor_status\n\ncommand.\n\n\n\n\nCan you spot the differences between the two pools now?\n\n\nSubmitting probe jobs\n\u00b6\n\n\nKnowing the type and version of the operating systems is a step in the right direction to knowing what kind of software\nwill be available on the machines that your jobs land on.\nHowever it still only serves as a proxy to the information that you really want: does the machine have the software that\nyou want?\nDoes it have the correct version?\n\n\nSoftware probe code\n\u00b6\n\n\nThe following shell script probes for software and returns the version if it is installed:\n\n\n#!/bin/sh\n\n\nget_version\n(){\n\n    \nprogram\n=\n$1\n\n    \n$program\n --version > /dev/null \n2\n>\n&\n1\n\n    \ndouble_dash_rc\n=\n$?\n\n    \n$program\n -version > /dev/null \n2\n>\n&\n1\n\n    \nsingle_dash_rc\n=\n$?\n\n    which \n$program\n > /dev/null \n2\n>\n&\n1\n\n    \nwhich_rc\n=\n$?\n\n    \nif\n \n[\n \n$double_dash_rc\n -eq \n0\n \n]\n;\n \nthen\n\n        \n$program\n --version \n2\n>\n&\n1\n\n    \nelif\n \n[\n \n$single_dash_rc\n -eq \n0\n \n]\n;\n \nthen\n\n        \n$program\n -version \n2\n>\n&\n1\n\n    \nelif\n \n[\n \n$which_rc\n -eq \n0\n \n]\n;\n \nthen\n\n        \necho\n \n\"\n$program\n installed but could not find version information\"\n\n    \nelse\n\n        \necho\n \n\"\n$program\n not installed\"\n\n    \nfi\n\n\n}\n\n\nget_version \n'R'\n\nget_version \n'cmake'\n\nget_version \n'python'\n\n\n\n\n\n\nIf there's a specific command line program that your research requires, feel free to add it to the script!\nFor example, if you wanted to test for the existence and version of \nnslookup\n, you would add the following to the end\nof the script:\n\n\nget_version\n \n'nslookup'\n\n\n\n\n\n\nProbing several machines\n\u00b6\n\n\nFor this part of the exercise, try creating a submit file without referring to previous exercises!\n\n\n\n\nLog in to \ntraining.osgconnect.net\n\n\nCreate and change into a new folder for this exercise, e.g. \nmonday-4.5\n\n\nSave the above script as a file named \nsw_probe.sh\n\n\nAs always, make sure that you can run your script from the command line before asking HTCondor to do so\n\n\nCreate a submit file that runs \nsw_probe.sh\n 100 times and uses macros to write different \noutput\n, \nerror\n, and\n    \nlog\n files\n\n\nSubmit your job and wait for the results\n\n\n\n\nWill you be able to do your research on the OSG with what's available?\nDon't fret if it doesn't look like you can: over the next few days, you'll learn how to make your jobs portable enough\nso that they can run anywhere!",
            "title": "Exercise 4.5"
        },
        {
            "location": "/materials/day1/part4-ex5-software-diffs/#monday-exercise-45-software-differences-in-the-osg",
            "text": "The goal of this exercise is to see the differences in availability of software in the OSG.\nAt your local cluster, you may be used to having certain versions of software but out on the OSG, it's possible that the\nsoftware you need won't even be installed.",
            "title": "Monday Exercise 4.5: Software Differences in the OSG"
        },
        {
            "location": "/materials/day1/part4-ex5-software-diffs/#refresher-condor95status",
            "text": "The OSG pool, like the local pool you used earlier today, is just another HTCondor pool.\nThis means that the commands you use will be the same and the jobs you submit can have similar payloads but there is one\nmajor difference: the slots are different!\nYou can use the  condor_status  command just as you did yesterday to inspect these differences.   Open two terminal windows side-by-side  Log in to  learn.chtc.wisc.edu  in one window and  training.osgconnect.net  in the other  Run  condor_status  in both windows   Notice any differences?",
            "title": "Refresher - condor_status"
        },
        {
            "location": "/materials/day1/part4-ex5-software-diffs/#comparing-operating-systems",
            "text": "To really see differences between slots in the local cluster vs the OSG, you will want to compare the slot ClassAds\nbetween the two pools.\nRather than inspecting the very long ClassAd for each slot, you will look at a specific attribute called  OpSysAndVer ,\nwhich tells us the operating system version of the machine where a slot resides.\nAn easy way to show this attribute for all slots is by using  condor_status  in conjunction with the  -autoformat \noption. -autoformat  like the  -format  option you learned about yesterday will print out the attributes you're interested in\nfor each slot but as you probably guessed, it does some automatic formatting for you.\nSo to show the operating system and version of each slot, run the following command in both of your terminal windows:  user@submit-host $  condor_status -autoformat OpSysAndVer  You will see many values with the type of operating system at the front and the version number at the end (i.e. SL6\nstands for Scientific Linux 6).\nThe only problem is that with hundreds or thousands of slots, it's difficult to get a feel for the composition of each\npool from this output.\nYou can find a count for each operating system by passing the  condor_status  output into the  sort  and  uniq \ncommands.\nYour command line should look something like this:  user@learn $  condor_status -autoformat OpSysAndVer  |  sort  |  uniq -c   Note  For  training.osgconnect.net  you will need to add the flag  -pool flock.opensciencegrid.org  to your  condor_status \ncommand.   Can you spot the differences between the two pools now?",
            "title": "Comparing operating systems"
        },
        {
            "location": "/materials/day1/part4-ex5-software-diffs/#submitting-probe-jobs",
            "text": "Knowing the type and version of the operating systems is a step in the right direction to knowing what kind of software\nwill be available on the machines that your jobs land on.\nHowever it still only serves as a proxy to the information that you really want: does the machine have the software that\nyou want?\nDoes it have the correct version?",
            "title": "Submitting probe jobs"
        },
        {
            "location": "/materials/day1/part4-ex5-software-diffs/#software-probe-code",
            "text": "The following shell script probes for software and returns the version if it is installed:  #!/bin/sh \n\nget_version (){ \n     program = $1 \n     $program  --version > /dev/null  2 > & 1 \n     double_dash_rc = $? \n     $program  -version > /dev/null  2 > & 1 \n     single_dash_rc = $? \n    which  $program  > /dev/null  2 > & 1 \n     which_rc = $? \n     if   [   $double_dash_rc  -eq  0   ] ;   then \n         $program  --version  2 > & 1 \n     elif   [   $single_dash_rc  -eq  0   ] ;   then \n         $program  -version  2 > & 1 \n     elif   [   $which_rc  -eq  0   ] ;   then \n         echo   \" $program  installed but could not find version information\" \n     else \n         echo   \" $program  not installed\" \n     fi  } \n\nget_version  'R' \nget_version  'cmake' \nget_version  'python'   If there's a specific command line program that your research requires, feel free to add it to the script!\nFor example, if you wanted to test for the existence and version of  nslookup , you would add the following to the end\nof the script:  get_version   'nslookup'",
            "title": "Software probe code"
        },
        {
            "location": "/materials/day1/part4-ex5-software-diffs/#probing-several-machines",
            "text": "For this part of the exercise, try creating a submit file without referring to previous exercises!   Log in to  training.osgconnect.net  Create and change into a new folder for this exercise, e.g.  monday-4.5  Save the above script as a file named  sw_probe.sh  As always, make sure that you can run your script from the command line before asking HTCondor to do so  Create a submit file that runs  sw_probe.sh  100 times and uses macros to write different  output ,  error , and\n     log  files  Submit your job and wait for the results   Will you be able to do your research on the OSG with what's available?\nDon't fret if it doesn't look like you can: over the next few days, you'll learn how to make your jobs portable enough\nso that they can run anywhere!",
            "title": "Probing several machines"
        },
        {
            "location": "/materials/day4/part4-ex1-simple-dag/",
            "text": "pre em { font-style: normal; background-color: yellow; }\n  pre strong { font-style: normal; font-weight: bold; color: \\#008; }\n\n\n\n\nMonday Exercise 4.1: Coordinating a Set of Jobs With a Simple DAG\n\u00b6\n\n\nThe objective of this exercise is to learn the very basics of running a set of jobs, where our set is just one job.\n\n\nWhat is DAGMan?\n\u00b6\n\n\nIn short, DAGMan lets you submit complex sequences of jobs as long as they can be expressed as a directed acylic graph.\nFor example, you may wish to run a large parameter sweep but before the sweep run you need to prepare your data.  After\nthe sweep runs, you need to collate the results.  This might look like this, assuming you want to sweep over five\nparameters:\n\n\n\n\nDAGMan has many abilities, such as throttling jobs, recovery from failures, and more.  More information about DAGMan can\nbe found at \nin the HTCondor manual\n.\n\n\nSubmitting a Simple DAG\n\u00b6\n\n\nFor our job, we will return briefly to the \nsleep\n program.\n\n\nexecutable\n              \n=\n \n/\nbin\n/\nsleep\n\n\narguments\n               \n=\n \n4\n\n\nlog\n                     \n=\n \nsimple\n.\nlog\n\n\noutput\n                  \n=\n \nsimple\n.\nout\n\n\nerror\n                   \n=\n \nsimple\n.\nerror\n\n\nrequest_memory\n \n=\n \n1\nGB\n\n\nrequest_disk\n \n=\n \n1\nGB\n\n\nrequest_cpus\n \n=\n \n1\n\n\nqueue\n\n\n\n\n\n\nWe are going to get a bit more sophisticated in submitting our jobs now.  Let's have three windows open.  In one window,\nyou'll submit the job.  In another you will watch the queue, and in the third you will watch what DAGMan does.\n\n\nFirst we will create the most minimal DAG that can be created: a DAG with just one node.  Put this into a file named\n\nsimple.dag\n.\n\n\nJob\n \nSimple\n \nsimple\n.\nsub\n\n\n\n\n\n\nIn your first window, submit the DAG:\n\n\nusername@learn $\n condor_submit_dag simple.dag\n\n-----------------------------------------------------------------------\n\n\nFile for submitting this DAG to Condor           : simple.dag.condor.sub\n\n\nLog of DAGMan debugging messages                 : simple.dag.dagman.out\n\n\nLog of Condor library output                     : simple.dag.lib.out\n\n\nLog of Condor library error messages             : simple.dag.lib.err\n\n\nLog of the life of condor_dagman itself          : simple.dag.dagman.log\n\n\n\nSubmitting job(s).\n\n\n1 job(s) submitted to cluster 61.\n\n\n-----------------------------------------------------------------------\n\n\n\n\n\n\nIn the second window, watch the queue:\n\n\nusername@learn $\n watch -n \n10\n condor_q -nobatch\n\n\n-- Submitter: learn.chtc.wisc.edu : <128.104.100.55:9618?sock=28867_10e4_2> : learn.chtc.wisc.edu\n\n\n ID      OWNER            SUBMITTED     RUN_TIME ST PRI SIZE CMD               \n\n\n  61.0   roy             6/21 22:51   0+00:00:01 R  0   0.3  condor_dagman     \n\n\n\n1 jobs; 0 completed, 0 removed, 0 idle, 1 running, 0 held, 0 suspended\n\n\n\n-- Submitter: learn.chtc.wisc.edu : <128.104.100.55:9618?sock=28867_10e4_2> : learn.chtc.wisc.edu\n\n\n ID      OWNER            SUBMITTED     RUN_TIME ST PRI SIZE CMD               \n\n\n  61.0   roy             6/21 22:51   0+00:01:25 R  0   0.3  condor_dagman     \n\n\n  62.0   roy             6/21 22:51   0+00:00:00 I  0   0.7  simple 4 10      \n\n\n\n2 jobs; 0 completed, 0 removed, 1 idle, 1 running, 0 held, 0 suspended\n\n\n\n-- Submitter: learn.chtc.wisc.edu : <128.104.100.55:9618?sock=28867_10e4_2> : learn.chtc.wisc.edu\n\n\n ID      OWNER            SUBMITTED     RUN_TIME ST PRI SIZE CMD               \n\n\n  61.0   roy             6/21 22:51   0+00:03:47 R  0   0.3  condor_dagman     \n\n\n  62.0   roy             6/21 22:51   0+00:00:03 R  0   0.7  simple 4 10      \n\n\n\n2 jobs; 0 completed, 0 removed, 0 idle, 2 running, 0 held, 0 suspended\n\n\n\n-- Submitter: learn.chtc.wisc.edu : <128.104.100.55:9618?sock=28867_10e4_2> : learn.chtc.wisc.edu\n\n\n ID      OWNER            SUBMITTED     RUN_TIME ST PRI SIZE CMD               \n\n\n\n0 jobs; 0 completed, 0 removed, 0 idle, 0 running, 0 held, 0 suspended\n\n\n#\n<Ctrl-C>\n\n\n\n\n\n\nIn the third window, watch what DAGMan does:\n\n\nusername@learn $\n tail -f --lines\n=\n500\n simple.dag.dagman.out\n\n6/21/12 22:51:13 Setting maximum accepts per cycle 8.\n\n\n06/21/12 22:51:13 ******************************************************\n\n\n06/21/12 22:51:13 ** condor_scheduniv_exec.61.0 (CONDOR_DAGMAN) STARTING UP\n\n\n06/21/12 22:51:13 ** /usr/bin/condor_dagman\n\n\n06/21/12 22:51:13 ** SubsystemInfo: name=DAGMAN type=DAGMAN(10) class=DAEMON(1)\n\n\n06/21/12 22:51:13 ** Configuration: subsystem:DAGMAN local:<NONE> class:DAEMON\n\n\n06/21/12 22:51:13 ** $CondorVersion: 7.7.6 Apr 16 2012 BuildID: 34175 PRE-RELEASE-UWCS $\n\n\n06/21/12 22:51:13 ** $CondorPlatform: x86_64_rhap_5.7 $\n\n\n06/21/12 22:51:13 ** PID = 5812\n\n\n06/21/12 22:51:13 ** Log last touched 6/21 22:51:00\n\n\n06/21/12 22:51:13 ******************************************************\n\n\n06/21/12 22:51:13 Using config source: /etc/condor/condor_config\n\n\n06/21/12 22:51:13 Using local config sources: \n\n\n06/21/12 22:51:13    /etc/condor/config.d/00-chtc-global.conf\n\n\n06/21/12 22:51:13    /etc/condor/config.d/01-chtc-submit.conf\n\n\n06/21/12 22:51:13    /etc/condor/config.d/02-chtc-flocking.conf\n\n\n06/21/12 22:51:13    /etc/condor/config.d/03-chtc-jobrouter.conf\n\n\n06/21/12 22:51:13    /etc/condor/config.d/04-chtc-blacklist.conf\n\n\n06/21/12 22:51:13    /etc/condor/config.d/99-osg-ss-group.conf\n\n\n06/21/12 22:51:13    /etc/condor/config.d/99-roy-extras.conf\n\n\n06/21/12 22:51:13    /etc/condor/condor_config.local\n\n\n06/21/12 22:51:13 DaemonCore: command socket at <128.104.100.55:60417>\n\n\n06/21/12 22:51:13 DaemonCore: private command socket at <128.104.100.55:60417>\n\n\n06/21/12 22:51:13 Setting maximum accepts per cycle 8.\n\n\n06/21/12 22:51:13 DAGMAN_USE_STRICT setting: 0\n\n\n06/21/12 22:51:13 DAGMAN_VERBOSITY setting: 3\n\n\n06/21/12 22:51:13 DAGMAN_DEBUG_CACHE_SIZE setting: 5242880\n\n\n06/21/12 22:51:13 DAGMAN_DEBUG_CACHE_ENABLE setting: False\n\n\n06/21/12 22:51:13 DAGMAN_SUBMIT_DELAY setting: 0\n\n\n06/21/12 22:51:13 DAGMAN_MAX_SUBMIT_ATTEMPTS setting: 6\n\n\n06/21/12 22:51:13 DAGMAN_STARTUP_CYCLE_DETECT setting: False\n\n\n06/21/12 22:51:13 DAGMAN_MAX_SUBMITS_PER_INTERVAL setting: 5\n\n\n06/21/12 22:51:13 DAGMAN_USER_LOG_SCAN_INTERVAL setting: 5\n\n\n06/21/12 22:51:13 allow_events (DAGMAN_IGNORE_DUPLICATE_JOB_EXECUTION, DAGMAN_ALLOW_EVENTS) setting: 114\n\n\n06/21/12 22:51:13 DAGMAN_RETRY_SUBMIT_FIRST setting: True\n\n\n06/21/12 22:51:13 DAGMAN_RETRY_NODE_FIRST setting: False\n\n\n06/21/12 22:51:13 DAGMAN_MAX_JOBS_IDLE setting: 0\n\n\n06/21/12 22:51:13 DAGMAN_MAX_JOBS_SUBMITTED setting: 0\n\n\n06/21/12 22:51:15 DAGMAN_MAX_PRE_SCRIPTS setting: 0\n\n\n06/21/12 22:51:15 DAGMAN_MAX_POST_SCRIPTS setting: 0\n\n\n06/21/12 22:51:15 DAGMAN_ALLOW_LOG_ERROR setting: False\n\n\n06/21/12 22:51:15 DAGMAN_MUNGE_NODE_NAMES setting: True\n\n\n06/21/12 22:51:15 DAGMAN_PROHIBIT_MULTI_JOBS setting: False\n\n\n06/21/12 22:51:15 DAGMAN_SUBMIT_DEPTH_FIRST setting: False\n\n\n06/21/12 22:51:15 DAGMAN_ALWAYS_RUN_POST setting: True\n\n\n06/21/12 22:51:15 DAGMAN_ABORT_DUPLICATES setting: True\n\n\n06/21/12 22:51:15 DAGMAN_ABORT_ON_SCARY_SUBMIT setting: True\n\n\n06/21/12 22:51:15 DAGMAN_PENDING_REPORT_INTERVAL setting: 600\n\n\n06/21/12 22:51:15 DAGMAN_AUTO_RESCUE setting: True\n\n\n06/21/12 22:51:15 DAGMAN_MAX_RESCUE_NUM setting: 100\n\n\n06/21/12 22:51:15 DAGMAN_WRITE_PARTIAL_RESCUE setting: True\n\n\n06/21/12 22:51:15 DAGMAN_DEFAULT_NODE_LOG setting: null\n\n\n06/21/12 22:51:15 DAGMAN_GENERATE_SUBDAG_SUBMITS setting: True\n\n\n06/21/12 22:51:15 ALL_DEBUG setting: \n\n\n06/21/12 22:51:15 DAGMAN_DEBUG setting: \n\n\n06/21/12 22:51:15 argv[0] == \"condor_scheduniv_exec.61.0\"\n\n\n06/21/12 22:51:15 argv[1] == \"-Lockfile\"\n\n\n06/21/12 22:51:15 argv[2] == \"simple.dag.lock\"\n\n\n06/21/12 22:51:15 argv[3] == \"-AutoRescue\"\n\n\n06/21/12 22:51:15 argv[4] == \"1\"\n\n\n06/21/12 22:51:15 argv[5] == \"-DoRescueFrom\"\n\n\n06/21/12 22:51:15 argv[6] == \"0\"\n\n\n06/21/12 22:51:15 argv[7] == \"-Dag\"\n\n\n06/21/12 22:51:15 argv[8] == \"simple.dag\"\n\n\n06/21/12 22:51:15 argv[9] == \"-CsdVersion\"\n\n\n06/21/12 22:51:15 argv[10] == \"$CondorVersion: 7.7.6 Apr 16 2012 BuildID: 34175 PRE-RELEASE-UWCS $\"\n\n\n06/21/12 22:51:15 argv[11] == \"-Force\"\n\n\n06/21/12 22:51:15 argv[12] == \"-Dagman\"\n\n\n06/21/12 22:51:15 argv[13] == \"/usr/bin/condor_dagman\"\n\n\n06/21/12 22:51:15 Default node log file is: </home/roy/condor/simple.dag.nodes.log>\n\n\n06/21/12 22:51:15 DAG Lockfile will be written to simple.dag.lock\n\n\n06/21/12 22:51:15 DAG Input file is simple.dag\n\n\n06/21/12 22:51:15 Parsing 1 dagfiles\n\n\n06/21/12 22:51:15 Parsing simple.dag ...\n\n\n06/21/12 22:51:15 Dag contains 1 total jobs\n\n\n06/21/12 22:51:15 Sleeping for 12 seconds to ensure ProcessId uniqueness\n\n\n06/21/12 22:51:27 Bootstrapping...\n\n\n06/21/12 22:51:27 Number of pre-completed nodes: 0\n\n\n06/21/12 22:51:27 Registering condor_event_timer...\n\n\n06/21/12 22:51:28 Sleeping for one second for log file consistency\n\n\n06/21/12 22:51:29 MultiLogFiles: truncating log file /home/roy/condor/simple.log\n\n\n06/21/12 22:51:29 Submitting Condor Node Simple job(s)...\n\n\n\n\n\n\nHere's where the job is submitted\n\n\n06\n/\n21\n/\n12\n \n22\n:\n51\n:\n29\n \nsubmitting\n: \ncondor_submit\n \n                              \n-\na\n \ndag_node_name\n'\n \n'\n=\n'\n \n'\nSimple\n \n                              \n-\na\n \n+\nDAGManJobId\n'\n \n'\n=\n'\n \n'\n61\n \n                              \n-\na\n \nDAGManJobId\n'\n \n'\n=\n'\n \n'\n61\n \n                              \n-\na\n \nsubmit_event_notes\n'\n \n'\n=\n'\n \n'\nDAG\n'\n \n'\nNode\n:\n'\n \n'\nSimple\n \n                              \n-\na\n \nDAG_STATUS\n'\n \n'\n=\n'\n \n'\n0\n \n                              \n-\na\n \nFAILED_COUNT\n'\n \n'\n=\n'\n \n'\n0\n \n                              \n-\na\n \n+\nDAGParentNodeNames\n'\n \n'\n=\n'\n \n'\n\"\"\n \nsubmit\n\n\n06\n/\n21\n/\n12\n \n22\n:\n51\n:\n30\n \nFrom\n \nsubmit\n: \nSubmitting\n \njob\n(\ns\n)\n.\n\n06\n/\n21\n/\n12\n \n22\n:\n51\n:\n30\n \nFrom\n \nsubmit\n: \n1\n \njob\n(\ns\n)\n \nsubmitted\n \nto\n \ncluster\n \n62\n.\n\n06\n/\n21\n/\n12\n \n22\n:\n51\n:\n30\n   \nassigned\n \nCondor\n \nID\n \n(\n62\n.\n0\n.\n0\n)\n\n\n06\n/\n21\n/\n12\n \n22\n:\n51\n:\n30\n \nJust\n \nsubmitted\n \n1\n \njob\n \nthis\n \ncycle\n...\n\n06\n/\n21\n/\n12\n \n22\n:\n51\n:\n30\n \nCurrently\n \nmonitoring\n \n1\n \nCondor\n \nlog\n \nfile\n(\ns\n)\n\n\n06\n/\n21\n/\n12\n \n22\n:\n51\n:\n30\n \nEvent\n: \nULOG_SUBMIT\n \nfor\n \nCondor\n \nNode\n \nSimple\n \n(\n62\n.\n0\n.\n0\n)\n\n\n06\n/\n21\n/\n12\n \n22\n:\n51\n:\n30\n \nNumber\n \nof\n \nidle\n \njob\n \nprocs\n: \n1\n\n\n06\n/\n21\n/\n12\n \n22\n:\n51\n:\n30\n \nOf\n \n1\n \nnodes\n \ntotal\n:\n\n06\n/\n21\n/\n12\n \n22\n:\n51\n:\n30\n  \nDone\n     \nPre\n   \nQueued\n    \nPost\n   \nReady\n   \nUn\n-\nReady\n   \nFailed\n\n\n06\n/\n21\n/\n12\n \n22\n:\n51\n:\n30\n   \n===\n     \n===\n      \n===\n     \n===\n     \n===\n        \n===\n      \n===\n\n\n06\n/\n21\n/\n12\n \n22\n:\n51\n:\n30\n     \n0\n       \n0\n        \n1\n       \n0\n       \n0\n          \n0\n        \n0\n\n\n06\n/\n21\n/\n12\n \n22\n:\n51\n:\n30\n \n0\n \njob\n \nproc\n(\ns\n)\n \ncurrently\n \nheld\n\n\n06\n/\n21\n/\n12\n \n22\n:\n55\n:\n05\n \nCurrently\n \nmonitoring\n \n1\n \nCondor\n \nlog\n \nfile\n(\ns\n)\n\n\n\n\n\n\nHere's where DAGMan noticed that the job is running\n\n\n06\n/\n21\n/\n12\n \n22\n:\n55\n:\n05\n \nEvent\n: \nULOG_EXECUTE\n \nfor\n \nCondor\n \nNode\n \nSimple\n \n(\n62\n.\n0\n.\n0\n)\n\n\n06\n/\n21\n/\n12\n \n22\n:\n55\n:\n05\n \nNumber\n \nof\n \nidle\n \njob\n \nprocs\n: \n0\n\n\n06\n/\n21\n/\n12\n \n22\n:\n55\n:\n10\n \nCurrently\n \nmonitoring\n \n1\n \nCondor\n \nlog\n \nfile\n(\ns\n)\n\n\n06\n/\n21\n/\n12\n \n22\n:\n55\n:\n10\n \nEvent\n: \nULOG_IMAGE_SIZE\n \nfor\n \nCondor\n \nNode\n \nSimple\n \n(\n62\n.\n0\n.\n0\n)\n\n\n06\n/\n21\n/\n12\n \n22\n:\n56\n:\n05\n \nCurrently\n \nmonitoring\n \n1\n \nCondor\n \nlog\n \nfile\n(\ns\n)\n\n\n06\n/\n21\n/\n12\n \n22\n:\n56\n:\n05\n \nEvent\n: \nULOG_IMAGE_SIZE\n \nfor\n \nCondor\n \nNode\n \nSimple\n \n(\n62\n.\n0\n.\n0\n)\n\n\n\n\n\n\nHere's where DAGMan noticed that the job finished.\n\n\n06\n/\n21\n/\n12\n \n22\n:\n56\n:\n05\n \nEvent\n: \nULOG_JOB_TERMINATED\n \nfor\n \nCondor\n \nNode\n \nSimple\n \n(\n62\n.\n0\n.\n0\n)\n\n\n06\n/\n21\n/\n12\n \n22\n:\n56\n:\n05\n \nNode\n \nSimple\n \njob\n \nproc\n \n(\n62\n.\n0\n.\n0\n)\n \ncompleted\n \nsuccessfully\n.\n\n06\n/\n21\n/\n12\n \n22\n:\n56\n:\n05\n \nNode\n \nSimple\n \njob\n \ncompleted\n\n\n06\n/\n21\n/\n12\n \n22\n:\n56\n:\n05\n \nNumber\n \nof\n \nidle\n \njob\n \nprocs\n: \n0\n\n\n06\n/\n21\n/\n12\n \n22\n:\n56\n:\n05\n \nOf\n \n1\n \nnodes\n \ntotal\n:\n\n06\n/\n21\n/\n12\n \n22\n:\n56\n:\n05\n  \nDone\n     \nPre\n   \nQueued\n    \nPost\n   \nReady\n   \nUn\n-\nReady\n   \nFailed\n\n\n06\n/\n21\n/\n12\n \n22\n:\n56\n:\n05\n   \n===\n     \n===\n      \n===\n     \n===\n     \n===\n        \n===\n      \n===\n\n\n06\n/\n21\n/\n12\n \n22\n:\n56\n:\n05\n     \n1\n       \n0\n        \n0\n       \n0\n       \n0\n          \n0\n        \n0\n\n\n06\n/\n21\n/\n12\n \n22\n:\n56\n:\n05\n \n0\n \njob\n \nproc\n(\ns\n)\n \ncurrently\n \nheld\n\n\n\n\n\n\nHere's where DAGMan noticed that all the work is done.\n\n\n06\n/\n21\n/\n12\n \n22\n:\n56\n:\n05\n \nAll\n \njobs\n \nCompleted\n!\n\n\n06\n/\n21\n/\n12\n \n22\n:\n56\n:\n05\n \nNote\n:\n \n0\n \ntotal\n \njob\n \ndeferrals\n \nbecause\n \nof\n \n-\nMaxJobs\n \nlimit\n \n(\n0\n)\n\n\n06\n/\n21\n/\n12\n \n22\n:\n56\n:\n05\n \nNote\n:\n \n0\n \ntotal\n \njob\n \ndeferrals\n \nbecause\n \nof\n \n-\nMaxIdle\n \nlimit\n \n(\n0\n)\n\n\n06\n/\n21\n/\n12\n \n22\n:\n56\n:\n05\n \nNote\n:\n \n0\n \ntotal\n \njob\n \ndeferrals\n \nbecause\n \nof\n \nnode\n \ncategory\n \nthrottles\n\n\n06\n/\n21\n/\n12\n \n22\n:\n56\n:\n05\n \nNote\n:\n \n0\n \ntotal\n \nPRE\n \nscript\n \ndeferrals\n \nbecause\n \nof\n \n-\nMaxPre\n \nlimit\n \n(\n0\n)\n\n\n06\n/\n21\n/\n12\n \n22\n:\n56\n:\n05\n \nNote\n:\n \n0\n \ntotal\n \nPOST\n \nscript\n \ndeferrals\n \nbecause\n \nof\n \n-\nMaxPost\n \nlimit\n \n(\n0\n)\n\n\n06\n/\n21\n/\n12\n \n22\n:\n56\n:\n05\n \n****\n \ncondor_scheduniv_exec\n.\n61\n.\n0\n \n(\ncondor_DAGMAN\n)\n \npid\n \n5812\n \nEXITING\n \nWITH\n \nSTATUS\n \n0\n\n\n\n\n\n\nNow verify your results:\n\n\nusername@learn $\n cat simple.log\n\n000 (062.000.000) 06/21 22:51:30 Job submitted from host: <128.104.100.55:9618?sock=28867_10e4_2>\n\n\n    DAG Node: Simple\n\n\n...\n\n\n001 (062.000.000) 06/21 22:55:00 Job executing on host: <128.104.58.36:46761>\n\n\n...\n\n\n006 (062.000.000) 06/21 22:55:09 Image size of job updated: 750\n\n\n    3  -  MemoryUsage of job (MB)\n\n\n    2324  -  ResidentSetSize of job (KB)\n\n\n...\n\n\n006 (062.000.000) 06/21 22:56:00 Image size of job updated: 780\n\n\n    3  -  MemoryUsage of job (MB)\n\n\n    2324  -  ResidentSetSize of job (KB)\n\n\n...\n\n\n005 (062.000.000) 06/21 22:56:00 Job terminated.\n\n\n    (1) Normal termination (return value 0)\n\n\n        Usr 0 00:00:00, Sys 0 00:00:00  -  Run Remote Usage\n\n\n        Usr 0 00:00:00, Sys 0 00:00:00  -  Run Local Usage\n\n\n        Usr 0 00:00:00, Sys 0 00:00:00  -  Total Remote Usage\n\n\n        Usr 0 00:00:00, Sys 0 00:00:00  -  Total Local Usage\n\n\n    57  -  Run Bytes Sent By Job\n\n\n    608490  -  Run Bytes Received By Job\n\n\n    57  -  Total Bytes Sent By Job\n\n\n    608490  -  Total Bytes Received By Job\n\n\n    Partitionable Resources :    Usage  Request          \n\n\n       Cpus                 :                 1          \n\n\n       Disk (KB)            :      750      750          \n\n\n       Memory (MB)          :        3        3          \n\n\n...\n\n\n\n\n\n\nLooking at DAGMan's various files, we see that DAGMan itself ran as a Condor job (specifically, a scheduler universe job).\n\n\nusername@learn $\n ls simple.dag.*\n\nsimple.dag.condor.sub  simple.dag.dagman.log  simple.dag.dagman.out  simple.dag.lib.err  simple.dag.lib.out \n\n\n\nusername@learn $\n cat simple.dag.condor.sub\n\n#\n Filename: simple.dag.condor.sub\n\n#\n Generated by condor_submit_dag simple.dag \n\nuniverse    = scheduler\n\n\nexecutable  = /usr/bin/condor_dagman\n\n\ngetenv      = True\n\n\noutput      = simple.dag.lib.out\n\n\nerror       = simple.dag.lib.err\n\n\nlog     = simple.dag.dagman.log\n\n\nremove_kill_sig = SIGUSR1\n\n\n+OtherJobRemoveRequirements = \"DAGManJobId == $(cluster)\"\n\n\n#\n Note: default on_exit_remove expression:\n\n#\n \n(\n \nExitSignal\n \n=\n?\n=\n \n11\n \n||\n \n(\nExitCode\n \n=\n!\n=\n UNDEFINED \n&&\n ExitCode >\n=\n0\n \n&&\n ExitCode <\n=\n \n2\n))\n\n\n#\n attempts to ensure that DAGMan is automatically\n\n#\n requeued by the schedd \nif\n it exits abnormally or\n\n#\n is killed \n(\ne.g., during a reboot\n)\n.\n\non_exit_remove  = ( ExitSignal =?= 11 || (ExitCode =!= UNDEFINED && ExitCode >=0 && ExitCode <= 2))\n\n\ncopy_to_spool   = False\n\n\narguments   = \"-f -l . -Lockfile simple.dag.lock -AutoRescue 1 -DoRescueFrom 0 -Dag simple.dag \n\n\n                              -CsdVersion $CondorVersion:' '7.7.6' 'Apr' '16' '2012' 'BuildID:' '34175' 'PRE-RELEASE-UWCS' '$ -Force -Dagman /usr/bin/condor_dagman\"\n\n\nenvironment = _CONDOR_DAGMAN_LOG=simple.dag.dagman.out;_CONDOR_MAX_DAGMAN_LOG=0\n\n\nqueue\n\n\n\n\n\n\nIF you want to clean up some of these files (you may not want to, at least not yet):\n\n\nusername@learn $\n rm simple.dag.*\n\n\n\n\n\nChallenge\n\u00b6\n\n\n\n\nWhat is the scheduler universe? Why does DAGMan use it?",
            "title": "Exercise 4.1"
        },
        {
            "location": "/materials/day4/part4-ex1-simple-dag/#monday-exercise-41-coordinating-a-set-of-jobs-with-a-simple-dag",
            "text": "The objective of this exercise is to learn the very basics of running a set of jobs, where our set is just one job.",
            "title": "Monday Exercise 4.1: Coordinating a Set of Jobs With a Simple DAG"
        },
        {
            "location": "/materials/day4/part4-ex1-simple-dag/#what-is-dagman",
            "text": "In short, DAGMan lets you submit complex sequences of jobs as long as they can be expressed as a directed acylic graph.\nFor example, you may wish to run a large parameter sweep but before the sweep run you need to prepare your data.  After\nthe sweep runs, you need to collate the results.  This might look like this, assuming you want to sweep over five\nparameters:   DAGMan has many abilities, such as throttling jobs, recovery from failures, and more.  More information about DAGMan can\nbe found at  in the HTCondor manual .",
            "title": "What is DAGMan?"
        },
        {
            "location": "/materials/day4/part4-ex1-simple-dag/#submitting-a-simple-dag",
            "text": "For our job, we will return briefly to the  sleep  program.  executable                =   / bin / sleep  arguments                 =   4  log                       =   simple . log  output                    =   simple . out  error                     =   simple . error  request_memory   =   1 GB  request_disk   =   1 GB  request_cpus   =   1  queue   We are going to get a bit more sophisticated in submitting our jobs now.  Let's have three windows open.  In one window,\nyou'll submit the job.  In another you will watch the queue, and in the third you will watch what DAGMan does.  First we will create the most minimal DAG that can be created: a DAG with just one node.  Put this into a file named simple.dag .  Job   Simple   simple . sub   In your first window, submit the DAG:  username@learn $  condor_submit_dag simple.dag -----------------------------------------------------------------------  File for submitting this DAG to Condor           : simple.dag.condor.sub  Log of DAGMan debugging messages                 : simple.dag.dagman.out  Log of Condor library output                     : simple.dag.lib.out  Log of Condor library error messages             : simple.dag.lib.err  Log of the life of condor_dagman itself          : simple.dag.dagman.log  Submitting job(s).  1 job(s) submitted to cluster 61.  -----------------------------------------------------------------------   In the second window, watch the queue:  username@learn $  watch -n  10  condor_q -nobatch -- Submitter: learn.chtc.wisc.edu : <128.104.100.55:9618?sock=28867_10e4_2> : learn.chtc.wisc.edu   ID      OWNER            SUBMITTED     RUN_TIME ST PRI SIZE CMD                   61.0   roy             6/21 22:51   0+00:00:01 R  0   0.3  condor_dagman       1 jobs; 0 completed, 0 removed, 0 idle, 1 running, 0 held, 0 suspended  -- Submitter: learn.chtc.wisc.edu : <128.104.100.55:9618?sock=28867_10e4_2> : learn.chtc.wisc.edu   ID      OWNER            SUBMITTED     RUN_TIME ST PRI SIZE CMD                   61.0   roy             6/21 22:51   0+00:01:25 R  0   0.3  condor_dagman         62.0   roy             6/21 22:51   0+00:00:00 I  0   0.7  simple 4 10        2 jobs; 0 completed, 0 removed, 1 idle, 1 running, 0 held, 0 suspended  -- Submitter: learn.chtc.wisc.edu : <128.104.100.55:9618?sock=28867_10e4_2> : learn.chtc.wisc.edu   ID      OWNER            SUBMITTED     RUN_TIME ST PRI SIZE CMD                   61.0   roy             6/21 22:51   0+00:03:47 R  0   0.3  condor_dagman         62.0   roy             6/21 22:51   0+00:00:03 R  0   0.7  simple 4 10        2 jobs; 0 completed, 0 removed, 0 idle, 2 running, 0 held, 0 suspended  -- Submitter: learn.chtc.wisc.edu : <128.104.100.55:9618?sock=28867_10e4_2> : learn.chtc.wisc.edu   ID      OWNER            SUBMITTED     RUN_TIME ST PRI SIZE CMD                 0 jobs; 0 completed, 0 removed, 0 idle, 0 running, 0 held, 0 suspended  # <Ctrl-C>   In the third window, watch what DAGMan does:  username@learn $  tail -f --lines = 500  simple.dag.dagman.out 6/21/12 22:51:13 Setting maximum accepts per cycle 8.  06/21/12 22:51:13 ******************************************************  06/21/12 22:51:13 ** condor_scheduniv_exec.61.0 (CONDOR_DAGMAN) STARTING UP  06/21/12 22:51:13 ** /usr/bin/condor_dagman  06/21/12 22:51:13 ** SubsystemInfo: name=DAGMAN type=DAGMAN(10) class=DAEMON(1)  06/21/12 22:51:13 ** Configuration: subsystem:DAGMAN local:<NONE> class:DAEMON  06/21/12 22:51:13 ** $CondorVersion: 7.7.6 Apr 16 2012 BuildID: 34175 PRE-RELEASE-UWCS $  06/21/12 22:51:13 ** $CondorPlatform: x86_64_rhap_5.7 $  06/21/12 22:51:13 ** PID = 5812  06/21/12 22:51:13 ** Log last touched 6/21 22:51:00  06/21/12 22:51:13 ******************************************************  06/21/12 22:51:13 Using config source: /etc/condor/condor_config  06/21/12 22:51:13 Using local config sources:   06/21/12 22:51:13    /etc/condor/config.d/00-chtc-global.conf  06/21/12 22:51:13    /etc/condor/config.d/01-chtc-submit.conf  06/21/12 22:51:13    /etc/condor/config.d/02-chtc-flocking.conf  06/21/12 22:51:13    /etc/condor/config.d/03-chtc-jobrouter.conf  06/21/12 22:51:13    /etc/condor/config.d/04-chtc-blacklist.conf  06/21/12 22:51:13    /etc/condor/config.d/99-osg-ss-group.conf  06/21/12 22:51:13    /etc/condor/config.d/99-roy-extras.conf  06/21/12 22:51:13    /etc/condor/condor_config.local  06/21/12 22:51:13 DaemonCore: command socket at <128.104.100.55:60417>  06/21/12 22:51:13 DaemonCore: private command socket at <128.104.100.55:60417>  06/21/12 22:51:13 Setting maximum accepts per cycle 8.  06/21/12 22:51:13 DAGMAN_USE_STRICT setting: 0  06/21/12 22:51:13 DAGMAN_VERBOSITY setting: 3  06/21/12 22:51:13 DAGMAN_DEBUG_CACHE_SIZE setting: 5242880  06/21/12 22:51:13 DAGMAN_DEBUG_CACHE_ENABLE setting: False  06/21/12 22:51:13 DAGMAN_SUBMIT_DELAY setting: 0  06/21/12 22:51:13 DAGMAN_MAX_SUBMIT_ATTEMPTS setting: 6  06/21/12 22:51:13 DAGMAN_STARTUP_CYCLE_DETECT setting: False  06/21/12 22:51:13 DAGMAN_MAX_SUBMITS_PER_INTERVAL setting: 5  06/21/12 22:51:13 DAGMAN_USER_LOG_SCAN_INTERVAL setting: 5  06/21/12 22:51:13 allow_events (DAGMAN_IGNORE_DUPLICATE_JOB_EXECUTION, DAGMAN_ALLOW_EVENTS) setting: 114  06/21/12 22:51:13 DAGMAN_RETRY_SUBMIT_FIRST setting: True  06/21/12 22:51:13 DAGMAN_RETRY_NODE_FIRST setting: False  06/21/12 22:51:13 DAGMAN_MAX_JOBS_IDLE setting: 0  06/21/12 22:51:13 DAGMAN_MAX_JOBS_SUBMITTED setting: 0  06/21/12 22:51:15 DAGMAN_MAX_PRE_SCRIPTS setting: 0  06/21/12 22:51:15 DAGMAN_MAX_POST_SCRIPTS setting: 0  06/21/12 22:51:15 DAGMAN_ALLOW_LOG_ERROR setting: False  06/21/12 22:51:15 DAGMAN_MUNGE_NODE_NAMES setting: True  06/21/12 22:51:15 DAGMAN_PROHIBIT_MULTI_JOBS setting: False  06/21/12 22:51:15 DAGMAN_SUBMIT_DEPTH_FIRST setting: False  06/21/12 22:51:15 DAGMAN_ALWAYS_RUN_POST setting: True  06/21/12 22:51:15 DAGMAN_ABORT_DUPLICATES setting: True  06/21/12 22:51:15 DAGMAN_ABORT_ON_SCARY_SUBMIT setting: True  06/21/12 22:51:15 DAGMAN_PENDING_REPORT_INTERVAL setting: 600  06/21/12 22:51:15 DAGMAN_AUTO_RESCUE setting: True  06/21/12 22:51:15 DAGMAN_MAX_RESCUE_NUM setting: 100  06/21/12 22:51:15 DAGMAN_WRITE_PARTIAL_RESCUE setting: True  06/21/12 22:51:15 DAGMAN_DEFAULT_NODE_LOG setting: null  06/21/12 22:51:15 DAGMAN_GENERATE_SUBDAG_SUBMITS setting: True  06/21/12 22:51:15 ALL_DEBUG setting:   06/21/12 22:51:15 DAGMAN_DEBUG setting:   06/21/12 22:51:15 argv[0] == \"condor_scheduniv_exec.61.0\"  06/21/12 22:51:15 argv[1] == \"-Lockfile\"  06/21/12 22:51:15 argv[2] == \"simple.dag.lock\"  06/21/12 22:51:15 argv[3] == \"-AutoRescue\"  06/21/12 22:51:15 argv[4] == \"1\"  06/21/12 22:51:15 argv[5] == \"-DoRescueFrom\"  06/21/12 22:51:15 argv[6] == \"0\"  06/21/12 22:51:15 argv[7] == \"-Dag\"  06/21/12 22:51:15 argv[8] == \"simple.dag\"  06/21/12 22:51:15 argv[9] == \"-CsdVersion\"  06/21/12 22:51:15 argv[10] == \"$CondorVersion: 7.7.6 Apr 16 2012 BuildID: 34175 PRE-RELEASE-UWCS $\"  06/21/12 22:51:15 argv[11] == \"-Force\"  06/21/12 22:51:15 argv[12] == \"-Dagman\"  06/21/12 22:51:15 argv[13] == \"/usr/bin/condor_dagman\"  06/21/12 22:51:15 Default node log file is: </home/roy/condor/simple.dag.nodes.log>  06/21/12 22:51:15 DAG Lockfile will be written to simple.dag.lock  06/21/12 22:51:15 DAG Input file is simple.dag  06/21/12 22:51:15 Parsing 1 dagfiles  06/21/12 22:51:15 Parsing simple.dag ...  06/21/12 22:51:15 Dag contains 1 total jobs  06/21/12 22:51:15 Sleeping for 12 seconds to ensure ProcessId uniqueness  06/21/12 22:51:27 Bootstrapping...  06/21/12 22:51:27 Number of pre-completed nodes: 0  06/21/12 22:51:27 Registering condor_event_timer...  06/21/12 22:51:28 Sleeping for one second for log file consistency  06/21/12 22:51:29 MultiLogFiles: truncating log file /home/roy/condor/simple.log  06/21/12 22:51:29 Submitting Condor Node Simple job(s)...   Here's where the job is submitted  06 / 21 / 12   22 : 51 : 29   submitting :  condor_submit  \n                               - a   dag_node_name '   ' = '   ' Simple  \n                               - a   + DAGManJobId '   ' = '   ' 61  \n                               - a   DAGManJobId '   ' = '   ' 61  \n                               - a   submit_event_notes '   ' = '   ' DAG '   ' Node : '   ' Simple  \n                               - a   DAG_STATUS '   ' = '   ' 0  \n                               - a   FAILED_COUNT '   ' = '   ' 0  \n                               - a   + DAGParentNodeNames '   ' = '   ' \"\"   submit  06 / 21 / 12   22 : 51 : 30   From   submit :  Submitting   job ( s ) . 06 / 21 / 12   22 : 51 : 30   From   submit :  1   job ( s )   submitted   to   cluster   62 . 06 / 21 / 12   22 : 51 : 30     assigned   Condor   ID   ( 62 . 0 . 0 )  06 / 21 / 12   22 : 51 : 30   Just   submitted   1   job   this   cycle ... 06 / 21 / 12   22 : 51 : 30   Currently   monitoring   1   Condor   log   file ( s )  06 / 21 / 12   22 : 51 : 30   Event :  ULOG_SUBMIT   for   Condor   Node   Simple   ( 62 . 0 . 0 )  06 / 21 / 12   22 : 51 : 30   Number   of   idle   job   procs :  1  06 / 21 / 12   22 : 51 : 30   Of   1   nodes   total : 06 / 21 / 12   22 : 51 : 30    Done       Pre     Queued      Post     Ready     Un - Ready     Failed  06 / 21 / 12   22 : 51 : 30     ===       ===        ===       ===       ===          ===        ===  06 / 21 / 12   22 : 51 : 30       0         0          1         0         0            0          0  06 / 21 / 12   22 : 51 : 30   0   job   proc ( s )   currently   held  06 / 21 / 12   22 : 55 : 05   Currently   monitoring   1   Condor   log   file ( s )   Here's where DAGMan noticed that the job is running  06 / 21 / 12   22 : 55 : 05   Event :  ULOG_EXECUTE   for   Condor   Node   Simple   ( 62 . 0 . 0 )  06 / 21 / 12   22 : 55 : 05   Number   of   idle   job   procs :  0  06 / 21 / 12   22 : 55 : 10   Currently   monitoring   1   Condor   log   file ( s )  06 / 21 / 12   22 : 55 : 10   Event :  ULOG_IMAGE_SIZE   for   Condor   Node   Simple   ( 62 . 0 . 0 )  06 / 21 / 12   22 : 56 : 05   Currently   monitoring   1   Condor   log   file ( s )  06 / 21 / 12   22 : 56 : 05   Event :  ULOG_IMAGE_SIZE   for   Condor   Node   Simple   ( 62 . 0 . 0 )   Here's where DAGMan noticed that the job finished.  06 / 21 / 12   22 : 56 : 05   Event :  ULOG_JOB_TERMINATED   for   Condor   Node   Simple   ( 62 . 0 . 0 )  06 / 21 / 12   22 : 56 : 05   Node   Simple   job   proc   ( 62 . 0 . 0 )   completed   successfully . 06 / 21 / 12   22 : 56 : 05   Node   Simple   job   completed  06 / 21 / 12   22 : 56 : 05   Number   of   idle   job   procs :  0  06 / 21 / 12   22 : 56 : 05   Of   1   nodes   total : 06 / 21 / 12   22 : 56 : 05    Done       Pre     Queued      Post     Ready     Un - Ready     Failed  06 / 21 / 12   22 : 56 : 05     ===       ===        ===       ===       ===          ===        ===  06 / 21 / 12   22 : 56 : 05       1         0          0         0         0            0          0  06 / 21 / 12   22 : 56 : 05   0   job   proc ( s )   currently   held   Here's where DAGMan noticed that all the work is done.  06 / 21 / 12   22 : 56 : 05   All   jobs   Completed !  06 / 21 / 12   22 : 56 : 05   Note :   0   total   job   deferrals   because   of   - MaxJobs   limit   ( 0 )  06 / 21 / 12   22 : 56 : 05   Note :   0   total   job   deferrals   because   of   - MaxIdle   limit   ( 0 )  06 / 21 / 12   22 : 56 : 05   Note :   0   total   job   deferrals   because   of   node   category   throttles  06 / 21 / 12   22 : 56 : 05   Note :   0   total   PRE   script   deferrals   because   of   - MaxPre   limit   ( 0 )  06 / 21 / 12   22 : 56 : 05   Note :   0   total   POST   script   deferrals   because   of   - MaxPost   limit   ( 0 )  06 / 21 / 12   22 : 56 : 05   ****   condor_scheduniv_exec . 61 . 0   ( condor_DAGMAN )   pid   5812   EXITING   WITH   STATUS   0   Now verify your results:  username@learn $  cat simple.log 000 (062.000.000) 06/21 22:51:30 Job submitted from host: <128.104.100.55:9618?sock=28867_10e4_2>      DAG Node: Simple  ...  001 (062.000.000) 06/21 22:55:00 Job executing on host: <128.104.58.36:46761>  ...  006 (062.000.000) 06/21 22:55:09 Image size of job updated: 750      3  -  MemoryUsage of job (MB)      2324  -  ResidentSetSize of job (KB)  ...  006 (062.000.000) 06/21 22:56:00 Image size of job updated: 780      3  -  MemoryUsage of job (MB)      2324  -  ResidentSetSize of job (KB)  ...  005 (062.000.000) 06/21 22:56:00 Job terminated.      (1) Normal termination (return value 0)          Usr 0 00:00:00, Sys 0 00:00:00  -  Run Remote Usage          Usr 0 00:00:00, Sys 0 00:00:00  -  Run Local Usage          Usr 0 00:00:00, Sys 0 00:00:00  -  Total Remote Usage          Usr 0 00:00:00, Sys 0 00:00:00  -  Total Local Usage      57  -  Run Bytes Sent By Job      608490  -  Run Bytes Received By Job      57  -  Total Bytes Sent By Job      608490  -  Total Bytes Received By Job      Partitionable Resources :    Usage  Request                   Cpus                 :                 1                   Disk (KB)            :      750      750                   Memory (MB)          :        3        3            ...   Looking at DAGMan's various files, we see that DAGMan itself ran as a Condor job (specifically, a scheduler universe job).  username@learn $  ls simple.dag.* simple.dag.condor.sub  simple.dag.dagman.log  simple.dag.dagman.out  simple.dag.lib.err  simple.dag.lib.out   username@learn $  cat simple.dag.condor.sub #  Filename: simple.dag.condor.sub #  Generated by condor_submit_dag simple.dag  universe    = scheduler  executable  = /usr/bin/condor_dagman  getenv      = True  output      = simple.dag.lib.out  error       = simple.dag.lib.err  log     = simple.dag.dagman.log  remove_kill_sig = SIGUSR1  +OtherJobRemoveRequirements = \"DAGManJobId == $(cluster)\"  #  Note: default on_exit_remove expression: #   (   ExitSignal   = ? =   11   ||   ( ExitCode   = ! =  UNDEFINED  &&  ExitCode > = 0   &&  ExitCode < =   2 ))  #  attempts to ensure that DAGMan is automatically #  requeued by the schedd  if  it exits abnormally or #  is killed  ( e.g., during a reboot ) . on_exit_remove  = ( ExitSignal =?= 11 || (ExitCode =!= UNDEFINED && ExitCode >=0 && ExitCode <= 2))  copy_to_spool   = False  arguments   = \"-f -l . -Lockfile simple.dag.lock -AutoRescue 1 -DoRescueFrom 0 -Dag simple.dag                                 -CsdVersion $CondorVersion:' '7.7.6' 'Apr' '16' '2012' 'BuildID:' '34175' 'PRE-RELEASE-UWCS' '$ -Force -Dagman /usr/bin/condor_dagman\"  environment = _CONDOR_DAGMAN_LOG=simple.dag.dagman.out;_CONDOR_MAX_DAGMAN_LOG=0  queue   IF you want to clean up some of these files (you may not want to, at least not yet):  username@learn $  rm simple.dag.*",
            "title": "Submitting a Simple DAG"
        },
        {
            "location": "/materials/day4/part4-ex1-simple-dag/#challenge",
            "text": "What is the scheduler universe? Why does DAGMan use it?",
            "title": "Challenge"
        },
        {
            "location": "/materials/day4/part4-ex2-mandelbrot/",
            "text": "pre em { font-style: normal; background-color: yellow; } pre strong { font-style: normal; font-weight: bold; color: \\#008; } \n\n\n\nMonday Exercise 4.2: A Brief Detour Through the Mandelbrot Set\n\u00b6\n\n\nBefore we explore using DAGs to implement workflows, let\u2019s get a more interesting job. Let\u2019s make pretty pictures!\n\n\nWe have a small program that draws pictures of the Mandelbrot set. You can \nread about the Mandelbrot set on Wikipedia\n, or you can simply appreciate the pretty pictures. It\u2019s a fractal.\n\n\nWe have a simple program that can draw the Mandelbrot set. It's called \ngoatbrot\n, and you can find it on most Linux servers in \n/usr/local/bin/goatbrot\n.\n\n\nRunning goatbrot From the Command Line\n\u00b6\n\n\nYou can generate the Mandelbrot set as a quick test with two simple commands.\n\n\n\n\n\n\nGenerate a PPM image of the Mandelbrot set:\n\n\nusername@learn $\n /usr/local/bin/goatbrot -i \n1000\n -o tile_000000_000000.ppm -c \n0\n,0 -w \n3\n -s \n1000\n,1000\n\n\n\n\n\nThe \ngoatbroat\n program takes several parameters. Let's break them down:\n\n\n\n\n-i 1000\n The number of iterations. Bigger numbers generate more accurate images but are slower to run.\n\n\n-o tile_000000_000000.ppm\n The output file to generate.\n\n\n-c 0,0\n The center point of the image. Here it is the point (0,0).\n\n\n-w 3\n The width of the image. Here is 3.\n\n\n-s 1000,1000\n The size of the final image. Here we generate a picture that is 1000 pixels wide and 1000 pixels tall.\n\n\n\n\n\n\n\n\nConvert the image to the JPEG format (using a built-in program called \nconvert\n):\n\n\nusername@learn $\n convert tile_000000_000000.ppm mandel.jpg\n\n\n\n\n\n\n\n\n\nDividing the Work into Smaller Pieces\n\u00b6\n\n\nThe Mandelbrot set can take a while to create, particularly if you make the iterations large or the image size large. What if we broke the creation of the image into multiple invocations (an HTC approach!) then stitched them together? Once we do that, we can run the each goatbroat in parallel in our cluster. Here's an example you can run by hand.\n\n\n\n\n\n\nRun goatbroat 4 times:\n\n\nusername@learn $\n /usr/local/bin/goatbrot -i \n1000\n -o tile_000000_000000.ppm -c -0.75,0.75 -w \n1\n.5 -s \n500\n,500\n\nusername@learn $\n /usr/local/bin/goatbrot -i \n1000\n -o tile_000000_000001.ppm -c \n0\n.75,0.75 -w \n1\n.5 -s \n500\n,500 \n\nusername@learn $\n /usr/local/bin/goatbrot -i \n1000\n -o tile_000001_000000.ppm -c -0.75,-0.75 -w \n1\n.5 -s \n500\n,500 \n\nusername@learn $\n /usr/local/bin/goatbrot -i \n1000\n -o tile_000001_000001.ppm -c \n0\n.75,-0.75 -w \n1\n.5 -s \n500\n,500\n\n\n\n\n\n\n\n\n\nStitch the small images together into the complete image (in JPEG format):\n\n\nusername@learn $\n montage tile_000000_000000.ppm tile_000000_000001.ppm tile_000001_000000.ppm tile_000001_000001.ppm -mode Concatenate -tile 2x2 mandel.jpg\n\n\n\n\n\n\n\n\n\nThis will produce the same image as above. We divided the image space into a 2\u00d72 grid and ran \ngoatbrot\n on each section of the grid. The built-in \nmontage\n program simply stitches the files together and writes out the final image in JPEG format.\n\n\nView the Image!\n\u00b6\n\n\nRun the commands above, make sure you can create the Mandelbrot image. \nWhen you create the image, you might wonder how you can view it. \nIf you're comfortable with \nscp\n or another method, you can copy it back to your laptop to view it. Otherwise you can view it in your web browser in three easy steps:\n\n\n\n\n\n\nMake your web directory (you only need to do this once):\n\n\nusername@learn $\n \ncd\n ~\n\nusername@learn $\n mkdir public_html \n\nusername@learn $\n chmod \n0711\n . \n\nusername@learn $\n chmod \n0755\n public_html\n\n\n\n\n\n\n\n\n\nCopy the image into your web directory (the below command assumes you're back in the directory where you created mandel.jpg):\n\n\nusername@learn $\n cp mandel.jpg ~/public_html/\n\n\n\n\n\n\n\n\n\nAccess \nhttp://learn.chtc.wisc.edu/~\n<USERNAME>\n/mandel.jpg\n in your web browser (change \n to your username on the submit machine).",
            "title": "Exercise 4.2"
        },
        {
            "location": "/materials/day4/part4-ex2-mandelbrot/#monday-exercise-42-a-brief-detour-through-the-mandelbrot-set",
            "text": "Before we explore using DAGs to implement workflows, let\u2019s get a more interesting job. Let\u2019s make pretty pictures!  We have a small program that draws pictures of the Mandelbrot set. You can  read about the Mandelbrot set on Wikipedia , or you can simply appreciate the pretty pictures. It\u2019s a fractal.  We have a simple program that can draw the Mandelbrot set. It's called  goatbrot , and you can find it on most Linux servers in  /usr/local/bin/goatbrot .",
            "title": "Monday Exercise 4.2: A Brief Detour Through the Mandelbrot Set"
        },
        {
            "location": "/materials/day4/part4-ex2-mandelbrot/#running-goatbrot-from-the-command-line",
            "text": "You can generate the Mandelbrot set as a quick test with two simple commands.    Generate a PPM image of the Mandelbrot set:  username@learn $  /usr/local/bin/goatbrot -i  1000  -o tile_000000_000000.ppm -c  0 ,0 -w  3  -s  1000 ,1000  The  goatbroat  program takes several parameters. Let's break them down:   -i 1000  The number of iterations. Bigger numbers generate more accurate images but are slower to run.  -o tile_000000_000000.ppm  The output file to generate.  -c 0,0  The center point of the image. Here it is the point (0,0).  -w 3  The width of the image. Here is 3.  -s 1000,1000  The size of the final image. Here we generate a picture that is 1000 pixels wide and 1000 pixels tall.     Convert the image to the JPEG format (using a built-in program called  convert ):  username@learn $  convert tile_000000_000000.ppm mandel.jpg",
            "title": "Running goatbrot From the Command Line"
        },
        {
            "location": "/materials/day4/part4-ex2-mandelbrot/#dividing-the-work-into-smaller-pieces",
            "text": "The Mandelbrot set can take a while to create, particularly if you make the iterations large or the image size large. What if we broke the creation of the image into multiple invocations (an HTC approach!) then stitched them together? Once we do that, we can run the each goatbroat in parallel in our cluster. Here's an example you can run by hand.    Run goatbroat 4 times:  username@learn $  /usr/local/bin/goatbrot -i  1000  -o tile_000000_000000.ppm -c -0.75,0.75 -w  1 .5 -s  500 ,500 username@learn $  /usr/local/bin/goatbrot -i  1000  -o tile_000000_000001.ppm -c  0 .75,0.75 -w  1 .5 -s  500 ,500  username@learn $  /usr/local/bin/goatbrot -i  1000  -o tile_000001_000000.ppm -c -0.75,-0.75 -w  1 .5 -s  500 ,500  username@learn $  /usr/local/bin/goatbrot -i  1000  -o tile_000001_000001.ppm -c  0 .75,-0.75 -w  1 .5 -s  500 ,500    Stitch the small images together into the complete image (in JPEG format):  username@learn $  montage tile_000000_000000.ppm tile_000000_000001.ppm tile_000001_000000.ppm tile_000001_000001.ppm -mode Concatenate -tile 2x2 mandel.jpg    This will produce the same image as above. We divided the image space into a 2\u00d72 grid and ran  goatbrot  on each section of the grid. The built-in  montage  program simply stitches the files together and writes out the final image in JPEG format.",
            "title": "Dividing the Work into Smaller Pieces"
        },
        {
            "location": "/materials/day4/part4-ex2-mandelbrot/#view-the-image",
            "text": "Run the commands above, make sure you can create the Mandelbrot image. \nWhen you create the image, you might wonder how you can view it. \nIf you're comfortable with  scp  or another method, you can copy it back to your laptop to view it. Otherwise you can view it in your web browser in three easy steps:    Make your web directory (you only need to do this once):  username@learn $   cd  ~ username@learn $  mkdir public_html  username@learn $  chmod  0711  .  username@learn $  chmod  0755  public_html    Copy the image into your web directory (the below command assumes you're back in the directory where you created mandel.jpg):  username@learn $  cp mandel.jpg ~/public_html/    Access  http://learn.chtc.wisc.edu/~ <USERNAME> /mandel.jpg  in your web browser (change   to your username on the submit machine).",
            "title": "View the Image!"
        },
        {
            "location": "/materials/day4/part4-ex3-complex-dag/",
            "text": "pre em { font-style: normal; background-color: yellow; } pre strong { font-style: normal; font-weight: bold; color: \\#008; } \n\n\n\nMonday Exercise 4.3: A More Complex DAG\n\u00b6\n\n\nThe objective of this exercise is to run a real set of jobs with DAGMan.\n\n\nMake Your Job Submission Files\n\u00b6\n\n\nWe'll run our \ngoatbrot\n example. If you didn't read about it yet, \nplease do so now\n. We are going to make a DAG with four simultaneous jobs (\ngoatbrot\n) and one final node to stitch them together (\nmontage\n). This means we have five jobs. We're going to run \ngoatbrot\n with more iterations (100,000) so each job will take longer to run.\n\n\nYou can create your five jobs. The goatbrot jobs are very similar to each other, but they have slightly different parameters and output files.\n\n\ngoatbrot1.sub\n\u00b6\n\n\nexecutable\n              \n=\n \n/\nusr\n/\nlocal\n/\nbin\n/\ngoatbrot\n\n\narguments\n               \n=\n \n-\ni\n \n100000\n \n-\nc\n \n-\n0\n.\n75\n,\n0\n.\n75\n \n-\nw\n \n1\n.\n5\n \n-\ns\n \n500\n,\n500\n \n-\no\n \ntile_0_0\n.\nppm\n\n\nlog\n                     \n=\n \ngoatbrot\n.\nlog\n\n\noutput\n                  \n=\n \ngoatbrot\n.\nout\n.\n0\n.\n0\n\n\nerror\n                   \n=\n \ngoatbrot\n.\nerr\n.\n0\n.\n0\n\n\nrequest_memory\n          \n=\n \n1\nGB\n\n\nrequest_disk\n            \n=\n \n1\nGB\n\n\nrequest_cpus\n            \n=\n \n1\n\n\nqueue\n\n\n\n\n\n\ngoatbrot2.sub\n\u00b6\n\n\nexecutable\n              \n=\n \n/\nusr\n/\nlocal\n/\nbin\n/\ngoatbrot\n\n\narguments\n               \n=\n \n-\ni\n \n100000\n \n-\nc\n \n0\n.\n75\n,\n0\n.\n75\n \n-\nw\n \n1\n.\n5\n \n-\ns\n \n500\n,\n500\n \n-\no\n \ntile_0_1\n.\nppm\n\n\nlog\n                     \n=\n \ngoatbrot\n.\nlog\n\n\noutput\n                  \n=\n \ngoatbrot\n.\nout\n.\n0\n.\n1\n\n\nerror\n                   \n=\n \ngoatbrot\n.\nerr\n.\n0\n.\n1\n\n\nrequest_memory\n          \n=\n \n1\nGB\n\n\nrequest_disk\n            \n=\n \n1\nGB\n\n\nrequest_cpus\n            \n=\n \n1\n\n\nqueue\n\n\n\n\n\n\ngoatbrot3.sub\n\u00b6\n\n\nexecutable\n              \n=\n \n/\nusr\n/\nlocal\n/\nbin\n/\ngoatbrot\n\n\narguments\n               \n=\n \n-\ni\n \n100000\n \n-\nc\n \n-\n0\n.\n75\n,\n-\n0\n.\n75\n \n-\nw\n \n1\n.\n5\n \n-\ns\n \n500\n,\n500\n \n-\no\n \ntile_1_0\n.\nppm\n\n\nlog\n                     \n=\n \ngoatbrot\n.\nlog\n\n\noutput\n                  \n=\n \ngoatbrot\n.\nout\n.\n1\n.\n0\n\n\nerror\n                   \n=\n \ngoatbrot\n.\nerr\n.\n1\n.\n0\n\n\nrequest_memory\n          \n=\n \n1\nGB\n\n\nrequest_disk\n            \n=\n \n1\nGB\n\n\nrequest_cpus\n            \n=\n \n1\n\n\nqueue\n\n\n\n\n\n\ngoatbrot4.sub\n\u00b6\n\n\nexecutable\n              \n=\n \n/\nusr\n/\nlocal\n/\nbin\n/\ngoatbrot\n\n\narguments\n               \n=\n \n-\ni\n \n100000\n \n-\nc\n \n0\n.\n75\n,\n-\n0\n.\n75\n \n-\nw\n \n1\n.\n5\n \n-\ns\n \n500\n,\n500\n \n-\no\n \ntile_1_1\n.\nppm\n\n\nlog\n                     \n=\n \ngoatbrot\n.\nlog\n\n\noutput\n                  \n=\n \ngoatbrot\n.\nout\n.\n1\n.\n1\n\n\nerror\n                   \n=\n \ngoatbrot\n.\nerr\n.\n1\n.\n1\n\n\nrequest_memory\n          \n=\n \n1\nGB\n\n\nrequest_disk\n            \n=\n \n1\nGB\n\n\nrequest_cpus\n            \n=\n \n1\n\n\nqueue\n\n\n\n\n\n\nmontage.sub\n\u00b6\n\n\nYou should notice that the \ntransfer_input_files\n statement refers to the files created by the other jobs.\n\n\nexecutable\n              \n=\n \n/\nusr\n/\nbin\n/\nmontage\n\n\narguments\n               \n=\n \ntile_0_0\n.\nppm\n \ntile_0_1\n.\nppm\n \ntile_1_0\n.\nppm\n \ntile_1_1\n.\nppm\n \n-\nmode\n \nConcatenate\n \n-\ntile\n \n2\nx2\n \nmandel\n-\nfrom\n-\ndag\n.\njpg\n\n\ntransfer_input_files\n    \n=\n \ntile_0_0\n.\nppm\n,\ntile_0_1\n.\nppm\n,\ntile_1_0\n.\nppm\n,\ntile_1_1\n.\nppm\n\n\noutput\n                  \n=\n \nmontage\n.\nout\n\n\nerror\n                   \n=\n \nmontage\n.\nerr\n\n\nlog\n                     \n=\n \nmontage\n.\nlog\n\n\nrequest_memory\n          \n=\n \n1\nGB\n\n\nrequest_disk\n            \n=\n \n1\nGB\n\n\nrequest_cpus\n            \n=\n \n1\n\n\nrequirements\n            \n=\n \nOpSysMajorVer\n \n=?=\n \n6\n\n\nqueue\n\n\n\n\n\n\nMake your DAG\n\u00b6\n\n\nIn a file called \ngoatbrot.dag\n, you have your DAG specification:\n\n\nJOB\n \ng1\n \ngoatbrot1\n.\nsub\n\n\nJOB\n \ng2\n \ngoatbrot2\n.\nsub\n\n\nJOB\n \ng3\n \ngoatbrot3\n.\nsub\n\n\nJOB\n \ng4\n \ngoatbrot4\n.\nsub\n\n\nJOB\n \nmontage\n \nmontage\n.\nsub\n\n\nPARENT\n \ng1\n \ng2\n \ng3\n \ng4\n \nCHILD\n \nmontage\n\n\n\n\n\n\nAsk yourself: do you know how we ensure that all the \ngoatbrot\n commands can run simultaneously and all of them will complete before we run the montage job?\n\n\nRunning the DAG\n\u00b6\n\n\nSubmit your DAG:\n\n\nusername@learn $\n condor_submit_dag goatbrot.dag\n\n-----------------------------------------------------------------------\n\n\nFile for submitting this DAG to Condor           : goatbrot.dag.condor.sub\n\n\nLog of DAGMan debugging messages                 : goatbrot.dag.dagman.out\n\n\nLog of Condor library output                     : goatbrot.dag.lib.out\n\n\nLog of Condor library error messages             : goatbrot.dag.lib.err\n\n\nLog of the life of condor_dagman itself          : goatbrot.dag.dagman.log\n\n\n\nSubmitting job(s).\n\n\n1 job(s) submitted to cluster 71.\n\n\n\n-----------------------------------------------------------------------\n\n\n\n\n\n\nWatch Your DAG\n\u00b6\n\n\nLet\u2019s follow the progress of the whole DAG:\n\n\n\n\n\n\nUse the \nwatch\n command to run \ncondor_q -nobatch\n every 10 seconds:\n\n\nusername@learn $\n watch -n \n10\n condor_q -nobatch\n\n\n\n\n\nHere we see DAGMan running:\n \n\n\n ID  OWNER  SUBMITTED   RUN_TIME ST PRI SIZE CMD \n\n\n71.0 roy   6/22 17:39 0+00:00:03 R  0    0.3 condor_dagman\n\n\n\n\n\n\nDAGMan has submitted the goatbrot jobs, but they haven't started running yet\n\n\n ID  OWNER SUBMITTED   RUN_TIME ST PRI SIZE CMD \n\n\n71.0 roy  6/22 17:39 0+00:00:17 R  0    0.3 condor_dagman \n\n\n72.0 roy  6/22 17:39 0+00:00:00 I  0    0.0 goatbrot -i 100000 \n\n\n73.0 roy  6/22 17:39 0+00:00:00 I  0    0.0 goatbrot -i 100000 \n\n\n74.0 roy  6/22 17:39 0+00:00:00 I  0    0.0 goatbrot -i 100000 \n\n\n75.0 roy  6/22 17:39 0+00:00:00 I  0    0.0 goatbrot -i 100000\n\n\n\n\n\n\nThey're running\n \n\n\n ID  OWNER SUBMITTED   RUN_TIME ST PRI SIZE CMD\n\n\n71.0 roy  6/22 17:39 0+00:07:15 R  0    0.3 condor_dagman \n\n\n72.0 roy  6/22 17:39 0+00:00:03 R  0    0.0 goatbrot -i 100000 \n\n\n73.0 roy  6/22 17:39 0+00:00:03 R  0    0.0 goatbrot -i 100000 \n\n\n74.0 roy  6/22 17:39 0+00:00:03 R  0    0.0 goatbrot -i 100000 \n\n\n75.0 roy  6/22 17:39 0+00:00:03 R  0    0.0 goatbrot -i 100000\n\n\n\n\n\n\nThey finished, but DAGMan hasn't noticed yet. It only checks periodically:\n\n\n ID  OWNER SUBMITTED   RUN_TIME ST PRI SIZE CMD \n\n\n71.0 roy  6/22 17:39 0+00:08:46 R  0    0.3 condor_dagman\n\n\n\n\n\n\nEventually, you'll see the montage job submitted, then running, then leave the queue, and then DAGMan will leave the queue.\n\n\n\n\n\n\nExamine your results. For some reason, goatbrot prints everything to stderr, not stdout.\n\n\nusername@learn $\n cat goatbrot.err.0.0 \n\nComplex image: Center: -0.75 + 0.75i Width: 1.5 Height: 1.5 Upper Left: -1.5 + 1.5i Lower Right: 0 + 0i\n\n\n\nOutput image: Filename: tile_0_0.ppm Width, Height: 500, 500 Theme: beej Antialiased: no\n\n\n\nMandelbrot: Max Iterations: 100000 Continuous: no\n\n\n\nGoatbrot: Multithreading: not supported in this build\n\n\n\nCompleted: 100.0%\n\n\n\n\n\n\n\n\n\n\nExamine your log files (\ngoatbrot.log\n and \nmontage.log\n) and DAGMan output file (\ngoatbrot.dag.dagman.out\n). Do they look as you expect? Can you see the progress of the DAG in the DAGMan output file?\n\n\n\n\nAs you did earlier, copy the resulting \nmandel-from-dag.jpg\n to your \npublic_html\n directory, then access it from your web browser. Does the image look correct?\n\n\nClean up your results by removing all of the \ngoatbrot.dag.*\n files if you like. Be careful to not delete the \ngoatbrot.dag\n file.\n\n\n\n\nBonus Challenge\n\u00b6\n\n\n\n\nRe-run your DAG. When jobs are running, try \ncondor_q -nobatch -dag\n. What does it do differently?\n\n\nChallenge, if you have time: Make a bigger DAG by making more tiles in the same area.",
            "title": "Exercise 4.3"
        },
        {
            "location": "/materials/day4/part4-ex3-complex-dag/#monday-exercise-43-a-more-complex-dag",
            "text": "The objective of this exercise is to run a real set of jobs with DAGMan.",
            "title": "Monday Exercise 4.3: A More Complex DAG"
        },
        {
            "location": "/materials/day4/part4-ex3-complex-dag/#make-your-job-submission-files",
            "text": "We'll run our  goatbrot  example. If you didn't read about it yet,  please do so now . We are going to make a DAG with four simultaneous jobs ( goatbrot ) and one final node to stitch them together ( montage ). This means we have five jobs. We're going to run  goatbrot  with more iterations (100,000) so each job will take longer to run.  You can create your five jobs. The goatbrot jobs are very similar to each other, but they have slightly different parameters and output files.",
            "title": "Make Your Job Submission Files"
        },
        {
            "location": "/materials/day4/part4-ex3-complex-dag/#goatbrot1sub",
            "text": "executable                =   / usr / local / bin / goatbrot  arguments                 =   - i   100000   - c   - 0 . 75 , 0 . 75   - w   1 . 5   - s   500 , 500   - o   tile_0_0 . ppm  log                       =   goatbrot . log  output                    =   goatbrot . out . 0 . 0  error                     =   goatbrot . err . 0 . 0  request_memory            =   1 GB  request_disk              =   1 GB  request_cpus              =   1  queue",
            "title": "goatbrot1.sub"
        },
        {
            "location": "/materials/day4/part4-ex3-complex-dag/#goatbrot2sub",
            "text": "executable                =   / usr / local / bin / goatbrot  arguments                 =   - i   100000   - c   0 . 75 , 0 . 75   - w   1 . 5   - s   500 , 500   - o   tile_0_1 . ppm  log                       =   goatbrot . log  output                    =   goatbrot . out . 0 . 1  error                     =   goatbrot . err . 0 . 1  request_memory            =   1 GB  request_disk              =   1 GB  request_cpus              =   1  queue",
            "title": "goatbrot2.sub"
        },
        {
            "location": "/materials/day4/part4-ex3-complex-dag/#goatbrot3sub",
            "text": "executable                =   / usr / local / bin / goatbrot  arguments                 =   - i   100000   - c   - 0 . 75 , - 0 . 75   - w   1 . 5   - s   500 , 500   - o   tile_1_0 . ppm  log                       =   goatbrot . log  output                    =   goatbrot . out . 1 . 0  error                     =   goatbrot . err . 1 . 0  request_memory            =   1 GB  request_disk              =   1 GB  request_cpus              =   1  queue",
            "title": "goatbrot3.sub"
        },
        {
            "location": "/materials/day4/part4-ex3-complex-dag/#goatbrot4sub",
            "text": "executable                =   / usr / local / bin / goatbrot  arguments                 =   - i   100000   - c   0 . 75 , - 0 . 75   - w   1 . 5   - s   500 , 500   - o   tile_1_1 . ppm  log                       =   goatbrot . log  output                    =   goatbrot . out . 1 . 1  error                     =   goatbrot . err . 1 . 1  request_memory            =   1 GB  request_disk              =   1 GB  request_cpus              =   1  queue",
            "title": "goatbrot4.sub"
        },
        {
            "location": "/materials/day4/part4-ex3-complex-dag/#montagesub",
            "text": "You should notice that the  transfer_input_files  statement refers to the files created by the other jobs.  executable                =   / usr / bin / montage  arguments                 =   tile_0_0 . ppm   tile_0_1 . ppm   tile_1_0 . ppm   tile_1_1 . ppm   - mode   Concatenate   - tile   2 x2   mandel - from - dag . jpg  transfer_input_files      =   tile_0_0 . ppm , tile_0_1 . ppm , tile_1_0 . ppm , tile_1_1 . ppm  output                    =   montage . out  error                     =   montage . err  log                       =   montage . log  request_memory            =   1 GB  request_disk              =   1 GB  request_cpus              =   1  requirements              =   OpSysMajorVer   =?=   6  queue",
            "title": "montage.sub"
        },
        {
            "location": "/materials/day4/part4-ex3-complex-dag/#make-your-dag",
            "text": "In a file called  goatbrot.dag , you have your DAG specification:  JOB   g1   goatbrot1 . sub  JOB   g2   goatbrot2 . sub  JOB   g3   goatbrot3 . sub  JOB   g4   goatbrot4 . sub  JOB   montage   montage . sub  PARENT   g1   g2   g3   g4   CHILD   montage   Ask yourself: do you know how we ensure that all the  goatbrot  commands can run simultaneously and all of them will complete before we run the montage job?",
            "title": "Make your DAG"
        },
        {
            "location": "/materials/day4/part4-ex3-complex-dag/#running-the-dag",
            "text": "Submit your DAG:  username@learn $  condor_submit_dag goatbrot.dag -----------------------------------------------------------------------  File for submitting this DAG to Condor           : goatbrot.dag.condor.sub  Log of DAGMan debugging messages                 : goatbrot.dag.dagman.out  Log of Condor library output                     : goatbrot.dag.lib.out  Log of Condor library error messages             : goatbrot.dag.lib.err  Log of the life of condor_dagman itself          : goatbrot.dag.dagman.log  Submitting job(s).  1 job(s) submitted to cluster 71.  -----------------------------------------------------------------------",
            "title": "Running the DAG"
        },
        {
            "location": "/materials/day4/part4-ex3-complex-dag/#watch-your-dag",
            "text": "Let\u2019s follow the progress of the whole DAG:    Use the  watch  command to run  condor_q -nobatch  every 10 seconds:  username@learn $  watch -n  10  condor_q -nobatch  Here we see DAGMan running:     ID  OWNER  SUBMITTED   RUN_TIME ST PRI SIZE CMD   71.0 roy   6/22 17:39 0+00:00:03 R  0    0.3 condor_dagman   DAGMan has submitted the goatbrot jobs, but they haven't started running yet   ID  OWNER SUBMITTED   RUN_TIME ST PRI SIZE CMD   71.0 roy  6/22 17:39 0+00:00:17 R  0    0.3 condor_dagman   72.0 roy  6/22 17:39 0+00:00:00 I  0    0.0 goatbrot -i 100000   73.0 roy  6/22 17:39 0+00:00:00 I  0    0.0 goatbrot -i 100000   74.0 roy  6/22 17:39 0+00:00:00 I  0    0.0 goatbrot -i 100000   75.0 roy  6/22 17:39 0+00:00:00 I  0    0.0 goatbrot -i 100000   They're running     ID  OWNER SUBMITTED   RUN_TIME ST PRI SIZE CMD  71.0 roy  6/22 17:39 0+00:07:15 R  0    0.3 condor_dagman   72.0 roy  6/22 17:39 0+00:00:03 R  0    0.0 goatbrot -i 100000   73.0 roy  6/22 17:39 0+00:00:03 R  0    0.0 goatbrot -i 100000   74.0 roy  6/22 17:39 0+00:00:03 R  0    0.0 goatbrot -i 100000   75.0 roy  6/22 17:39 0+00:00:03 R  0    0.0 goatbrot -i 100000   They finished, but DAGMan hasn't noticed yet. It only checks periodically:   ID  OWNER SUBMITTED   RUN_TIME ST PRI SIZE CMD   71.0 roy  6/22 17:39 0+00:08:46 R  0    0.3 condor_dagman   Eventually, you'll see the montage job submitted, then running, then leave the queue, and then DAGMan will leave the queue.    Examine your results. For some reason, goatbrot prints everything to stderr, not stdout.  username@learn $  cat goatbrot.err.0.0  Complex image: Center: -0.75 + 0.75i Width: 1.5 Height: 1.5 Upper Left: -1.5 + 1.5i Lower Right: 0 + 0i  Output image: Filename: tile_0_0.ppm Width, Height: 500, 500 Theme: beej Antialiased: no  Mandelbrot: Max Iterations: 100000 Continuous: no  Goatbrot: Multithreading: not supported in this build  Completed: 100.0%     Examine your log files ( goatbrot.log  and  montage.log ) and DAGMan output file ( goatbrot.dag.dagman.out ). Do they look as you expect? Can you see the progress of the DAG in the DAGMan output file?   As you did earlier, copy the resulting  mandel-from-dag.jpg  to your  public_html  directory, then access it from your web browser. Does the image look correct?  Clean up your results by removing all of the  goatbrot.dag.*  files if you like. Be careful to not delete the  goatbrot.dag  file.",
            "title": "Watch Your DAG"
        },
        {
            "location": "/materials/day4/part4-ex3-complex-dag/#bonus-challenge",
            "text": "Re-run your DAG. When jobs are running, try  condor_q -nobatch -dag . What does it do differently?  Challenge, if you have time: Make a bigger DAG by making more tiles in the same area.",
            "title": "Bonus Challenge"
        },
        {
            "location": "/materials/day4/part4-ex4-failed-dag/",
            "text": "Monday Exercise 4.4: Handling a DAG That Fails\n\u00b6\n\n\nThe objective of this exercise is to help you learn how DAGMan deals with job failures. DAGMan is built to help you recover from such failures.\n\n\nBackground\n\u00b6\n\n\nDAGMan can handle a situation where some of the nodes in a DAG fail. DAGMan will run as many nodes as possible, then create a rescue DAG making it easy to continue when the problem is fixed.\n\n\nBreaking Things\n\u00b6\n\n\nRecall that DAGMan decides that a jobs fails if its exit code is non-zero. Let's modify our montage job so that it fails. Work in the same directory where you did the last DAG. Edit montage.sub to add a \n-h\n to the arguments. It will look like this (the change is highlighted in red):\n\n\nexecutable\n              \n=\n \n/\nusr\n/\nbin\n/\nmontage\n\n\narguments\n               \n=\n \n%\nRED\n%-\nh\n%\nENDCOLOR\n%\n \ntile_0_0\n.\nppm\n \ntile_0_1\n.\nppm\n \ntile_1_0\n.\nppm\n \ntile_1_1\n.\nppm\n \n-\nmode\n \nConcatenate\n \n-\ntile\n \n2\nx2\n \nmandle\n-\nfrom\n-\ndag\n.\njpg\n\n\ntransfer_input_files\n    \n=\n \ntile_0_0\n.\nppm\n,\ntile_0_1\n.\nppm\n,\ntile_1_0\n.\nppm\n,\ntile_1_1\n.\nppm\n\n\noutput\n                  \n=\n \nmontage\n.\nout\n\n\nerror\n                   \n=\n \nmontage\n.\nerr\n\n\nlog\n                     \n=\n \nmontage\n.\nlog\n\n\nrequest_memory\n          \n=\n \n1\nGB\n\n\nrequest_disk\n            \n=\n \n1\nGB\n\n\nrequest_cpus\n            \n=\n \n1\n\n\nrequirements\n            \n=\n \nOpSysMajorVer\n \n=?=\n \n6\n\n\nqueue\n\n\n\n\n\n\nSubmit the DAG again:\n\n\nusername@learn $\n condor_submit_dag goatbrot.dag\n\n-----------------------------------------------------------------------\n\n\nFile for submitting this DAG to Condor           : goatbrot.dag.condor.sub\n\n\nLog of DAGMan debugging messages                 : goatbrot.dag.dagman.out\n\n\nLog of Condor library output                     : goatbrot.dag.lib.out\n\n\nLog of Condor library error messages             : goatbrot.dag.lib.err\n\n\nLog of the life of condor_dagman itself          : goatbrot.dag.dagman.log\n\n\n\nSubmitting job(s).\n\n\n1 job(s) submitted to cluster 77.\n\n\n-----------------------------------------------------------------------\n\n\n\n\n\n\nUse watch to watch the jobs until they finish. In a separate window, use \ntail --lines=500 -f goatbrot.dag.dagman.out\n to watch what DAGMan does.\n\n\n06/22/12 17:57:41 Setting maximum accepts per cycle 8.\n\n\n06/22/12 17:57:41 ******************************************************\n\n\n06/22/12 17:57:41 ** condor_scheduniv_exec.77.0 (CONDOR_DAGMAN) STARTING UP\n\n\n06/22/12 17:57:41 ** /usr/bin/condor_dagman\n\n\n06/22/12 17:57:41 ** SubsystemInfo: name=DAGMAN type=DAGMAN(10) class=DAEMON(1)\n\n\n06/22/12 17:57:41 ** Configuration: subsystem:DAGMAN local:<NONE> class:DAEMON\n\n\n06/22/12 17:57:41 ** $CondorVersion: 7.7.6 Apr 16 2012 BuildID: 34175 PRE-RELEASE-UWCS $\n\n\n06/22/12 17:57:41 ** $CondorPlatform: x86_64_rhap_5.7 $\n\n\n06/22/12 17:57:41 ** PID = 26867\n\n\n06/22/12 17:57:41 ** Log last touched time unavailable (No such file or directory)\n\n\n06/22/12 17:57:41 ******************************************************\n\n\n06/22/12 17:57:41 Using config source: /etc/condor/condor_config\n\n\n06/22/12 17:57:41 Using local config sources: \n\n\n06/22/12 17:57:41    /etc/condor/config.d/00-chtc-global.conf\n\n\n06/22/12 17:57:41    /etc/condor/config.d/01-chtc-submit.conf\n\n\n06/22/12 17:57:41    /etc/condor/config.d/02-chtc-flocking.conf\n\n\n06/22/12 17:57:41    /etc/condor/config.d/03-chtc-jobrouter.conf\n\n\n06/22/12 17:57:41    /etc/condor/config.d/04-chtc-blacklist.conf\n\n\n06/22/12 17:57:41    /etc/condor/config.d/99-osg-ss-group.conf\n\n\n06/22/12 17:57:41    /etc/condor/config.d/99-roy-extras.conf\n\n\n06/22/12 17:57:41    /etc/condor/condor_config.local\n\n\n\n\n\n\nBelow is where DAGMan realizes that the montage node failed:\n\n\n06/22/12 18:08:42 Event: ULOG_EXECUTE for Condor Node montage (82.0.0)\n\n\n06/22/12 18:08:42 Number of idle job procs: 0\n\n\n06/22/12 18:08:42 Event: ULOG_IMAGE_SIZE for Condor Node montage (82.0.0)\n\n\n06/22/12 18:08:42 Event: ULOG_JOB_TERMINATED for Condor Node montage (82.0.0)\n\n\n06/22/12 18:08:42 Node montage job proc (82.0.0) failed with status 1.\n\n\n06/22/12 18:08:42 Number of idle job procs: 0\n\n\n06/22/12 18:08:42 Of 5 nodes total:\n\n\n06/22/12 18:08:42  Done     Pre   Queued    Post   Ready   Un-Ready   Failed\n\n\n06/22/12 18:08:42   ===     ===      ===     ===     ===        ===      ===\n\n\n06/22/12 18:08:42     4       0        0       0       0          0        1\n\n\n06/22/12 18:08:42 0 job proc(s) currently held\n\n\n06/22/12 18:08:42 Aborting DAG...\n\n\n06/22/12 18:08:42 Writing Rescue DAG to goatbrot.dag.rescue001...\n\n\n06/22/12 18:08:42 Note: 0 total job deferrals because of -MaxJobs limit (0)\n\n\n06/22/12 18:08:42 Note: 0 total job deferrals because of -MaxIdle limit (0)\n\n\n06/22/12 18:08:42 Note: 0 total job deferrals because of node category throttles\n\n\n06/22/12 18:08:42 Note: 0 total PRE script deferrals because of -MaxPre limit (0)\n\n\n06/22/12 18:08:42 Note: 0 total POST script deferrals because of -MaxPost limit (0)\n\n\n06/22/12 18:08:42 **** condor_scheduniv_exec.77.0 (condor_DAGMAN) pid 26867 EXITING WITH STATUS 1\n\n\n\n\n\n\nDAGMan notices that one of the jobs failed because it's exit code was non-zero. DAGMan ran as much of the DAG as possible and logged enough information to continue the run when the situation is resolved. Do you see the part where it wrote the resuce DAG?\n\n\nLook at the rescue DAG file. It's called a partial DAG because it indicates what part of the DAG has already been completed.\n\n\nusername@learn $\n cat goatbrot.dag.rescue001\n\n#\n Rescue DAG file, created after running\n\n#\n   the goatbrot.dag DAG file\n\n#\n Created \n6\n/22/2012 \n23\n:08:42 UTC\n\n#\n Rescue DAG version: \n2\n.0.1 \n(\npartial\n)\n\n\n#\n\n\n#\n Total number of Nodes: \n5\n\n\n#\n Nodes premarked DONE: \n4\n\n\n#\n Nodes that failed: \n1\n\n\n#\n   montage,<ENDLIST>\n\n\nDONE g1\n\n\nDONE g2\n\n\nDONE g3\n\n\nDONE g4\n\n\n\n\n\n\nFrom the comment near the top, we know that the montage node failed. Let's fix it by getting rid of the offending \n-h\n argument. Change montage.sub to look like:\n\n\nexecutable\n              \n=\n \n/\nusr\n/\nbin\n/\nmontage\n\n\narguments\n               \n=\n \ntile_0_0\n.\nppm\n \ntile_0_1\n.\nppm\n \ntile_1_0\n.\nppm\n \ntile_1_1\n.\nppm\n \n-\nmode\n \nConcatenate\n \n-\ntile\n \n2\nx2\n \nmandle\n-\nfrom\n-\ndag\n.\njpg\n\n\ntransfer_input_files\n    \n=\n \ntile_0_0\n.\nppm\n,\ntile_0_1\n.\nppm\n,\ntile_1_0\n.\nppm\n,\ntile_1_1\n.\nppm\n\n\noutput\n                  \n=\n \nmontage\n.\nout\n\n\nerror\n                   \n=\n \nmontage\n.\nerr\n\n\nlog\n                     \n=\n \nmontage\n.\nlog\n\n\nrequest_memory\n          \n=\n \n1\nGB\n\n\nrequest_disk\n            \n=\n \n1\nGB\n\n\nrequest_cpus\n            \n=\n \n1\n\n\nrequirements\n            \n=\n \nOpSysMajorVer\n \n=?=\n \n6\n\n\nqueue\n\n\n\n\n\n\nNow we can re-submit our original DAG and DAGMan will pick up where it left off. It will automatically notice the rescue DAG. If you didn't fix the problem, DAGMan would generate another rescue DAG.\n\n\nusername@learn $\n condor_submit_dag goatbrot.dag\n\nRunning rescue DAG 1\n\n\n-----------------------------------------------------------------------\n\n\nFile for submitting this DAG to Condor           : goatbrot.dag.condor.sub\n\n\nLog of DAGMan debugging messages                 : goatbrot.dag.dagman.out\n\n\nLog of Condor library output                     : goatbrot.dag.lib.out\n\n\nLog of Condor library error messages             : goatbrot.dag.lib.err\n\n\nLog of the life of condor_dagman itself          : goatbrot.dag.dagman.log\n\n\n\nSubmitting job(s).\n\n\n1 job(s) submitted to cluster 83.\n\n\n-----------------------------------------------------------------------\n\n\n\nusername@learn $\n tail -f goatbrot.dag.dagman.out\n\n06/23/12 11:30:53 ******************************************************\n\n\n06/23/12 11:30:53 ** condor_scheduniv_exec.83.0 (CONDOR_DAGMAN) STARTING UP\n\n\n06/23/12 11:30:53 ** /usr/bin/condor_dagman\n\n\n06/23/12 11:30:53 ** SubsystemInfo: name=DAGMAN type=DAGMAN(10) class=DAEMON(1)\n\n\n06/23/12 11:30:53 ** Configuration: subsystem:DAGMAN local:<NONE> class:DAEMON\n\n\n06/23/12 11:30:53 ** $CondorVersion: 7.7.6 Apr 16 2012 BuildID: 34175 PRE-RELEASE-UWCS $\n\n\n06/23/12 11:30:53 ** $CondorPlatform: x86_64_rhap_5.7 $\n\n\n06/23/12 11:30:53 ** PID = 28576\n\n\n06/23/12 11:30:53 ** Log last touched 6/22 18:08:42\n\n\n06/23/12 11:30:53 ******************************************************\n\n\n06/23/12 11:30:53 Using config source: /etc/condor/condor_config\n\n\n...\n\n\n\n\n\n\nHere is where DAGMAN notices that there is a rescue DAG\n\n\n06/23/12 11:30:53 Parsing 1 dagfiles\n\n\n06/23/12 11:30:53 Parsing goatbrot.dag ...\n\n\n%\nRED%06/23/12 \n11\n:30:53 Found rescue DAG number \n1\n;\n running goatbrot.dag.rescue001 in combination with normal DAG file\n\n\n06/23/12 11:30:53 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n06/23/12 11:30:53 USING RESCUE DAG goatbrot.dag.rescue001\n\n\n06/23/12 11:30:53 Dag contains 5 total jobs\n\n\n\n\n\n\nShortly thereafter it sees that four jobs have already finished.\n\n\n06/23/12 11:31:05 Bootstrapping...\n\n\n06/23/12 11:31:05 Number of pre-completed nodes: 4\n\n\n06/23/12 11:31:05 Registering condor_event_timer...\n\n\n06/23/12 11:31:06 Sleeping for one second for log file consistency\n\n\n06/23/12 11:31:07 MultiLogFiles: truncating log file /home/roy/condor/goatbrot/montage.log\n\n\n\n\n\n\nHere is where DAGMan resubmits the montage job and waits for it to complete.\n\n\n06/23/12 11:31:07 Submitting Condor Node montage job(s)...\n\n\n06/23/12 11:31:07 submitting: condor_submit \n\n\n      -a dag_node_name' '=' 'montage \n\n\n      -a +DAGManJobId' '=' '83 \n\n\n      -a DAGManJobId' '=' '83 \n\n\n      -a submit_event_notes' '=' 'DAG' 'Node:' 'montage \n\n\n      -a DAG_STATUS' '=' '0 \n\n\n      -a FAILED_COUNT' '=' '0 \n\n\n      -a +DAGParentNodeNames' '=' '\"g1,g2,g3,g4\" \n\n\n      montage.sub\n\n\n06/23/12 11:31:07 From submit: Submitting job(s).\n\n\n06/23/12 11:31:07 From submit: 1 job(s) submitted to cluster 84.\n\n\n06/23/12 11:31:07   assigned Condor ID (84.0.0)\n\n\n06/23/12 11:31:07 Just submitted 1 job this cycle...\n\n\n06/23/12 11:31:07 Currently monitoring 1 Condor log file(s)\n\n\n06/23/12 11:31:07 Event: ULOG_SUBMIT for Condor Node montage (84.0.0)\n\n\n06/23/12 11:31:07 Number of idle job procs: 1\n\n\n06/23/12 11:31:07 Of 5 nodes total:\n\n\n06/23/12 11:31:07  Done     Pre   Queued    Post   Ready   Un-Ready   Failed\n\n\n06/23/12 11:31:07   ===     ===      ===     ===     ===        ===      ===\n\n\n06/23/12 11:31:07     4       0        1       0       0          0        0\n\n\n06/23/12 11:31:07 0 job proc(s) currently held\n\n\n06/23/12 11:40:22 Currently monitoring 1 Condor log file(s)\n\n\n06/23/12 11:40:22 Event: ULOG_EXECUTE for Condor Node montage (84.0.0)\n\n\n06/23/12 11:40:22 Number of idle job procs: 0\n\n\n06/23/12 11:40:22 Event: ULOG_IMAGE_SIZE for Condor Node montage (84.0.0)\n\n\n06/23/12 11:40:22 Event: ULOG_JOB_TERMINATED for Condor Node montage (84.0.0)\n\n\n\n\n\n\nThis is where the montage finished.\n\n\n06/23/12 11:40:22 Node montage job proc (84.0.0) completed successfully.\n\n\n06/23/12 11:40:22 Node montage job completed\n\n\n06/23/12 11:40:22 Number of idle job procs: 0\n\n\n06/23/12 11:40:22 Of 5 nodes total:\n\n\n06/23/12 11:40:22  Done     Pre   Queued    Post   Ready   Un-Ready   Failed\n\n\n06/23/12 11:40:22   ===     ===      ===     ===     ===        ===      ===\n\n\n06/23/12 11:40:22     5       0        0       0       0          0        0\n\n\n06/23/12 11:40:22 0 job proc(s) currently held\n\n\n\n\n\n\nAnd here DAGMan decides that the work is all done.\n\n\n06/23/12 11:40:22 All jobs Completed!\n\n\n06/23/12 11:40:22 Note: 0 total job deferrals because of -MaxJobs limit (0)\n\n\n06/23/12 11:40:22 Note: 0 total job deferrals because of -MaxIdle limit (0)\n\n\n06/23/12 11:40:22 Note: 0 total job deferrals because of node category throttles\n\n\n06/23/12 11:40:22 Note: 0 total PRE script deferrals because of -MaxPre limit (0)\n\n\n06/23/12 11:40:22 Note: 0 total POST script deferrals because of -MaxPost limit (0)\n\n\n06/23/12 11:40:22 **** condor_scheduniv_exec.83.0 (condor_DAGMAN) pid 28576 EXITING WITH STATUS 0\n\n\n\n\n\n\nSuccess! Now go ahead and clean up.\n\n\nBonus Challenge\n\u00b6\n\n\nIf you have time, add an extra node to the DAG. Copy our original \"simple\" program, but make it exit with a 1 instead of a 0. DAGMan would consider this a failure, but you'll tell DAGMan that it's really a success. This is reasonable--many real world programs use a variety of return codes, and you might need to help DAGMan distinguish success from failure.\n\n\nWrite a POST script that checks the return value. Check \nthe Condor manual\n to see how to describe your post script.",
            "title": "Exercise 4.4"
        },
        {
            "location": "/materials/day4/part4-ex4-failed-dag/#monday-exercise-44-handling-a-dag-that-fails",
            "text": "The objective of this exercise is to help you learn how DAGMan deals with job failures. DAGMan is built to help you recover from such failures.",
            "title": "Monday Exercise 4.4: Handling a DAG That Fails"
        },
        {
            "location": "/materials/day4/part4-ex4-failed-dag/#background",
            "text": "DAGMan can handle a situation where some of the nodes in a DAG fail. DAGMan will run as many nodes as possible, then create a rescue DAG making it easy to continue when the problem is fixed.",
            "title": "Background"
        },
        {
            "location": "/materials/day4/part4-ex4-failed-dag/#breaking-things",
            "text": "Recall that DAGMan decides that a jobs fails if its exit code is non-zero. Let's modify our montage job so that it fails. Work in the same directory where you did the last DAG. Edit montage.sub to add a  -h  to the arguments. It will look like this (the change is highlighted in red):  executable                =   / usr / bin / montage  arguments                 =   % RED %- h % ENDCOLOR %   tile_0_0 . ppm   tile_0_1 . ppm   tile_1_0 . ppm   tile_1_1 . ppm   - mode   Concatenate   - tile   2 x2   mandle - from - dag . jpg  transfer_input_files      =   tile_0_0 . ppm , tile_0_1 . ppm , tile_1_0 . ppm , tile_1_1 . ppm  output                    =   montage . out  error                     =   montage . err  log                       =   montage . log  request_memory            =   1 GB  request_disk              =   1 GB  request_cpus              =   1  requirements              =   OpSysMajorVer   =?=   6  queue   Submit the DAG again:  username@learn $  condor_submit_dag goatbrot.dag -----------------------------------------------------------------------  File for submitting this DAG to Condor           : goatbrot.dag.condor.sub  Log of DAGMan debugging messages                 : goatbrot.dag.dagman.out  Log of Condor library output                     : goatbrot.dag.lib.out  Log of Condor library error messages             : goatbrot.dag.lib.err  Log of the life of condor_dagman itself          : goatbrot.dag.dagman.log  Submitting job(s).  1 job(s) submitted to cluster 77.  -----------------------------------------------------------------------   Use watch to watch the jobs until they finish. In a separate window, use  tail --lines=500 -f goatbrot.dag.dagman.out  to watch what DAGMan does.  06/22/12 17:57:41 Setting maximum accepts per cycle 8.  06/22/12 17:57:41 ******************************************************  06/22/12 17:57:41 ** condor_scheduniv_exec.77.0 (CONDOR_DAGMAN) STARTING UP  06/22/12 17:57:41 ** /usr/bin/condor_dagman  06/22/12 17:57:41 ** SubsystemInfo: name=DAGMAN type=DAGMAN(10) class=DAEMON(1)  06/22/12 17:57:41 ** Configuration: subsystem:DAGMAN local:<NONE> class:DAEMON  06/22/12 17:57:41 ** $CondorVersion: 7.7.6 Apr 16 2012 BuildID: 34175 PRE-RELEASE-UWCS $  06/22/12 17:57:41 ** $CondorPlatform: x86_64_rhap_5.7 $  06/22/12 17:57:41 ** PID = 26867  06/22/12 17:57:41 ** Log last touched time unavailable (No such file or directory)  06/22/12 17:57:41 ******************************************************  06/22/12 17:57:41 Using config source: /etc/condor/condor_config  06/22/12 17:57:41 Using local config sources:   06/22/12 17:57:41    /etc/condor/config.d/00-chtc-global.conf  06/22/12 17:57:41    /etc/condor/config.d/01-chtc-submit.conf  06/22/12 17:57:41    /etc/condor/config.d/02-chtc-flocking.conf  06/22/12 17:57:41    /etc/condor/config.d/03-chtc-jobrouter.conf  06/22/12 17:57:41    /etc/condor/config.d/04-chtc-blacklist.conf  06/22/12 17:57:41    /etc/condor/config.d/99-osg-ss-group.conf  06/22/12 17:57:41    /etc/condor/config.d/99-roy-extras.conf  06/22/12 17:57:41    /etc/condor/condor_config.local   Below is where DAGMan realizes that the montage node failed:  06/22/12 18:08:42 Event: ULOG_EXECUTE for Condor Node montage (82.0.0)  06/22/12 18:08:42 Number of idle job procs: 0  06/22/12 18:08:42 Event: ULOG_IMAGE_SIZE for Condor Node montage (82.0.0)  06/22/12 18:08:42 Event: ULOG_JOB_TERMINATED for Condor Node montage (82.0.0)  06/22/12 18:08:42 Node montage job proc (82.0.0) failed with status 1.  06/22/12 18:08:42 Number of idle job procs: 0  06/22/12 18:08:42 Of 5 nodes total:  06/22/12 18:08:42  Done     Pre   Queued    Post   Ready   Un-Ready   Failed  06/22/12 18:08:42   ===     ===      ===     ===     ===        ===      ===  06/22/12 18:08:42     4       0        0       0       0          0        1  06/22/12 18:08:42 0 job proc(s) currently held  06/22/12 18:08:42 Aborting DAG...  06/22/12 18:08:42 Writing Rescue DAG to goatbrot.dag.rescue001...  06/22/12 18:08:42 Note: 0 total job deferrals because of -MaxJobs limit (0)  06/22/12 18:08:42 Note: 0 total job deferrals because of -MaxIdle limit (0)  06/22/12 18:08:42 Note: 0 total job deferrals because of node category throttles  06/22/12 18:08:42 Note: 0 total PRE script deferrals because of -MaxPre limit (0)  06/22/12 18:08:42 Note: 0 total POST script deferrals because of -MaxPost limit (0)  06/22/12 18:08:42 **** condor_scheduniv_exec.77.0 (condor_DAGMAN) pid 26867 EXITING WITH STATUS 1   DAGMan notices that one of the jobs failed because it's exit code was non-zero. DAGMan ran as much of the DAG as possible and logged enough information to continue the run when the situation is resolved. Do you see the part where it wrote the resuce DAG?  Look at the rescue DAG file. It's called a partial DAG because it indicates what part of the DAG has already been completed.  username@learn $  cat goatbrot.dag.rescue001 #  Rescue DAG file, created after running #    the goatbrot.dag DAG file #  Created  6 /22/2012  23 :08:42 UTC #  Rescue DAG version:  2 .0.1  ( partial )  #  #  Total number of Nodes:  5  #  Nodes premarked DONE:  4  #  Nodes that failed:  1  #    montage,<ENDLIST> DONE g1  DONE g2  DONE g3  DONE g4   From the comment near the top, we know that the montage node failed. Let's fix it by getting rid of the offending  -h  argument. Change montage.sub to look like:  executable                =   / usr / bin / montage  arguments                 =   tile_0_0 . ppm   tile_0_1 . ppm   tile_1_0 . ppm   tile_1_1 . ppm   - mode   Concatenate   - tile   2 x2   mandle - from - dag . jpg  transfer_input_files      =   tile_0_0 . ppm , tile_0_1 . ppm , tile_1_0 . ppm , tile_1_1 . ppm  output                    =   montage . out  error                     =   montage . err  log                       =   montage . log  request_memory            =   1 GB  request_disk              =   1 GB  request_cpus              =   1  requirements              =   OpSysMajorVer   =?=   6  queue   Now we can re-submit our original DAG and DAGMan will pick up where it left off. It will automatically notice the rescue DAG. If you didn't fix the problem, DAGMan would generate another rescue DAG.  username@learn $  condor_submit_dag goatbrot.dag Running rescue DAG 1  -----------------------------------------------------------------------  File for submitting this DAG to Condor           : goatbrot.dag.condor.sub  Log of DAGMan debugging messages                 : goatbrot.dag.dagman.out  Log of Condor library output                     : goatbrot.dag.lib.out  Log of Condor library error messages             : goatbrot.dag.lib.err  Log of the life of condor_dagman itself          : goatbrot.dag.dagman.log  Submitting job(s).  1 job(s) submitted to cluster 83.  -----------------------------------------------------------------------  username@learn $  tail -f goatbrot.dag.dagman.out 06/23/12 11:30:53 ******************************************************  06/23/12 11:30:53 ** condor_scheduniv_exec.83.0 (CONDOR_DAGMAN) STARTING UP  06/23/12 11:30:53 ** /usr/bin/condor_dagman  06/23/12 11:30:53 ** SubsystemInfo: name=DAGMAN type=DAGMAN(10) class=DAEMON(1)  06/23/12 11:30:53 ** Configuration: subsystem:DAGMAN local:<NONE> class:DAEMON  06/23/12 11:30:53 ** $CondorVersion: 7.7.6 Apr 16 2012 BuildID: 34175 PRE-RELEASE-UWCS $  06/23/12 11:30:53 ** $CondorPlatform: x86_64_rhap_5.7 $  06/23/12 11:30:53 ** PID = 28576  06/23/12 11:30:53 ** Log last touched 6/22 18:08:42  06/23/12 11:30:53 ******************************************************  06/23/12 11:30:53 Using config source: /etc/condor/condor_config  ...   Here is where DAGMAN notices that there is a rescue DAG  06/23/12 11:30:53 Parsing 1 dagfiles  06/23/12 11:30:53 Parsing goatbrot.dag ...  % RED%06/23/12  11 :30:53 Found rescue DAG number  1 ;  running goatbrot.dag.rescue001 in combination with normal DAG file  06/23/12 11:30:53 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  06/23/12 11:30:53 USING RESCUE DAG goatbrot.dag.rescue001  06/23/12 11:30:53 Dag contains 5 total jobs   Shortly thereafter it sees that four jobs have already finished.  06/23/12 11:31:05 Bootstrapping...  06/23/12 11:31:05 Number of pre-completed nodes: 4  06/23/12 11:31:05 Registering condor_event_timer...  06/23/12 11:31:06 Sleeping for one second for log file consistency  06/23/12 11:31:07 MultiLogFiles: truncating log file /home/roy/condor/goatbrot/montage.log   Here is where DAGMan resubmits the montage job and waits for it to complete.  06/23/12 11:31:07 Submitting Condor Node montage job(s)...  06/23/12 11:31:07 submitting: condor_submit         -a dag_node_name' '=' 'montage         -a +DAGManJobId' '=' '83         -a DAGManJobId' '=' '83         -a submit_event_notes' '=' 'DAG' 'Node:' 'montage         -a DAG_STATUS' '=' '0         -a FAILED_COUNT' '=' '0         -a +DAGParentNodeNames' '=' '\"g1,g2,g3,g4\"         montage.sub  06/23/12 11:31:07 From submit: Submitting job(s).  06/23/12 11:31:07 From submit: 1 job(s) submitted to cluster 84.  06/23/12 11:31:07   assigned Condor ID (84.0.0)  06/23/12 11:31:07 Just submitted 1 job this cycle...  06/23/12 11:31:07 Currently monitoring 1 Condor log file(s)  06/23/12 11:31:07 Event: ULOG_SUBMIT for Condor Node montage (84.0.0)  06/23/12 11:31:07 Number of idle job procs: 1  06/23/12 11:31:07 Of 5 nodes total:  06/23/12 11:31:07  Done     Pre   Queued    Post   Ready   Un-Ready   Failed  06/23/12 11:31:07   ===     ===      ===     ===     ===        ===      ===  06/23/12 11:31:07     4       0        1       0       0          0        0  06/23/12 11:31:07 0 job proc(s) currently held  06/23/12 11:40:22 Currently monitoring 1 Condor log file(s)  06/23/12 11:40:22 Event: ULOG_EXECUTE for Condor Node montage (84.0.0)  06/23/12 11:40:22 Number of idle job procs: 0  06/23/12 11:40:22 Event: ULOG_IMAGE_SIZE for Condor Node montage (84.0.0)  06/23/12 11:40:22 Event: ULOG_JOB_TERMINATED for Condor Node montage (84.0.0)   This is where the montage finished.  06/23/12 11:40:22 Node montage job proc (84.0.0) completed successfully.  06/23/12 11:40:22 Node montage job completed  06/23/12 11:40:22 Number of idle job procs: 0  06/23/12 11:40:22 Of 5 nodes total:  06/23/12 11:40:22  Done     Pre   Queued    Post   Ready   Un-Ready   Failed  06/23/12 11:40:22   ===     ===      ===     ===     ===        ===      ===  06/23/12 11:40:22     5       0        0       0       0          0        0  06/23/12 11:40:22 0 job proc(s) currently held   And here DAGMan decides that the work is all done.  06/23/12 11:40:22 All jobs Completed!  06/23/12 11:40:22 Note: 0 total job deferrals because of -MaxJobs limit (0)  06/23/12 11:40:22 Note: 0 total job deferrals because of -MaxIdle limit (0)  06/23/12 11:40:22 Note: 0 total job deferrals because of node category throttles  06/23/12 11:40:22 Note: 0 total PRE script deferrals because of -MaxPre limit (0)  06/23/12 11:40:22 Note: 0 total POST script deferrals because of -MaxPost limit (0)  06/23/12 11:40:22 **** condor_scheduniv_exec.83.0 (condor_DAGMAN) pid 28576 EXITING WITH STATUS 0   Success! Now go ahead and clean up.",
            "title": "Breaking Things"
        },
        {
            "location": "/materials/day4/part4-ex4-failed-dag/#bonus-challenge",
            "text": "If you have time, add an extra node to the DAG. Copy our original \"simple\" program, but make it exit with a 1 instead of a 0. DAGMan would consider this a failure, but you'll tell DAGMan that it's really a success. This is reasonable--many real world programs use a variety of return codes, and you might need to help DAGMan distinguish success from failure.  Write a POST script that checks the return value. Check  the Condor manual  to see how to describe your post script.",
            "title": "Bonus Challenge"
        },
        {
            "location": "/materials/day4/part4-ex5-challenges/",
            "text": "pre em { font-style: normal; background-color: yellow; }\n  pre strong { font-style: normal; font-weight: bold; color: \\#008; }\n\n\n\n\nMonday Bonus Exercise 4.5: YOUR Jobs and More on Workflows\n\u00b6\n\n\nThe objective of this exercise is to learn the very basics of running a set of jobs, where our set is just one job.\n\n\nChallenge 1\n\u00b6\n\n\nDo you have any extra computation that needs to be done? Real work, from your life outside this summer school? If so, try it out on our HTCondor pool. Can't think of something? How about one of the existing distributed computing programs like \ndistributed.net\n, \nSETI@home\n, \nEinstien@Home\n or others that you know. We prefer that you do your own work rather than one of these projects, but they are options.\n\n\nChallenge 2\n\u00b6\n\n\nTry to generate other Mandelbrot images. Some possible locations to look at with goatbroat:\n\n\ngoatbrot -i 1000 -o ex1.ppm -c 0.0016437219722,-0.8224676332988 -w 2e-11 -s 1000,1000\n\n\ngoatbrot -i 1000 -o ex2.ppm -c 0.3958608398437499,-0.13431445312500012 -w 0.0002197265625 -s 1000,1000\n\n\ngoatbrot -i 1000 -o ex3.ppm -c 0.3965859374999999,-0.13378125000000013 -w 0.003515625  -s 1000,1000\n\n\n\n\n\n\nYou can convert ppm files with \nconvert\n, like so:\n\n\nconvert ex1.ppm ex1.jpg\n\n\n\n\n\n\nNow make a movie! Make a series of images where you zoom into a point in the Mandelbrot set gradually. (Those points above may work well.) Assemble these images with the \"convert\" tool which will let you convert a set of JPEG files into an MPEG movie.\n\n\nChallenge 3\n\u00b6\n\n\nTry out Pegasus. Pegasus is a workflow manager that uses DAGMan and can work in a grid environment and/or run across different types of clusters (with other queueing software). It will create the DAGs from abstract DAG descriptions and ensure they are appropriate for the location of the data and computation.\n\n\nLinks to more information:\n\n\n\n\nPegasus Website\n\n\nPegasus Documentation\n\n\nPegasus on OSG Connect (covered Thursday)\n\n\n\n\nIf you have any questions or problems, please feel free to contact the Pegasus team by emailing \npegasus-support@isi.edu\n\n\nNote: Be Nice\n\u00b6\n\n\nPlease be polite. Computers in our Condor pool will run multiple jobs at a time, and these computers are shared with your fellow students. If you have jobs that will use significant computational power or memory, limit your jobs to be kind to your neighbors, unless you run your jobs during off-hours.",
            "title": "Bonus Exercises 4.5"
        },
        {
            "location": "/materials/day4/part4-ex5-challenges/#monday-bonus-exercise-45-your-jobs-and-more-on-workflows",
            "text": "The objective of this exercise is to learn the very basics of running a set of jobs, where our set is just one job.",
            "title": "Monday Bonus Exercise 4.5: YOUR Jobs and More on Workflows"
        },
        {
            "location": "/materials/day4/part4-ex5-challenges/#challenge-1",
            "text": "Do you have any extra computation that needs to be done? Real work, from your life outside this summer school? If so, try it out on our HTCondor pool. Can't think of something? How about one of the existing distributed computing programs like  distributed.net ,  SETI@home ,  Einstien@Home  or others that you know. We prefer that you do your own work rather than one of these projects, but they are options.",
            "title": "Challenge 1"
        },
        {
            "location": "/materials/day4/part4-ex5-challenges/#challenge-2",
            "text": "Try to generate other Mandelbrot images. Some possible locations to look at with goatbroat:  goatbrot -i 1000 -o ex1.ppm -c 0.0016437219722,-0.8224676332988 -w 2e-11 -s 1000,1000  goatbrot -i 1000 -o ex2.ppm -c 0.3958608398437499,-0.13431445312500012 -w 0.0002197265625 -s 1000,1000  goatbrot -i 1000 -o ex3.ppm -c 0.3965859374999999,-0.13378125000000013 -w 0.003515625  -s 1000,1000   You can convert ppm files with  convert , like so:  convert ex1.ppm ex1.jpg   Now make a movie! Make a series of images where you zoom into a point in the Mandelbrot set gradually. (Those points above may work well.) Assemble these images with the \"convert\" tool which will let you convert a set of JPEG files into an MPEG movie.",
            "title": "Challenge 2"
        },
        {
            "location": "/materials/day4/part4-ex5-challenges/#challenge-3",
            "text": "Try out Pegasus. Pegasus is a workflow manager that uses DAGMan and can work in a grid environment and/or run across different types of clusters (with other queueing software). It will create the DAGs from abstract DAG descriptions and ensure they are appropriate for the location of the data and computation.  Links to more information:   Pegasus Website  Pegasus Documentation  Pegasus on OSG Connect (covered Thursday)   If you have any questions or problems, please feel free to contact the Pegasus team by emailing  pegasus-support@isi.edu",
            "title": "Challenge 3"
        },
        {
            "location": "/materials/day4/part4-ex5-challenges/#note-be-nice",
            "text": "Please be polite. Computers in our Condor pool will run multiple jobs at a time, and these computers are shared with your fellow students. If you have jobs that will use significant computational power or memory, limit your jobs to be kind to your neighbors, unless you run your jobs during off-hours.",
            "title": "Note: Be Nice"
        }
    ]
}